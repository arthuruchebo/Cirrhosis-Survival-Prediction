{"cells":[{"cell_type":"markdown","source":["# Cirrhosis Prediction: A Machine Learning Approach\n","\n","---\n","\n","\n","\n","---\n","\n","\n","\n","---\n","\n"],"metadata":{"id":"5dJJAPkU8uIF"}},{"cell_type":"markdown","source":["## Introduction\n","\n","---\n","\n","\n","\n","---\n","\n"],"metadata":{"id":"_lUJmFEf80kt"}},{"cell_type":"markdown","source":["### Background\n","\n"],"metadata":{"id":"aE8Og6l983ld"}},{"cell_type":"markdown","source":["**This notebook aims to predict cirrhosis outcomes using machine learning techniques**\n"],"metadata":{"id":"8h8CcHhv86_k"}},{"cell_type":"markdown","metadata":{"id":"vEjV4LNyOVEe"},"source":["# Libraries"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Nx4hhbFUY_o8"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.preprocessing import OneHotEncoder\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import RobustScaler"]},{"cell_type":"markdown","metadata":{"id":"TqRfApa3OZZO"},"source":["# Data Upload"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"duq7hyfjZWnt","executionInfo":{"status":"ok","timestamp":1715020363298,"user_tz":-60,"elapsed":14754,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"f6f88ef3-9e05-4e2c-a6b7-9ff53081e1a0"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-fed4a050-953f-49a5-acb4-833de84300bd\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-fed4a050-953f-49a5-acb4-833de84300bd\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving train.csv to train.csv\n"]}],"source":["from google.colab import files\n","uploaded = files.upload()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"di2t1_Y3Lh2q","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020363298,"user_tz":-60,"elapsed":10,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"4a76674d-b770-427e-a97e-b889f7739693"},"outputs":[{"output_type":"stream","name":"stdout","text":["drive  sample_data  train.csv\n"]}],"source":["!ls"]},{"cell_type":"markdown","metadata":{"id":"4aM3x8rvOdZd"},"source":["#Dataset"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pvZNbkqYZ6lq"},"outputs":[],"source":["cirrhosis_data = pd.read_csv('/content/train.csv')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Q5lDyVLtabPL","colab":{"base_uri":"https://localhost:8080/","height":530},"executionInfo":{"status":"ok","timestamp":1715020363621,"user_tz":-60,"elapsed":325,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"7ffc312d-10f8-42ae-c90b-6f3664b2b33f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["        id  N_Days             Drug    Age Sex Ascites Hepatomegaly Spiders  \\\n","0        0     999  D-penicillamine  21532   M       N            N       N   \n","1        1    2574          Placebo  19237   F       N            N       N   \n","2        2    3428          Placebo  13727   F       N            Y       Y   \n","3        3    2576          Placebo  18460   F       N            N       N   \n","4        4     788          Placebo  16658   F       N            Y       N   \n","...    ...     ...              ...    ...  ..     ...          ...     ...   \n","7900  7900    1166  D-penicillamine  16839   F       N            N       N   \n","7901  7901    1492          Placebo  17031   F       N            Y       N   \n","7902  7902    1576  D-penicillamine  25873   F       N            N       Y   \n","7903  7903    3584  D-penicillamine  22960   M       N            Y       N   \n","7904  7904    1978  D-penicillamine  19237   F       N            N       N   \n","\n","     Edema  Bilirubin  Cholesterol  Albumin  Copper  Alk_Phos    SGOT  \\\n","0        N        2.3        316.0     3.35   172.0    1601.0  179.80   \n","1        N        0.9        364.0     3.54    63.0    1440.0  134.85   \n","2        Y        3.3        299.0     3.55   131.0    1029.0  119.35   \n","3        N        0.6        256.0     3.50    58.0    1653.0   71.30   \n","4        N        1.1        346.0     3.65    63.0    1181.0  125.55   \n","...    ...        ...          ...      ...     ...       ...     ...   \n","7900     N        0.8        309.0     3.56    38.0    1629.0   79.05   \n","7901     N        0.9        260.0     3.43    62.0    1440.0  142.00   \n","7902     S        2.0        225.0     3.19    51.0     933.0   69.75   \n","7903     N        0.7        248.0     2.75    32.0    1003.0   57.35   \n","7904     N        0.7        256.0     3.23    22.0     645.0   74.40   \n","\n","      Tryglicerides  Platelets  Prothrombin  Stage Status  \n","0              63.0      394.0          9.7    3.0      D  \n","1              88.0      361.0         11.0    3.0      C  \n","2              50.0      199.0         11.7    4.0      D  \n","3              96.0      269.0         10.7    3.0      C  \n","4              96.0      298.0         10.6    4.0      C  \n","...             ...        ...          ...    ...    ...  \n","7900          224.0      344.0          9.9    2.0      C  \n","7901           78.0      277.0         10.0    4.0      C  \n","7902           62.0      200.0         12.7    2.0      D  \n","7903          118.0      221.0         10.6    4.0      D  \n","7904           85.0      336.0         10.3    3.0      C  \n","\n","[7905 rows x 20 columns]"],"text/html":["\n","  <div id=\"df-99947804-30b3-4362-b3d1-ae1d46448e36\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>N_Days</th>\n","      <th>Drug</th>\n","      <th>Age</th>\n","      <th>Sex</th>\n","      <th>Ascites</th>\n","      <th>Hepatomegaly</th>\n","      <th>Spiders</th>\n","      <th>Edema</th>\n","      <th>Bilirubin</th>\n","      <th>Cholesterol</th>\n","      <th>Albumin</th>\n","      <th>Copper</th>\n","      <th>Alk_Phos</th>\n","      <th>SGOT</th>\n","      <th>Tryglicerides</th>\n","      <th>Platelets</th>\n","      <th>Prothrombin</th>\n","      <th>Stage</th>\n","      <th>Status</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>999</td>\n","      <td>D-penicillamine</td>\n","      <td>21532</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>2.3</td>\n","      <td>316.0</td>\n","      <td>3.35</td>\n","      <td>172.0</td>\n","      <td>1601.0</td>\n","      <td>179.80</td>\n","      <td>63.0</td>\n","      <td>394.0</td>\n","      <td>9.7</td>\n","      <td>3.0</td>\n","      <td>D</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>2574</td>\n","      <td>Placebo</td>\n","      <td>19237</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>0.9</td>\n","      <td>364.0</td>\n","      <td>3.54</td>\n","      <td>63.0</td>\n","      <td>1440.0</td>\n","      <td>134.85</td>\n","      <td>88.0</td>\n","      <td>361.0</td>\n","      <td>11.0</td>\n","      <td>3.0</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>3428</td>\n","      <td>Placebo</td>\n","      <td>13727</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>3.3</td>\n","      <td>299.0</td>\n","      <td>3.55</td>\n","      <td>131.0</td>\n","      <td>1029.0</td>\n","      <td>119.35</td>\n","      <td>50.0</td>\n","      <td>199.0</td>\n","      <td>11.7</td>\n","      <td>4.0</td>\n","      <td>D</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>2576</td>\n","      <td>Placebo</td>\n","      <td>18460</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>0.6</td>\n","      <td>256.0</td>\n","      <td>3.50</td>\n","      <td>58.0</td>\n","      <td>1653.0</td>\n","      <td>71.30</td>\n","      <td>96.0</td>\n","      <td>269.0</td>\n","      <td>10.7</td>\n","      <td>3.0</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>788</td>\n","      <td>Placebo</td>\n","      <td>16658</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>1.1</td>\n","      <td>346.0</td>\n","      <td>3.65</td>\n","      <td>63.0</td>\n","      <td>1181.0</td>\n","      <td>125.55</td>\n","      <td>96.0</td>\n","      <td>298.0</td>\n","      <td>10.6</td>\n","      <td>4.0</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>7900</th>\n","      <td>7900</td>\n","      <td>1166</td>\n","      <td>D-penicillamine</td>\n","      <td>16839</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>0.8</td>\n","      <td>309.0</td>\n","      <td>3.56</td>\n","      <td>38.0</td>\n","      <td>1629.0</td>\n","      <td>79.05</td>\n","      <td>224.0</td>\n","      <td>344.0</td>\n","      <td>9.9</td>\n","      <td>2.0</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>7901</th>\n","      <td>7901</td>\n","      <td>1492</td>\n","      <td>Placebo</td>\n","      <td>17031</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>0.9</td>\n","      <td>260.0</td>\n","      <td>3.43</td>\n","      <td>62.0</td>\n","      <td>1440.0</td>\n","      <td>142.00</td>\n","      <td>78.0</td>\n","      <td>277.0</td>\n","      <td>10.0</td>\n","      <td>4.0</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>7902</th>\n","      <td>7902</td>\n","      <td>1576</td>\n","      <td>D-penicillamine</td>\n","      <td>25873</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>S</td>\n","      <td>2.0</td>\n","      <td>225.0</td>\n","      <td>3.19</td>\n","      <td>51.0</td>\n","      <td>933.0</td>\n","      <td>69.75</td>\n","      <td>62.0</td>\n","      <td>200.0</td>\n","      <td>12.7</td>\n","      <td>2.0</td>\n","      <td>D</td>\n","    </tr>\n","    <tr>\n","      <th>7903</th>\n","      <td>7903</td>\n","      <td>3584</td>\n","      <td>D-penicillamine</td>\n","      <td>22960</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>0.7</td>\n","      <td>248.0</td>\n","      <td>2.75</td>\n","      <td>32.0</td>\n","      <td>1003.0</td>\n","      <td>57.35</td>\n","      <td>118.0</td>\n","      <td>221.0</td>\n","      <td>10.6</td>\n","      <td>4.0</td>\n","      <td>D</td>\n","    </tr>\n","    <tr>\n","      <th>7904</th>\n","      <td>7904</td>\n","      <td>1978</td>\n","      <td>D-penicillamine</td>\n","      <td>19237</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>0.7</td>\n","      <td>256.0</td>\n","      <td>3.23</td>\n","      <td>22.0</td>\n","      <td>645.0</td>\n","      <td>74.40</td>\n","      <td>85.0</td>\n","      <td>336.0</td>\n","      <td>10.3</td>\n","      <td>3.0</td>\n","      <td>C</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>7905 rows × 20 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-99947804-30b3-4362-b3d1-ae1d46448e36')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-99947804-30b3-4362-b3d1-ae1d46448e36 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-99947804-30b3-4362-b3d1-ae1d46448e36');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5cede395-de23-486e-afe7-469acfc87be4\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5cede395-de23-486e-afe7-469acfc87be4')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5cede395-de23-486e-afe7-469acfc87be4 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"cirrhosis_data","summary":"{\n  \"name\": \"cirrhosis_data\",\n  \"rows\": 7905,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2282,\n        \"min\": 0,\n        \"max\": 7904,\n        \"num_unique_values\": 7905,\n        \"samples\": [\n          3467,\n          465,\n          453\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"N_Days\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1094,\n        \"min\": 41,\n        \"max\": 4795,\n        \"num_unique_values\": 461,\n        \"samples\": [\n          130,\n          1882,\n          3170\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Drug\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Placebo\",\n          \"D-penicillamine\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3679,\n        \"min\": 9598,\n        \"max\": 28650,\n        \"num_unique_values\": 391,\n        \"samples\": [\n          15009,\n          14019\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"F\",\n          \"M\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ascites\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Y\",\n          \"N\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Hepatomegaly\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Y\",\n          \"N\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Spiders\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Y\",\n          \"N\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Edema\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"N\",\n          \"Y\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bilirubin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.8129603247080253,\n        \"min\": 0.3,\n        \"max\": 28.0,\n        \"num_unique_values\": 111,\n        \"samples\": [\n          7.3,\n          1.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cholesterol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 195.37934396689388,\n        \"min\": 120.0,\n        \"max\": 1775.0,\n        \"num_unique_values\": 226,\n        \"samples\": [\n          478.0,\n          340.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Albumin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3461708110784792,\n        \"min\": 1.96,\n        \"max\": 4.64,\n        \"num_unique_values\": 160,\n        \"samples\": [\n          2.53,\n          3.45\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Copper\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 75.89926584569689,\n        \"min\": 4.0,\n        \"max\": 588.0,\n        \"num_unique_values\": 171,\n        \"samples\": [\n          101.0,\n          123.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Alk_Phos\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1903.750657315917,\n        \"min\": 289.0,\n        \"max\": 13862.4,\n        \"num_unique_values\": 364,\n        \"samples\": [\n          1536.0,\n          938.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SGOT\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48.79094489183394,\n        \"min\": 26.35,\n        \"max\": 457.25,\n        \"num_unique_values\": 206,\n        \"samples\": [\n          184.45,\n          171.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tryglicerides\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 52.53040171631092,\n        \"min\": 33.0,\n        \"max\": 598.0,\n        \"num_unique_values\": 154,\n        \"samples\": [\n          133.0,\n          175.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Platelets\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 87.46557851441047,\n        \"min\": 62.0,\n        \"max\": 563.0,\n        \"num_unique_values\": 227,\n        \"samples\": [\n          336.0,\n          327.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Prothrombin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7817348264911252,\n        \"min\": 9.0,\n        \"max\": 18.0,\n        \"num_unique_values\": 49,\n        \"samples\": [\n          12.1,\n          13.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Stage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8665106288728248,\n        \"min\": 1.0,\n        \"max\": 4.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          4.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"D\",\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":5}],"source":["cirrhosis_data"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KjFCJxaaFVQh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020363992,"user_tz":-60,"elapsed":374,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"a02957a5-aa62-43c0-ce9b-3a61862df697"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["id               0\n","N_Days           0\n","Drug             0\n","Age              0\n","Sex              0\n","Ascites          0\n","Hepatomegaly     0\n","Spiders          0\n","Edema            0\n","Bilirubin        0\n","Cholesterol      0\n","Albumin          0\n","Copper           0\n","Alk_Phos         0\n","SGOT             0\n","Tryglicerides    0\n","Platelets        0\n","Prothrombin      0\n","Stage            0\n","Status           0\n","dtype: int64"]},"metadata":{},"execution_count":6}],"source":["cirrhosis_data.isna().sum(axis=0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jZJzO_ULFb8r","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020363993,"user_tz":-60,"elapsed":11,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"b17d2d1a-87e8-47a4-f61c-e7607c70fc29"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["id               0\n","N_Days           0\n","Drug             0\n","Age              0\n","Sex              0\n","Ascites          0\n","Hepatomegaly     0\n","Spiders          0\n","Edema            0\n","Bilirubin        0\n","Cholesterol      0\n","Albumin          0\n","Copper           0\n","Alk_Phos         0\n","SGOT             0\n","Tryglicerides    0\n","Platelets        0\n","Prothrombin      0\n","Stage            0\n","Status           0\n","dtype: int64"]},"metadata":{},"execution_count":7}],"source":["cirrhosis_data.isnull().sum()"]},{"cell_type":"markdown","metadata":{"id":"cfYhhKPta2YL"},"source":["#Data Description"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"43wBAQ_Sad98","colab":{"base_uri":"https://localhost:8080/","height":477},"executionInfo":{"status":"ok","timestamp":1715020364590,"user_tz":-60,"elapsed":602,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"3bef6482-1837-4aa0-80c4-58df0233c915"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                count          mean          std      min       25%       50%  \\\n","id             7905.0   3952.000000  2282.121272     0.00   1976.00   3952.00   \n","N_Days         7905.0   2030.173308  1094.233744    41.00   1230.00   1831.00   \n","Age            7905.0  18373.146490  3679.958739  9598.00  15574.00  18713.00   \n","Bilirubin      7905.0      2.594485     3.812960     0.30      0.70      1.10   \n","Cholesterol    7905.0    350.561923   195.379344   120.00    248.00    298.00   \n","Albumin        7905.0      3.548323     0.346171     1.96      3.35      3.58   \n","Copper         7905.0     83.902846    75.899266     4.00     39.00     63.00   \n","Alk_Phos       7905.0   1816.745250  1903.750657   289.00    834.00   1181.00   \n","SGOT           7905.0    114.604602    48.790945    26.35     75.95    108.50   \n","Tryglicerides  7905.0    115.340164    52.530402    33.00     84.00    104.00   \n","Platelets      7905.0    265.228969    87.465579    62.00    211.00    265.00   \n","Prothrombin    7905.0     10.629462     0.781735     9.00     10.00     10.60   \n","Stage          7905.0      3.032511     0.866511     1.00      2.00      3.00   \n","\n","                    75%       max  \n","id              5928.00   7904.00  \n","N_Days          2689.00   4795.00  \n","Age            20684.00  28650.00  \n","Bilirubin          3.00     28.00  \n","Cholesterol      390.00   1775.00  \n","Albumin            3.77      4.64  \n","Copper           102.00    588.00  \n","Alk_Phos        1857.00  13862.40  \n","SGOT             137.95    457.25  \n","Tryglicerides    139.00    598.00  \n","Platelets        316.00    563.00  \n","Prothrombin       11.00     18.00  \n","Stage              4.00      4.00  "],"text/html":["\n","  <div id=\"df-aada612f-326b-4f32-8df2-30def2fe2cbf\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","      <th>mean</th>\n","      <th>std</th>\n","      <th>min</th>\n","      <th>25%</th>\n","      <th>50%</th>\n","      <th>75%</th>\n","      <th>max</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>id</th>\n","      <td>7905.0</td>\n","      <td>3952.000000</td>\n","      <td>2282.121272</td>\n","      <td>0.00</td>\n","      <td>1976.00</td>\n","      <td>3952.00</td>\n","      <td>5928.00</td>\n","      <td>7904.00</td>\n","    </tr>\n","    <tr>\n","      <th>N_Days</th>\n","      <td>7905.0</td>\n","      <td>2030.173308</td>\n","      <td>1094.233744</td>\n","      <td>41.00</td>\n","      <td>1230.00</td>\n","      <td>1831.00</td>\n","      <td>2689.00</td>\n","      <td>4795.00</td>\n","    </tr>\n","    <tr>\n","      <th>Age</th>\n","      <td>7905.0</td>\n","      <td>18373.146490</td>\n","      <td>3679.958739</td>\n","      <td>9598.00</td>\n","      <td>15574.00</td>\n","      <td>18713.00</td>\n","      <td>20684.00</td>\n","      <td>28650.00</td>\n","    </tr>\n","    <tr>\n","      <th>Bilirubin</th>\n","      <td>7905.0</td>\n","      <td>2.594485</td>\n","      <td>3.812960</td>\n","      <td>0.30</td>\n","      <td>0.70</td>\n","      <td>1.10</td>\n","      <td>3.00</td>\n","      <td>28.00</td>\n","    </tr>\n","    <tr>\n","      <th>Cholesterol</th>\n","      <td>7905.0</td>\n","      <td>350.561923</td>\n","      <td>195.379344</td>\n","      <td>120.00</td>\n","      <td>248.00</td>\n","      <td>298.00</td>\n","      <td>390.00</td>\n","      <td>1775.00</td>\n","    </tr>\n","    <tr>\n","      <th>Albumin</th>\n","      <td>7905.0</td>\n","      <td>3.548323</td>\n","      <td>0.346171</td>\n","      <td>1.96</td>\n","      <td>3.35</td>\n","      <td>3.58</td>\n","      <td>3.77</td>\n","      <td>4.64</td>\n","    </tr>\n","    <tr>\n","      <th>Copper</th>\n","      <td>7905.0</td>\n","      <td>83.902846</td>\n","      <td>75.899266</td>\n","      <td>4.00</td>\n","      <td>39.00</td>\n","      <td>63.00</td>\n","      <td>102.00</td>\n","      <td>588.00</td>\n","    </tr>\n","    <tr>\n","      <th>Alk_Phos</th>\n","      <td>7905.0</td>\n","      <td>1816.745250</td>\n","      <td>1903.750657</td>\n","      <td>289.00</td>\n","      <td>834.00</td>\n","      <td>1181.00</td>\n","      <td>1857.00</td>\n","      <td>13862.40</td>\n","    </tr>\n","    <tr>\n","      <th>SGOT</th>\n","      <td>7905.0</td>\n","      <td>114.604602</td>\n","      <td>48.790945</td>\n","      <td>26.35</td>\n","      <td>75.95</td>\n","      <td>108.50</td>\n","      <td>137.95</td>\n","      <td>457.25</td>\n","    </tr>\n","    <tr>\n","      <th>Tryglicerides</th>\n","      <td>7905.0</td>\n","      <td>115.340164</td>\n","      <td>52.530402</td>\n","      <td>33.00</td>\n","      <td>84.00</td>\n","      <td>104.00</td>\n","      <td>139.00</td>\n","      <td>598.00</td>\n","    </tr>\n","    <tr>\n","      <th>Platelets</th>\n","      <td>7905.0</td>\n","      <td>265.228969</td>\n","      <td>87.465579</td>\n","      <td>62.00</td>\n","      <td>211.00</td>\n","      <td>265.00</td>\n","      <td>316.00</td>\n","      <td>563.00</td>\n","    </tr>\n","    <tr>\n","      <th>Prothrombin</th>\n","      <td>7905.0</td>\n","      <td>10.629462</td>\n","      <td>0.781735</td>\n","      <td>9.00</td>\n","      <td>10.00</td>\n","      <td>10.60</td>\n","      <td>11.00</td>\n","      <td>18.00</td>\n","    </tr>\n","    <tr>\n","      <th>Stage</th>\n","      <td>7905.0</td>\n","      <td>3.032511</td>\n","      <td>0.866511</td>\n","      <td>1.00</td>\n","      <td>2.00</td>\n","      <td>3.00</td>\n","      <td>4.00</td>\n","      <td>4.00</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aada612f-326b-4f32-8df2-30def2fe2cbf')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-aada612f-326b-4f32-8df2-30def2fe2cbf button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-aada612f-326b-4f32-8df2-30def2fe2cbf');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c8fab883-a413-4cbb-8afa-7ce2bd59a801\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c8fab883-a413-4cbb-8afa-7ce2bd59a801')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c8fab883-a413-4cbb-8afa-7ce2bd59a801 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"cirrhosis_data\",\n  \"rows\": 13,\n  \"fields\": [\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 7905.0,\n        \"max\": 7905.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          7905.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5035.350500932314,\n        \"min\": 2.594484503478811,\n        \"max\": 18373.14648956357,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          10.629462365591397\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1183.0061889247872,\n        \"min\": 0.3461708110784792,\n        \"max\": 3679.958738539589,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          0.7817348264911252\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2649.6292764770133,\n        \"min\": 0.0,\n        \"max\": 9598.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          9.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"25%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4253.637944864794,\n        \"min\": 0.7,\n        \"max\": 15574.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          10.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"50%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5136.233052455206,\n        \"min\": 1.1,\n        \"max\": 18713.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          10.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"75%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5729.101319937892,\n        \"min\": 3.0,\n        \"max\": 20684.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          11.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8330.748629568592,\n        \"min\": 4.0,\n        \"max\": 28650.0,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          18.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":8}],"source":["cirrhosis_data.describe().transpose()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3DGkCb3Wa9Is","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020364590,"user_tz":-60,"elapsed":14,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"bb6da778-481c-48c1-980e-8c30dfab582e"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(7905, 20)"]},"metadata":{},"execution_count":9}],"source":["cirrhosis_data.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eM_2PdLeby8D","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020364590,"user_tz":-60,"elapsed":8,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"fb01f7cb-db3a-417e-c887-2a07d015b8ab"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["id               0\n","N_Days           0\n","Drug             0\n","Age              0\n","Sex              0\n","Ascites          0\n","Hepatomegaly     0\n","Spiders          0\n","Edema            0\n","Bilirubin        0\n","Cholesterol      0\n","Albumin          0\n","Copper           0\n","Alk_Phos         0\n","SGOT             0\n","Tryglicerides    0\n","Platelets        0\n","Prothrombin      0\n","Stage            0\n","Status           0\n","dtype: int64"]},"metadata":{},"execution_count":10}],"source":["cirrhosis_data.isnull().sum()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WHRnvzPCb4R1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020364591,"user_tz":-60,"elapsed":7,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"a7cc6ea2-4287-4b48-bcc3-1e2cc8f78ea5"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 7905 entries, 0 to 7904\n","Data columns (total 20 columns):\n"," #   Column         Non-Null Count  Dtype  \n","---  ------         --------------  -----  \n"," 0   id             7905 non-null   int64  \n"," 1   N_Days         7905 non-null   int64  \n"," 2   Drug           7905 non-null   object \n"," 3   Age            7905 non-null   int64  \n"," 4   Sex            7905 non-null   object \n"," 5   Ascites        7905 non-null   object \n"," 6   Hepatomegaly   7905 non-null   object \n"," 7   Spiders        7905 non-null   object \n"," 8   Edema          7905 non-null   object \n"," 9   Bilirubin      7905 non-null   float64\n"," 10  Cholesterol    7905 non-null   float64\n"," 11  Albumin        7905 non-null   float64\n"," 12  Copper         7905 non-null   float64\n"," 13  Alk_Phos       7905 non-null   float64\n"," 14  SGOT           7905 non-null   float64\n"," 15  Tryglicerides  7905 non-null   float64\n"," 16  Platelets      7905 non-null   float64\n"," 17  Prothrombin    7905 non-null   float64\n"," 18  Stage          7905 non-null   float64\n"," 19  Status         7905 non-null   object \n","dtypes: float64(10), int64(3), object(7)\n","memory usage: 1.2+ MB\n"]}],"source":["cirrhosis_data.info()"]},{"cell_type":"markdown","metadata":{"id":"pjwfRh18cIFg"},"source":["#Exploratory Data Analysis"]},{"cell_type":"markdown","metadata":{"id":"lXzvnJSkfyx2"},"source":["##N_Days"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"v7x0L6Off0-2","colab":{"base_uri":"https://localhost:8080/","height":452},"executionInfo":{"status":"ok","timestamp":1715020365614,"user_tz":-60,"elapsed":1028,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"6b1bf72d-eba8-4925-f78f-30f866cb6b26"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["cirrhosis_data['N_Days'].plot(kind='hist', bins=20, title='N_Days')\n","plt.gca().spines[['top', 'right',]].set_visible(False)"]},{"cell_type":"markdown","metadata":{"id":"XYYue-Oncmpg"},"source":["##Drug"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dhxv8Lw3cB9L","colab":{"base_uri":"https://localhost:8080/","height":415},"executionInfo":{"status":"ok","timestamp":1715020365929,"user_tz":-60,"elapsed":319,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"c94d9488-4809-46bc-97dc-b66958db72ea"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["cirrhosis_data.groupby('Drug').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))\n","plt.gca().spines[['top', 'right',]].set_visible(True)"]},{"cell_type":"markdown","metadata":{"id":"Ovh-Bp89gGre"},"source":["##Age"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hEibek4gf5xV","colab":{"base_uri":"https://localhost:8080/","height":452},"executionInfo":{"status":"ok","timestamp":1715020366545,"user_tz":-60,"elapsed":619,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"80c07bbf-4ac2-4fe0-9fa2-d8fabda541be"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["cirrhosis_data['Age'].plot(kind='hist', bins=20, title='Age')\n","plt.gca().spines[['top', 'right',]].set_visible(False)"]},{"cell_type":"markdown","metadata":{"id":"JY8ko6PZdezu"},"source":["##Sex"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zvy3vbAscx0o","colab":{"base_uri":"https://localhost:8080/","height":430},"executionInfo":{"status":"ok","timestamp":1715020367054,"user_tz":-60,"elapsed":512,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"1a5166b5-ccf4-4c2f-bc82-feae44a41fc6"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["cirrhosis_data.groupby('Sex').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))\n","plt.gca().spines[['top', 'right',]].set_visible(True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tJugvAQXdZyk"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"P7maYnS7di2Y"},"source":["##Ascites"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jmYS6WH-dkoR","colab":{"base_uri":"https://localhost:8080/","height":430},"executionInfo":{"status":"ok","timestamp":1715020367840,"user_tz":-60,"elapsed":791,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"944884a5-85d5-4740-b8c6-00240cbfa507"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAisAAAGdCAYAAADT1TPdAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAbxElEQVR4nO3de5DVdf348dfiussiLEsiN+ViQZB3kETw0kUQL1NpN4eoAe8ajdrNoqYwZxK0pknJvJSBkw5kmWQXL4gImoqJIiJ+EZPkLqbCLkWr7L5/fzicnyugu7pw3px9PGZ2hv183px9vecwZ5/z2fNZylJKKQAAMtWu2AMAALwTsQIAZE2sAABZEysAQNbECgCQNbECAGRNrAAAWRMrAEDWyos9QGtobGyMtWvXRqdOnaKsrKzY4wAAzZBSirq6uujVq1e0a7fz6yclEStr166N3r17F3sMAOA9WLVqVRxwwAE7PV8SsdKpU6eIeHOz1dXVRZ4GAGiO2tra6N27d+H7+M6URKxs+9FPdXW1WAGAPcy7vYXDG2wBgKyJFQAga2IFAMiaWAEAsiZWAICsiRUAIGtiBQDImlgBALImVgCArIkVACBrYgUAyJpYAQCyJlYAgKyJFQAga2IFAMiaWAEAsiZWAICsiRUAIGtiBQDImlgBALImVgCArIkVACBrYgUAyJpYAQCyJlYAgKyJFQAga2IFAMiaWAEAsiZWAICsiRUAIGtiBQDImlgBALImVgCArIkVACBrYgUAyJpYAQCyJlYAgKyJFQAga2IFAMiaWAEAsiZWAICsiRUAIGtiBQDIWnmxB2hNz19QEx0rynbJY394esMueVwA4J25sgIAZE2sAABZEysAQNbECgCQNbECAGRNrAAAWRMrAEDWxAoAkDWxAgBkTawAAFkTKwBA1sQKAJA1sQIAZE2sAABZEysAQNbECgCQNbECAGRNrAAAWRMrAEDWxAoAkDWxAgBkTawAAFkTKwBA1sQKAJA1sQIAZE2sAABZEysAQNbECgCQNbECAGRNrAAAWRMrAEDWxAoAkDWxAgBkTawAAFkTKwBA1sQKAJA1sQIAZE2sAABZEysAQNbECgCQNbECAGStqLGSUoqRI0fG6NGjtzv3y1/+MmpqamL16tVFmAwAyEVRY6WsrCymTZsWCxYsiBtuuKFwfMWKFXHppZfG1KlT44ADDijihABAsRX9x0C9e/eOq6++Or71rW/FihUrIqUUZ599dpx44onxla98pdjjAQBFVl7sASIixo0bF3fccUecddZZ8dnPfjaWLFkSzzzzzE7X19fXR319feHz2tra3TEmAFAEWcRKRMSNN94YBx98cMyfPz9uv/322G+//Xa6dvLkyfGjH/1oN04HABRL0X8MtE23bt3i/PPPj4985CNx2mmnvePaiRMnxqZNmwofq1at2j1DAgC7XTZXViIiysvLo7z83UeqrKyMysrK3TARAFBs2VxZAQDYEbECAGRNrAAAWcsqVi677LJYtGhRsccAADKSVawAALydWAEAsiZWAICsiRUAIGtiBQDImlgBALImVgCArIkVACBrYgUAyJpYAQCyJlYAgKyJFQAga2IFAMiaWAEAsiZWAICsiRUAIGtiBQDImlgBALImVgCArIkVACBrYgUAyJpYAQCyJlYAgKyJFQAga2IFAMiaWAEAsiZWAICsiRUAIGtiBQDImlgBALImVgCArIkVACBrYgUAyJpYAQCyJlYAgKyJFQAga2IFAMiaWAEAsiZWAICslRd7gNbU//qNUV1dXewxAIBW5MoKAJA1sQIAZE2sAABZEysAQNbECgCQNbECAGRNrAAAWRMrAEDWxAoAkDWxAgBkTawAAFkTKwBA1sQKAJA1sQIAZE2sAABZEysAQNbECgCQNbECAGRNrAAAWRMrAEDWxAoAkDWxAgBkTawAAFlrcaysWrUqVq9eXfj8sccei0suuSRuvPHGVh0MACDiPcTKl770pZg7d25ERKxfvz5GjRoVjz32WHz/+9+Pyy+/vNUHBADathbHypIlS+Koo46KiIjbbrstDjnkkHj44Yfj1ltvjenTp7f2fABAG9fiWHnjjTeisrIyIiLuu++++PSnPx0REYMGDYp169a17nQAQJvX4lg5+OCD4/rrr48HH3wwZs+eHSeddFJERKxduzb23XffVh8QAGjbWhwrV155Zdxwww3x8Y9/PMaMGROHH354RETceeedhR8PAQC0lrKUUmrpX2poaIja2tro0qVL4di//vWv6NChQ3Tr1q1VB2yO2tra6Ny5c2zatCmqq6t3+9cHAFquud+/39PvWUkpxcKFC+OGG26Iurq6iIioqKiIDh06vLdpAQB2orylf+HFF1+Mk046KVauXBn19fUxatSo6NSp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TT4AgNJUXuwB3mrKlClxxBFHxMCBA4s9CgCQiWyurEREHHrooTF27Ni45pprij0KAJCJrGIlIuLyyy+PxsbGYo8BAGSiqD8Gmj59+nbH+vXrF/X19bt/GAAgS9ldWQEAeCuxAgBkTawAAFkTKwBA1sQKAJA1sQIAZE2sAABZEysAQNbECgCQNbECAGRNrAAAWRMrAEDWxAoAkDWxAgBkTawAAFkTKwBA1sQKAJA1sQIAZE2sAABZEysAQNbECgCQNbECAGRNrAAAWRMrAEDWxAoAkDWxAgBkTawAAFkTKwBA1sQKAJA1sQIAZE2sAABZEysAQNbECgCQNbECAGRNrAAAWRMrAEDWxAoAkDWxAgBkTawAAFkrL/YAren/vvyjqK6uLvYYAEArcmUFAMiaWAEAsiZWAICsiRUAIGtiBQDImlgBALImVgCArIkVACBrYgUAyJpYAQCyJlYAgKyJFQAga2IFAMiaWAEAsiZWAICsiRUAIGtiBQDImlgBALImVgCArIkVACBrYgUAyJpYAQCyJlYAgKyJFQAga2IFAMiaWAEAsiZWAICsiRUAIGtiBQDImlgBALImVgCArIkVACBrYgUAyJpYAQCyJlYAgKyJFQAga2IFAMiaWAEAsiZWAICsiRUAIGtiBQDImlgBALImVgCArIkVACBr5cUeoDWklCIiora2tsiTAADNte379rbv4ztTErHyyiuvRERE7969izwJANBSdXV10blz552eL4lY+cAHPhAREStXrnzHzZaa2tra6N27d6xatSqqq6uLPc5uZe/2bu9tQ1vdd0Tb2HtKKerq6qJXr17vuK4kYqVduzffetO5c+eSfULfSXV1dZvcd4S923vb01b33lb3HVH6e2/ORQZvsAUAsiZWAICslUSsVFZWxqRJk6KysrLYo+xWbXXfEfZu7/beVrTVfUe07b2/XVl6t/uFAACKqCSurAAApUusAABZEysAQNbECgCQtT0+Vq699tro169ftG/fPoYNGxaPPfZYsUdqkfnz58enPvWp6NWrV5SVlcWsWbOanE8pxQ9/+MPo2bNnVFVVxciRI2P58uVN1rz66qsxduzYqK6ujpqamjj77LNj8+bNTdYsXrw4jjvuuGjfvn307t07rrrqql29tXc1efLk+OhHPxqdOnWKbt26xWmnnRbLli1rsuZ///tfTJgwIfbdd9/o2LFjfO5zn4uXXnqpyZqVK1fGqaeeGh06dIhu3brFt7/97di6dWuTNQ888EAMGTIkKisro3///jF9+vRdvb13dN1118Vhhx1W+GVPw4cPj7vuuqtwvlT3/XZTpkyJsrKyuOSSSwrHSnXvl112WZSVlTX5GDRoUOF8qe57mzVr1sSXv/zl2HfffaOqqioOPfTQePzxxwvnS/W1rl+/fts972VlZTFhwoSIKP3nvdWkPdjMmTNTRUVF+s1vfpOeeeaZdO6556aampr00ksvFXu0Zvvb3/6Wvv/976c//vGPKSLSHXfc0eT8lClTUufOndOsWbPSU089lT796U+nAw88MG3ZsqWw5qSTTkqHH354evTRR9ODDz6Y+vfvn8aMGVM4v2nTptS9e/c0duzYtGTJkjRjxoxUVVWVbrjhht21zR0aPXp0mjZtWlqyZElatGhROuWUU1KfPn3S5s2bC2suuOCC1Lt37zRnzpz0+OOPp6OPPjqNGDGicH7r1q3pkEMOSSNHjkxPPvlk+tvf/pa6du2aJk6cWFjzwgsvpA4dOqRvfOMbaenSpWnq1Klpr732Snffffdu3e9b3Xnnnemvf/1reu6559KyZcvS9773vbT33nunJUuWpJRKd99v9dhjj6V+/fqlww47LF188cWF46W690mTJqWDDz44rVu3rvDx8ssvF86X6r5TSunVV19Nffv2TePHj08LFixIL7zwQrrnnnvS888/X1hTqq91GzZsaPKcz549O0VEmjt3bkqptJ/31rRHx8pRRx2VJkyYUPi8oaEh9erVK02ePLmIU713b4+VxsbG1KNHj/STn/ykcGzjxo2psrIyzZgxI6WU0tKlS1NEpH/84x+FNXfddVcqKytLa9asSSml9Mtf/jJ16dIl1dfXF9Z85zvfSQMHDtzFO2qZDRs2pIhI8+bNSym9ude99947/f73vy+sefbZZ1NEpEceeSSl9GbstWvXLq1fv76w5rrrrkvV1dWF/V566aXp4IMPbvK1zjjjjDR69OhdvaUW6dKlS/r1r3/dJvZdV1eXBgwYkGbPnp0+9rGPFWKllPc+adKkdPjhh+/wXCnvO6U3X2+OPfbYnZ5vS691F198cfrQhz6UGhsbS/55b0177I+BXn/99Vi4cGGMHDmycKxdu3YxcuTIeOSRR4o4WetZsWJFrF+/vskeO3fuHMOGDSvs8ZFHHomampoYOnRoYc3IkSOjXbt2sWDBgsKa448/PioqKgprRo8eHcuWLYvXXnttN+3m3W3atCki/v9/TLlw4cJ44403mux/0KBB0adPnyb7P/TQQ6N79+6FNaNHj47a2tp45plnCmve+hjb1uTy76ShoSFmzpwZ//nPf2L48OFtYt8TJkyIU089dbv5Sn3vy5cvj169esUHP/jBGDt2bKxcuTIiSn/fd955ZwwdOjS+8IUvRLdu3WLw4MHxq1/9qnC+rbzWvf7663HLLbfEWWedFWVlZSX/vLemPTZW/v3vf0dDQ0OTJzAionv37rF+/foiTdW6tu3jnfa4fv366NatW5Pz5eXl8YEPfKDJmh09xlu/RrE1NjbGJZdcEsccc0wccsghEfHmbBUVFVFTU9Nk7dv3/25729ma2tra2LJly67YTrM8/fTT0bFjx6isrIwLLrgg7rjjjjjooINKft8zZ86MJ554IiZPnrzduVLe+7Bhw2L69Olx9913x3XXXRcrVqyI4447Lurq6kp63xERL7zwQlx33XUxYMCAuOeee+LCCy+Miy66KG6++eaIaDuvdbNmzYqNGzfG+PHjI6K0/723tpL4X5fZ802YMCGWLFkSDz30ULFH2W0GDhwYixYtik2bNsUf/vCHGDduXMybN6/YY+1Sq1atiosvvjhmz54d7du3L/Y4u9XJJ59c+PNhhx0Ww4YNi759+8Ztt90WVVVVRZxs12tsbIyhQ4fGFVdcERERgwcPjiVLlsT1118f48aNK/J0u89NN90UJ598cvTq1avYo+xx9tgrK127do299tpru3dNv/TSS9GjR48iTdW6tu3jnfbYo0eP2LBhQ5PzW7dujVdffbXJmh09xlu/RjF97Wtfi7/85S8xd+7cOOCAAwrHe/ToEa+//nps3Lixyfq37//d9razNdXV1UX9JlFRURH9+/ePI488MiZPnhyHH354XH311SW974ULF8aGDRtiyJAhUV5eHuXl5TFv3ry45pprory8PLp3716ye3+7mpqa+PCHPxzPP/98ST/nERE9e/aMgw46qMmxj3zkI4Ufg7WF17oXX3wx7rvvvjjnnHMKx0r9eW9Ne2ysVFRUxJFHHhlz5swpHGtsbIw5c+bE8OHDizhZ6znwwAOjR48eTfZYW1sbCxYsKOxx+PDhsXHjxli4cGFhzf333x+NjY0xbNiwwpr58+fHG2+8UVgze/bsGDhwYHTp0mU37WZ7KaX42te+FnfccUfcf//9ceCBBzY5f+SRR8bee+/dZP/Lli2LlStXNtn/008/3eRFbPbs2VFdXV14cRw+fHiTx9i2Jrd/J42NjVFfX1/S+z7hhBPi6aefjkWLFhU+hg4dGmPHji38uVT3/nabN2+Of/7zn9GzZ8+Sfs4jIo455pjtfi3Bc889F3379o2I0n+ti4iYNm1adOvWLU499dTCsVJ/3ltVsd/h+37MnDkzVVZWpunTp6elS5em8847L9XU1DR513Tu6urq0pNPPpmefPLJFBHpZz/7WXryySfTiy++mFJ683a+mpqa9Kc//SktXrw4feYzn9nh7XyDBw9OCxYsSA899FAaMGBAk9v5Nm7cmLp3756+8pWvpCVLlqSZM2emDh06FP3W5QsvvDB17tw5PfDAA01u7fvvf/9bWHPBBRekPn36pPvvvz89/vjjafjw4Wn48OGF89tu6zvxxBPTokWL0t13353222+/Hd7W9+1vfzs9++yz6dprry36bX3f/e5307x589KKFSvS4sWL03e/+91UVlaW7r333pRS6e57R956N1BKpbv3b37zm+mBBx5IK1asSH//+9/TyJEjU9euXdOGDRtSSqW775TevE29vLw8/fjHP07Lly9Pt956a+rQoUO65ZZbCmtK+bWuoaEh9enTJ33nO9/Z7lwpP++taY+OlZRSmjp1aurTp0+qqKhIRx11VHr00UeLPVKLzJ07N0XEdh/jxo1LKb15S98PfvCD1L1791RZWZlOOOGEtGzZsiaP8corr6QxY8akjh07purq6nTmmWemurq6JmueeuqpdOyxx6bKysq0//77pylTpuyuLe7UjvYdEWnatGmFNVu2bElf/epXU5cuXVKHDh3S6aefntatW9fkcf71r3+lk08+OVVVVaWuXbumb37zm+mNN95osmbu3LnpiCOOSBUVFemDH/xgk69RDGeddVbq27dvqqioSPvtt1864YQTCqGSUunue0feHiuluvczzjgj9ezZM1VUVKT9998/nXHGGU1+z0ip7nubP//5z+mQQw5JlZWVadCgQenGG29scr6UX+vuueeeFBHb7Sel0n/eW0tZSikV5ZIOAEAz7LHvWQEA2gaxAgBkTawAAFkTKwBA1sQKAJA1sQIAZE2sAABZEysAQNbECgCQNbECAGRNrAAAWRMrAEDW/h9cUt6mzrbb9AAAAABJRU5ErkJggg==\n"},"metadata":{}}],"source":["cirrhosis_data.groupby('Ascites').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))\n","plt.gca().spines[['top', 'right',]].set_visible(True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Irl2uUZidoCr"},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"YnVdB7FIds5l"},"source":["##Hepatomegaly"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"W9JqZ62_d2i8","colab":{"base_uri":"https://localhost:8080/","height":430},"executionInfo":{"status":"ok","timestamp":1715020368133,"user_tz":-60,"elapsed":297,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"87f173c2-2a84-4ee4-a6b8-9bdec199d929"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["cirrhosis_data.groupby('Hepatomegaly').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))\n","plt.gca().spines[['top', 'right',]].set_visible(True)"]},{"cell_type":"markdown","metadata":{"id":"7Pb86KOCeDnJ"},"source":["##Spiders"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mKUsqFjjd5DW","colab":{"base_uri":"https://localhost:8080/","height":430},"executionInfo":{"status":"ok","timestamp":1715020368674,"user_tz":-60,"elapsed":545,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"a7c011af-4adf-49c3-d45f-95a097c1bfcb"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["cirrhosis_data.groupby('Spiders').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))\n","plt.gca().spines[['top', 'right',]].set_visible(True)"]},{"cell_type":"markdown","metadata":{"id":"aseMEND-eJLg"},"source":["##Edema"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DSDX6b9eeHVl","colab":{"base_uri":"https://localhost:8080/","height":430},"executionInfo":{"status":"ok","timestamp":1715020369018,"user_tz":-60,"elapsed":348,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"8e669a7d-d991-4acd-b3b3-a3ce20051e02"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["cirrhosis_data.groupby('Edema').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))\n","plt.gca().spines[['top', 'right',]].set_visible(True)"]},{"cell_type":"markdown","metadata":{"id":"iwixlIs2eO-L"},"source":["##Bilirubin"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jpd28JRteMyz","colab":{"base_uri":"https://localhost:8080/","height":452},"executionInfo":{"status":"ok","timestamp":1715020370020,"user_tz":-60,"elapsed":1006,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"b0047593-3621-40ad-dbff-b728e3ab412f"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["cirrhosis_data['Bilirubin'].plot(kind='hist', bins=20, title='Bilirubin')\n","plt.gca().spines[['top', 'right',]].set_visible(False)"]},{"cell_type":"markdown","metadata":{"id":"E8UopL0fga3P"},"source":["##Cholesterol"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"h-BO2LtXgcj1","colab":{"base_uri":"https://localhost:8080/","height":452},"executionInfo":{"status":"ok","timestamp":1715020370818,"user_tz":-60,"elapsed":801,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"50c20067-f004-46e9-bcf0-cf6193420df9"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["cirrhosis_data['Cholesterol'].plot(kind='hist', bins=20, title='Cholesterol')\n","plt.gca().spines[['top', 'right',]].set_visible(False)"]},{"cell_type":"markdown","metadata":{"id":"0eui--cghuGH"},"source":["##Albumin"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Cm9Ic0GSgiSM","colab":{"base_uri":"https://localhost:8080/","height":452},"executionInfo":{"status":"ok","timestamp":1715020371303,"user_tz":-60,"elapsed":487,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"2063e61f-52f6-4e2a-c558-4c22333c46b2"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["cirrhosis_data['Albumin'].plot(kind='hist', bins=20, title='Albumin')\n","plt.gca().spines[['top', 'right',]].set_visible(False)"]},{"cell_type":"markdown","metadata":{"id":"u3ahjBRuh4Sj"},"source":["##Copper"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_gWJV5PXh04w","colab":{"base_uri":"https://localhost:8080/","height":452},"executionInfo":{"status":"ok","timestamp":1715020371932,"user_tz":-60,"elapsed":632,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"267ce576-c17b-46fe-a96d-cee5b0221578"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["cirrhosis_data['Copper'].plot(kind='hist', bins=20, title='Copper')\n","plt.gca().spines[['top', 'right',]].set_visible(False)"]},{"cell_type":"markdown","metadata":{"id":"98LjALdaiAhP"},"source":["##Alk_Phos"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Ot1d00b-h9rE","colab":{"base_uri":"https://localhost:8080/","height":452},"executionInfo":{"status":"ok","timestamp":1715020372602,"user_tz":-60,"elapsed":673,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"0312fa4e-67c2-4856-c8aa-7892d5385e7b"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["cirrhosis_data['Alk_Phos'].plot(kind='hist', bins=20, title='Alk_Phos')\n","plt.gca().spines[['top', 'right',]].set_visible(False)"]},{"cell_type":"markdown","metadata":{"id":"x4_EiNGhiMBi"},"source":["##SGOT"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"S0nmSCHviJXt","colab":{"base_uri":"https://localhost:8080/","height":452},"executionInfo":{"status":"ok","timestamp":1715020373631,"user_tz":-60,"elapsed":1032,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"c7fec826-6d61-4b87-86f7-14e090be7441"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["cirrhosis_data['SGOT'].plot(kind='hist', bins=20, title='SGOT')\n","plt.gca().spines[['top', 'right',]].set_visible(False)"]},{"cell_type":"markdown","metadata":{"id":"vMpVtgZ9iUNb"},"source":["##Triglycerides"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bXvni0oDiSK1","colab":{"base_uri":"https://localhost:8080/","height":452},"executionInfo":{"status":"ok","timestamp":1715020374865,"user_tz":-60,"elapsed":1239,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"3d706907-1f16-43a5-9eaa-53db0506909e"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["cirrhosis_data['Tryglicerides'].plot(kind='hist', bins=20, title='Tryglicerides')\n","plt.gca().spines[['top', 'right',]].set_visible(False)"]},{"cell_type":"markdown","metadata":{"id":"qy0yYuNMjMVz"},"source":["##Platelets"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nyascTZeifOy","colab":{"base_uri":"https://localhost:8080/","height":452},"executionInfo":{"status":"ok","timestamp":1715020375997,"user_tz":-60,"elapsed":1134,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"48fd74df-5681-407a-b9e9-2130336df89d"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["cirrhosis_data['Platelets'].plot(kind='hist', bins=20, title='Platelets')\n","plt.gca().spines[['top', 'right',]].set_visible(False)"]},{"cell_type":"markdown","metadata":{"id":"BJ88GfyPiyIc"},"source":["##Prothrombin"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Jy3GhBpYijV3","colab":{"base_uri":"https://localhost:8080/","height":452},"executionInfo":{"status":"ok","timestamp":1715020376974,"user_tz":-60,"elapsed":981,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"723acb8c-9620-4636-fe0b-c3d81a53333c"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["cirrhosis_data['Prothrombin'].plot(kind='hist', bins=20, title='Prothrombin')\n","plt.gca().spines[['top', 'right',]].set_visible(False)"]},{"cell_type":"markdown","metadata":{"id":"LNxAQgNijIwL"},"source":["##Stage"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jR5N17bvikAH","colab":{"base_uri":"https://localhost:8080/","height":452},"executionInfo":{"status":"ok","timestamp":1715020378242,"user_tz":-60,"elapsed":1270,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"714427ab-88b8-4cb9-d241-993136ac6692"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["cirrhosis_data['Stage'].plot(kind='hist', bins=20, title='Stage')\n","plt.gca().spines[['top', 'right',]].set_visible(False)"]},{"cell_type":"markdown","metadata":{"id":"UFvv0gePjVXD"},"source":["##Status"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hmgZ8Q3tjYGn","colab":{"base_uri":"https://localhost:8080/","height":430},"executionInfo":{"status":"ok","timestamp":1715020379134,"user_tz":-60,"elapsed":895,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"b2e8f919-7be9-431a-86b2-646105f54924"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["cirrhosis_data.groupby('Status').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))\n","plt.gca().spines[['top', 'right',]].set_visible(True)"]},{"cell_type":"markdown","metadata":{"id":"v03yH5B6Bsct"},"source":["#Data Filtered by Sex\n","\n","\n","---\n","\n"]},{"cell_type":"markdown","metadata":{"id":"Ai2a5AwSCqQ-"},"source":["##All Records"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"piWbgtOdCtMZ","colab":{"base_uri":"https://localhost:8080/","height":495},"executionInfo":{"status":"ok","timestamp":1715020379605,"user_tz":-60,"elapsed":474,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"cf749826-3566-4c4e-e926-242638424a63"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["        id  N_Days             Drug    Age Sex Ascites Hepatomegaly Spiders  \\\n","0     1213    1435          Placebo  12816   F       N            N       N   \n","1     2326    2689          Placebo  14899   M       Y            Y       Y   \n","2      538    2456          Placebo  18499   F       N            Y       N   \n","3     4855    4079          Placebo  18329   F       N            N       N   \n","4     5404    3336  D-penicillamine  16463   F       N            Y       Y   \n","...    ...     ...              ...    ...  ..     ...          ...     ...   \n","7900  5612    3820          Placebo  20597   F       N            Y       N   \n","7901  5335    2050  D-penicillamine  19221   F       N            N       N   \n","7902  5201    2721          Placebo  11058   M       N            Y       N   \n","7903  7255    4556          Placebo  17850   F       N            N       N   \n","7904  1217    4184  D-penicillamine  17525   F       N            Y       Y   \n","\n","     Edema  Bilirubin  Cholesterol  Albumin  Copper  Alk_Phos    SGOT  \\\n","0        N        0.7        373.0     3.46    44.0     674.0   43.40   \n","1        Y        3.2        263.0     3.35   102.0    1273.0  119.35   \n","2        N        1.3        364.0     3.63    52.0    1812.0  133.30   \n","3        N        0.9        353.0     4.08    53.0    1768.0  130.20   \n","4        N        1.4        458.0     3.61    73.0    1080.0  106.95   \n","...    ...        ...          ...      ...     ...       ...     ...   \n","7900     N        3.2        332.0     3.33   159.0    1428.0  134.00   \n","7901     N        8.4        558.0     3.99   280.0     967.0   89.90   \n","7902     N        2.0        456.0     3.26    94.0    5719.0  221.88   \n","7903     N        1.1        361.0     3.64    36.0    5430.2   67.08   \n","7904     N        3.0        448.0     3.57   123.0     815.0   60.45   \n","\n","      Tryglicerides  Platelets  Prothrombin  Stage Status  \n","0             133.0      181.0         10.0    3.0      C  \n","1             119.0      268.0         11.5    3.0      C  \n","2             164.0      327.0          9.9    3.0      C  \n","3              59.0      340.0         10.9    2.0      D  \n","4              91.0      195.0         11.4    3.0      D  \n","...             ...        ...          ...    ...    ...  \n","7900          137.0      344.0         10.6    4.0     CL  \n","7901          309.0      273.0         11.0    2.0      D  \n","7902          113.0      330.0          9.6    2.0      C  \n","7903           56.0      203.0         10.6    2.0      C  \n","7904          318.0      248.0         11.0    3.0      D  \n","\n","[7905 rows x 20 columns]"],"text/html":["\n","  <div id=\"df-1e056093-a018-4e6c-94e4-2691a9aa7c82\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>N_Days</th>\n","      <th>Drug</th>\n","      <th>Age</th>\n","      <th>Sex</th>\n","      <th>Ascites</th>\n","      <th>Hepatomegaly</th>\n","      <th>Spiders</th>\n","      <th>Edema</th>\n","      <th>Bilirubin</th>\n","      <th>Cholesterol</th>\n","      <th>Albumin</th>\n","      <th>Copper</th>\n","      <th>Alk_Phos</th>\n","      <th>SGOT</th>\n","      <th>Tryglicerides</th>\n","      <th>Platelets</th>\n","      <th>Prothrombin</th>\n","      <th>Stage</th>\n","      <th>Status</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1213</td>\n","      <td>1435</td>\n","      <td>Placebo</td>\n","      <td>12816</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>0.7</td>\n","      <td>373.0</td>\n","      <td>3.46</td>\n","      <td>44.0</td>\n","      <td>674.0</td>\n","      <td>43.40</td>\n","      <td>133.0</td>\n","      <td>181.0</td>\n","      <td>10.0</td>\n","      <td>3.0</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2326</td>\n","      <td>2689</td>\n","      <td>Placebo</td>\n","      <td>14899</td>\n","      <td>M</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>3.2</td>\n","      <td>263.0</td>\n","      <td>3.35</td>\n","      <td>102.0</td>\n","      <td>1273.0</td>\n","      <td>119.35</td>\n","      <td>119.0</td>\n","      <td>268.0</td>\n","      <td>11.5</td>\n","      <td>3.0</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>538</td>\n","      <td>2456</td>\n","      <td>Placebo</td>\n","      <td>18499</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>1.3</td>\n","      <td>364.0</td>\n","      <td>3.63</td>\n","      <td>52.0</td>\n","      <td>1812.0</td>\n","      <td>133.30</td>\n","      <td>164.0</td>\n","      <td>327.0</td>\n","      <td>9.9</td>\n","      <td>3.0</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4855</td>\n","      <td>4079</td>\n","      <td>Placebo</td>\n","      <td>18329</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>0.9</td>\n","      <td>353.0</td>\n","      <td>4.08</td>\n","      <td>53.0</td>\n","      <td>1768.0</td>\n","      <td>130.20</td>\n","      <td>59.0</td>\n","      <td>340.0</td>\n","      <td>10.9</td>\n","      <td>2.0</td>\n","      <td>D</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5404</td>\n","      <td>3336</td>\n","      <td>D-penicillamine</td>\n","      <td>16463</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>1.4</td>\n","      <td>458.0</td>\n","      <td>3.61</td>\n","      <td>73.0</td>\n","      <td>1080.0</td>\n","      <td>106.95</td>\n","      <td>91.0</td>\n","      <td>195.0</td>\n","      <td>11.4</td>\n","      <td>3.0</td>\n","      <td>D</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>7900</th>\n","      <td>5612</td>\n","      <td>3820</td>\n","      <td>Placebo</td>\n","      <td>20597</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>3.2</td>\n","      <td>332.0</td>\n","      <td>3.33</td>\n","      <td>159.0</td>\n","      <td>1428.0</td>\n","      <td>134.00</td>\n","      <td>137.0</td>\n","      <td>344.0</td>\n","      <td>10.6</td>\n","      <td>4.0</td>\n","      <td>CL</td>\n","    </tr>\n","    <tr>\n","      <th>7901</th>\n","      <td>5335</td>\n","      <td>2050</td>\n","      <td>D-penicillamine</td>\n","      <td>19221</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>8.4</td>\n","      <td>558.0</td>\n","      <td>3.99</td>\n","      <td>280.0</td>\n","      <td>967.0</td>\n","      <td>89.90</td>\n","      <td>309.0</td>\n","      <td>273.0</td>\n","      <td>11.0</td>\n","      <td>2.0</td>\n","      <td>D</td>\n","    </tr>\n","    <tr>\n","      <th>7902</th>\n","      <td>5201</td>\n","      <td>2721</td>\n","      <td>Placebo</td>\n","      <td>11058</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>2.0</td>\n","      <td>456.0</td>\n","      <td>3.26</td>\n","      <td>94.0</td>\n","      <td>5719.0</td>\n","      <td>221.88</td>\n","      <td>113.0</td>\n","      <td>330.0</td>\n","      <td>9.6</td>\n","      <td>2.0</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>7903</th>\n","      <td>7255</td>\n","      <td>4556</td>\n","      <td>Placebo</td>\n","      <td>17850</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>1.1</td>\n","      <td>361.0</td>\n","      <td>3.64</td>\n","      <td>36.0</td>\n","      <td>5430.2</td>\n","      <td>67.08</td>\n","      <td>56.0</td>\n","      <td>203.0</td>\n","      <td>10.6</td>\n","      <td>2.0</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>7904</th>\n","      <td>1217</td>\n","      <td>4184</td>\n","      <td>D-penicillamine</td>\n","      <td>17525</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>3.0</td>\n","      <td>448.0</td>\n","      <td>3.57</td>\n","      <td>123.0</td>\n","      <td>815.0</td>\n","      <td>60.45</td>\n","      <td>318.0</td>\n","      <td>248.0</td>\n","      <td>11.0</td>\n","      <td>3.0</td>\n","      <td>D</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>7905 rows × 20 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1e056093-a018-4e6c-94e4-2691a9aa7c82')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1e056093-a018-4e6c-94e4-2691a9aa7c82 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1e056093-a018-4e6c-94e4-2691a9aa7c82');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ea6aeffe-6d16-4690-866f-70b99531ab35\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ea6aeffe-6d16-4690-866f-70b99531ab35')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ea6aeffe-6d16-4690-866f-70b99531ab35 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"cirrhosis_data_shuffled","summary":"{\n  \"name\": \"cirrhosis_data_shuffled\",\n  \"rows\": 7905,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2282,\n        \"min\": 0,\n        \"max\": 7904,\n        \"num_unique_values\": 7905,\n        \"samples\": [\n          3061,\n          3098,\n          7300\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"N_Days\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1094,\n        \"min\": 41,\n        \"max\": 4795,\n        \"num_unique_values\": 461,\n        \"samples\": [\n          750,\n          1741,\n          4556\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Drug\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"D-penicillamine\",\n          \"Placebo\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3679,\n        \"min\": 9598,\n        \"max\": 28650,\n        \"num_unique_values\": 391,\n        \"samples\": [\n          15694,\n          16216\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"M\",\n          \"F\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ascites\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Y\",\n          \"N\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Hepatomegaly\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Y\",\n          \"N\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Spiders\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Y\",\n          \"N\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Edema\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"N\",\n          \"Y\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bilirubin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.8129603247080257,\n        \"min\": 0.3,\n        \"max\": 28.0,\n        \"num_unique_values\": 111,\n        \"samples\": [\n          6.5,\n          3.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cholesterol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 195.37934396689386,\n        \"min\": 120.0,\n        \"max\": 1775.0,\n        \"num_unique_values\": 226,\n        \"samples\": [\n          325.0,\n          1436.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Albumin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.34617081107847925,\n        \"min\": 1.96,\n        \"max\": 4.64,\n        \"num_unique_values\": 160,\n        \"samples\": [\n          2.54,\n          2.74\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Copper\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 75.8992658456969,\n        \"min\": 4.0,\n        \"max\": 588.0,\n        \"num_unique_values\": 171,\n        \"samples\": [\n          269.0,\n          161.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Alk_Phos\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1903.750657315917,\n        \"min\": 289.0,\n        \"max\": 13862.4,\n        \"num_unique_values\": 364,\n        \"samples\": [\n          788.0,\n          681.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SGOT\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48.79094489183394,\n        \"min\": 26.35,\n        \"max\": 457.25,\n        \"num_unique_values\": 206,\n        \"samples\": [\n          57.35,\n          74.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tryglicerides\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 52.53040171631091,\n        \"min\": 33.0,\n        \"max\": 598.0,\n        \"num_unique_values\": 154,\n        \"samples\": [\n          80.0,\n          82.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Platelets\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 87.46557851441047,\n        \"min\": 62.0,\n        \"max\": 563.0,\n        \"num_unique_values\": 227,\n        \"samples\": [\n          336.0,\n          226.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Prothrombin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7817348264911252,\n        \"min\": 9.0,\n        \"max\": 18.0,\n        \"num_unique_values\": 49,\n        \"samples\": [\n          9.2,\n          14.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Stage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8665106288728248,\n        \"min\": 1.0,\n        \"max\": 4.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2.0,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"C\",\n          \"D\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":31}],"source":["cirrhosis_data_shuffled = cirrhosis_data.sample(frac=1).reset_index(drop=True)\n","cirrhosis_data_shuffled"]},{"cell_type":"markdown","metadata":{"id":"IzKTsRcBBYKq"},"source":["##Male Records"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zgXDxG9ZBb1E","colab":{"base_uri":"https://localhost:8080/","height":530},"executionInfo":{"status":"ok","timestamp":1715020379606,"user_tz":-60,"elapsed":20,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"117cc6db-eb1f-4531-cbb4-2ef8f65243a0"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["       id  N_Days             Drug    Age Sex Ascites Hepatomegaly Spiders  \\\n","0    2083     611          Placebo  26259   M       N            Y       N   \n","1    6145    1363          Placebo  16467   M       N            N       N   \n","2    7787     980  D-penicillamine  18713   M       N            Y       N   \n","3    1711    1657  D-penicillamine  27220   M       N            Y       N   \n","4     408    2563          Placebo  12839   M       N            N       N   \n","..    ...     ...              ...    ...  ..     ...          ...     ...   \n","564   886     552          Placebo  18799   M       N            Y       N   \n","565  1885     515  D-penicillamine  19817   M       N            N       Y   \n","566  4832    4256  D-penicillamine  19470   M       N            N       N   \n","567  1098    1765  D-penicillamine  28650   M       Y            Y       N   \n","568  4800     769          Placebo  19060   M       N            Y       N   \n","\n","    Edema  Bilirubin  Cholesterol  Albumin  Copper  Alk_Phos    SGOT  \\\n","0       S        2.0        420.0     3.26    62.0    3196.0   77.50   \n","1       N        6.4        478.0     4.38   130.0    2201.0  185.00   \n","2       N        7.1        374.0     3.74   103.0     979.0  128.65   \n","3       N        5.0        514.0     3.12    77.0    2520.0   92.00   \n","4       N        1.0        364.0     4.16    43.0     369.0   74.00   \n","..    ...        ...          ...      ...     ...       ...     ...   \n","564     N        2.3        178.0     3.00   145.0     746.0  178.25   \n","565     N        0.8        325.0     3.98   444.0     766.0  130.20   \n","566     N        1.8       1600.0     3.34    82.0    2656.0   82.15   \n","567     N        7.1        243.0     3.26   380.0     983.0  158.10   \n","568     N       14.0        396.0     3.26    73.0    5890.0  457.25   \n","\n","     Tryglicerides  Platelets  Prothrombin  Stage Status  \n","0             91.0      344.0         11.4    3.0      C  \n","1            193.0      207.0          9.5    2.0      C  \n","2            100.0      266.0         11.1    2.0      D  \n","3            114.0      309.0         10.9    2.0      C  \n","4             93.0      165.0         10.7    3.0      C  \n","..             ...        ...          ...    ...    ...  \n","564          139.0      119.0         12.0    3.0      D  \n","565          210.0      344.0          9.6    3.0      D  \n","566          174.0      311.0         10.1    2.0      C  \n","567          154.0      299.0         11.2    3.0      C  \n","568          133.0      213.0         10.5    3.0      D  \n","\n","[569 rows x 20 columns]"],"text/html":["\n","  <div id=\"df-d2f6fa62-5747-4abc-a4fe-1c63fe2278f1\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>N_Days</th>\n","      <th>Drug</th>\n","      <th>Age</th>\n","      <th>Sex</th>\n","      <th>Ascites</th>\n","      <th>Hepatomegaly</th>\n","      <th>Spiders</th>\n","      <th>Edema</th>\n","      <th>Bilirubin</th>\n","      <th>Cholesterol</th>\n","      <th>Albumin</th>\n","      <th>Copper</th>\n","      <th>Alk_Phos</th>\n","      <th>SGOT</th>\n","      <th>Tryglicerides</th>\n","      <th>Platelets</th>\n","      <th>Prothrombin</th>\n","      <th>Stage</th>\n","      <th>Status</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2083</td>\n","      <td>611</td>\n","      <td>Placebo</td>\n","      <td>26259</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>S</td>\n","      <td>2.0</td>\n","      <td>420.0</td>\n","      <td>3.26</td>\n","      <td>62.0</td>\n","      <td>3196.0</td>\n","      <td>77.50</td>\n","      <td>91.0</td>\n","      <td>344.0</td>\n","      <td>11.4</td>\n","      <td>3.0</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>6145</td>\n","      <td>1363</td>\n","      <td>Placebo</td>\n","      <td>16467</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>6.4</td>\n","      <td>478.0</td>\n","      <td>4.38</td>\n","      <td>130.0</td>\n","      <td>2201.0</td>\n","      <td>185.00</td>\n","      <td>193.0</td>\n","      <td>207.0</td>\n","      <td>9.5</td>\n","      <td>2.0</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>7787</td>\n","      <td>980</td>\n","      <td>D-penicillamine</td>\n","      <td>18713</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>7.1</td>\n","      <td>374.0</td>\n","      <td>3.74</td>\n","      <td>103.0</td>\n","      <td>979.0</td>\n","      <td>128.65</td>\n","      <td>100.0</td>\n","      <td>266.0</td>\n","      <td>11.1</td>\n","      <td>2.0</td>\n","      <td>D</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1711</td>\n","      <td>1657</td>\n","      <td>D-penicillamine</td>\n","      <td>27220</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>5.0</td>\n","      <td>514.0</td>\n","      <td>3.12</td>\n","      <td>77.0</td>\n","      <td>2520.0</td>\n","      <td>92.00</td>\n","      <td>114.0</td>\n","      <td>309.0</td>\n","      <td>10.9</td>\n","      <td>2.0</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>408</td>\n","      <td>2563</td>\n","      <td>Placebo</td>\n","      <td>12839</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>1.0</td>\n","      <td>364.0</td>\n","      <td>4.16</td>\n","      <td>43.0</td>\n","      <td>369.0</td>\n","      <td>74.00</td>\n","      <td>93.0</td>\n","      <td>165.0</td>\n","      <td>10.7</td>\n","      <td>3.0</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>564</th>\n","      <td>886</td>\n","      <td>552</td>\n","      <td>Placebo</td>\n","      <td>18799</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>2.3</td>\n","      <td>178.0</td>\n","      <td>3.00</td>\n","      <td>145.0</td>\n","      <td>746.0</td>\n","      <td>178.25</td>\n","      <td>139.0</td>\n","      <td>119.0</td>\n","      <td>12.0</td>\n","      <td>3.0</td>\n","      <td>D</td>\n","    </tr>\n","    <tr>\n","      <th>565</th>\n","      <td>1885</td>\n","      <td>515</td>\n","      <td>D-penicillamine</td>\n","      <td>19817</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>0.8</td>\n","      <td>325.0</td>\n","      <td>3.98</td>\n","      <td>444.0</td>\n","      <td>766.0</td>\n","      <td>130.20</td>\n","      <td>210.0</td>\n","      <td>344.0</td>\n","      <td>9.6</td>\n","      <td>3.0</td>\n","      <td>D</td>\n","    </tr>\n","    <tr>\n","      <th>566</th>\n","      <td>4832</td>\n","      <td>4256</td>\n","      <td>D-penicillamine</td>\n","      <td>19470</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>1.8</td>\n","      <td>1600.0</td>\n","      <td>3.34</td>\n","      <td>82.0</td>\n","      <td>2656.0</td>\n","      <td>82.15</td>\n","      <td>174.0</td>\n","      <td>311.0</td>\n","      <td>10.1</td>\n","      <td>2.0</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>567</th>\n","      <td>1098</td>\n","      <td>1765</td>\n","      <td>D-penicillamine</td>\n","      <td>28650</td>\n","      <td>M</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>7.1</td>\n","      <td>243.0</td>\n","      <td>3.26</td>\n","      <td>380.0</td>\n","      <td>983.0</td>\n","      <td>158.10</td>\n","      <td>154.0</td>\n","      <td>299.0</td>\n","      <td>11.2</td>\n","      <td>3.0</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>568</th>\n","      <td>4800</td>\n","      <td>769</td>\n","      <td>Placebo</td>\n","      <td>19060</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>14.0</td>\n","      <td>396.0</td>\n","      <td>3.26</td>\n","      <td>73.0</td>\n","      <td>5890.0</td>\n","      <td>457.25</td>\n","      <td>133.0</td>\n","      <td>213.0</td>\n","      <td>10.5</td>\n","      <td>3.0</td>\n","      <td>D</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>569 rows × 20 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d2f6fa62-5747-4abc-a4fe-1c63fe2278f1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d2f6fa62-5747-4abc-a4fe-1c63fe2278f1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d2f6fa62-5747-4abc-a4fe-1c63fe2278f1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-2c1aa125-573c-446e-ac8c-d55385137a03\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2c1aa125-573c-446e-ac8c-d55385137a03')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-2c1aa125-573c-446e-ac8c-d55385137a03 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"cirrhosis_male_data","summary":"{\n  \"name\": \"cirrhosis_male_data\",\n  \"rows\": 569,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2323,\n        \"min\": 0,\n        \"max\": 7903,\n        \"num_unique_values\": 569,\n        \"samples\": [\n          3030,\n          4686,\n          1222\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"N_Days\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1141,\n        \"min\": 41,\n        \"max\": 4556,\n        \"num_unique_values\": 227,\n        \"samples\": [\n          1682,\n          549,\n          904\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Drug\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"D-penicillamine\",\n          \"Placebo\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4072,\n        \"min\": 9598,\n        \"max\": 28650,\n        \"num_unique_values\": 219,\n        \"samples\": [\n          19258,\n          20684\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"M\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ascites\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Y\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Hepatomegaly\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"N\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Spiders\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Y\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Edema\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"S\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bilirubin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.251402559576544,\n        \"min\": 0.3,\n        \"max\": 25.5,\n        \"num_unique_values\": 70,\n        \"samples\": [\n          5.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cholesterol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 201.54024342742363,\n        \"min\": 132.0,\n        \"max\": 1712.0,\n        \"num_unique_values\": 155,\n        \"samples\": [\n          408.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Albumin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3469890360278588,\n        \"min\": 2.23,\n        \"max\": 4.64,\n        \"num_unique_values\": 102,\n        \"samples\": [\n          3.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Copper\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 96.8914454520479,\n        \"min\": 9.0,\n        \"max\": 464.0,\n        \"num_unique_values\": 122,\n        \"samples\": [\n          151.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Alk_Phos\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1728.8963644015255,\n        \"min\": 289.0,\n        \"max\": 12258.8,\n        \"num_unique_values\": 211,\n        \"samples\": [\n          721.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SGOT\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48.32098008638765,\n        \"min\": 26.35,\n        \"max\": 457.25,\n        \"num_unique_values\": 141,\n        \"samples\": [\n          198.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tryglicerides\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 54.92097553351821,\n        \"min\": 44.0,\n        \"max\": 432.0,\n        \"num_unique_values\": 113,\n        \"samples\": [\n          106.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Platelets\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 87.89937056248368,\n        \"min\": 62.0,\n        \"max\": 563.0,\n        \"num_unique_values\": 154,\n        \"samples\": [\n          399.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Prothrombin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8126748165377033,\n        \"min\": 9.2,\n        \"max\": 15.2,\n        \"num_unique_values\": 36,\n        \"samples\": [\n          15.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Stage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8375500796337213,\n        \"min\": 1.0,\n        \"max\": 4.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":32}],"source":["cirrhosis_male_data = cirrhosis_data[cirrhosis_data['Sex'] == 'M'].sample(frac=1).reset_index(drop=True)\n","cirrhosis_male_data"]},{"cell_type":"markdown","metadata":{"id":"RNu_oOFc_qQM"},"source":["##Female Records\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WMRLAcPh_ywQ","colab":{"base_uri":"https://localhost:8080/","height":547},"executionInfo":{"status":"ok","timestamp":1715020379606,"user_tz":-60,"elapsed":18,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"967ba489-45ab-4208-ce99-a59a3a1766ce"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["        id  N_Days             Drug    Age Sex Ascites Hepatomegaly Spiders  \\\n","0     6371    3422          Placebo  15574   F       N            N       N   \n","1     6705    2769          Placebo  18713   F       N            N       N   \n","2     2574    1682  D-penicillamine  17738   F       N            N       N   \n","3     4922    1592  D-penicillamine  14872   F       N            N       N   \n","4     6784     737  D-penicillamine  14558   F       N            Y       N   \n","...    ...     ...              ...    ...  ..     ...          ...     ...   \n","7331  3589    1810  D-penicillamine  23585   F       N            Y       Y   \n","7332  4387    1418          Placebo  17738   F       N            N       N   \n","7333  7319    4196          Placebo  20284   F       N            Y       N   \n","7334  4806     140  D-penicillamine  25772   F       Y            Y       Y   \n","7335   227    1434  D-penicillamine  20256   F       N            Y       Y   \n","\n","     Edema  Bilirubin  Cholesterol  Albumin  Copper  Alk_Phos    SGOT  \\\n","0        N        0.7        303.0     4.19    81.0    1584.0  111.60   \n","1        N        1.2        277.0     3.37    29.0    1065.0  125.55   \n","2        N        0.7        256.0     3.63    13.0     858.0   65.10   \n","3        N        2.3        392.0     3.74    24.0    1395.0  184.45   \n","4        N        2.0        356.0     4.00   172.0     758.0  182.90   \n","...    ...        ...          ...      ...     ...       ...     ...   \n","7331     N        0.5        288.0     3.61   116.0     976.0   57.35   \n","7332     N        1.3        291.0     3.44    75.0    1082.0   85.00   \n","7333     N        1.1        248.0     3.37    41.0    1243.0   75.95   \n","7334     S        6.6        243.0     2.64   156.0    3074.0  167.40   \n","7335     N        3.2        408.0     3.44    43.0    1134.0  120.90   \n","\n","      Tryglicerides  Platelets  Prothrombin  Stage Status  \n","0             111.0      306.0         10.3    2.0      C  \n","1              56.0      410.0         10.6    3.0      C  \n","2              64.0      309.0          9.6    3.0      C  \n","3             100.0      328.0         10.9    3.0      C  \n","4             171.0      156.0         10.6    3.0      D  \n","...             ...        ...          ...    ...    ...  \n","7331          114.0      322.0         11.0    4.0      D  \n","7332          195.0      251.0          9.5    1.0      C  \n","7333           84.0      156.0         11.8    4.0      C  \n","7334           90.0      102.0         12.0    4.0      D  \n","7335          137.0      295.0         10.3    3.0      D  \n","\n","[7336 rows x 20 columns]"],"text/html":["\n","  <div id=\"df-1ed8d16d-517e-4137-a613-f7141c3a5bb0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>N_Days</th>\n","      <th>Drug</th>\n","      <th>Age</th>\n","      <th>Sex</th>\n","      <th>Ascites</th>\n","      <th>Hepatomegaly</th>\n","      <th>Spiders</th>\n","      <th>Edema</th>\n","      <th>Bilirubin</th>\n","      <th>Cholesterol</th>\n","      <th>Albumin</th>\n","      <th>Copper</th>\n","      <th>Alk_Phos</th>\n","      <th>SGOT</th>\n","      <th>Tryglicerides</th>\n","      <th>Platelets</th>\n","      <th>Prothrombin</th>\n","      <th>Stage</th>\n","      <th>Status</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>6371</td>\n","      <td>3422</td>\n","      <td>Placebo</td>\n","      <td>15574</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>0.7</td>\n","      <td>303.0</td>\n","      <td>4.19</td>\n","      <td>81.0</td>\n","      <td>1584.0</td>\n","      <td>111.60</td>\n","      <td>111.0</td>\n","      <td>306.0</td>\n","      <td>10.3</td>\n","      <td>2.0</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>6705</td>\n","      <td>2769</td>\n","      <td>Placebo</td>\n","      <td>18713</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>1.2</td>\n","      <td>277.0</td>\n","      <td>3.37</td>\n","      <td>29.0</td>\n","      <td>1065.0</td>\n","      <td>125.55</td>\n","      <td>56.0</td>\n","      <td>410.0</td>\n","      <td>10.6</td>\n","      <td>3.0</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2574</td>\n","      <td>1682</td>\n","      <td>D-penicillamine</td>\n","      <td>17738</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>0.7</td>\n","      <td>256.0</td>\n","      <td>3.63</td>\n","      <td>13.0</td>\n","      <td>858.0</td>\n","      <td>65.10</td>\n","      <td>64.0</td>\n","      <td>309.0</td>\n","      <td>9.6</td>\n","      <td>3.0</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4922</td>\n","      <td>1592</td>\n","      <td>D-penicillamine</td>\n","      <td>14872</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>2.3</td>\n","      <td>392.0</td>\n","      <td>3.74</td>\n","      <td>24.0</td>\n","      <td>1395.0</td>\n","      <td>184.45</td>\n","      <td>100.0</td>\n","      <td>328.0</td>\n","      <td>10.9</td>\n","      <td>3.0</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>6784</td>\n","      <td>737</td>\n","      <td>D-penicillamine</td>\n","      <td>14558</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>2.0</td>\n","      <td>356.0</td>\n","      <td>4.00</td>\n","      <td>172.0</td>\n","      <td>758.0</td>\n","      <td>182.90</td>\n","      <td>171.0</td>\n","      <td>156.0</td>\n","      <td>10.6</td>\n","      <td>3.0</td>\n","      <td>D</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>7331</th>\n","      <td>3589</td>\n","      <td>1810</td>\n","      <td>D-penicillamine</td>\n","      <td>23585</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>0.5</td>\n","      <td>288.0</td>\n","      <td>3.61</td>\n","      <td>116.0</td>\n","      <td>976.0</td>\n","      <td>57.35</td>\n","      <td>114.0</td>\n","      <td>322.0</td>\n","      <td>11.0</td>\n","      <td>4.0</td>\n","      <td>D</td>\n","    </tr>\n","    <tr>\n","      <th>7332</th>\n","      <td>4387</td>\n","      <td>1418</td>\n","      <td>Placebo</td>\n","      <td>17738</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>1.3</td>\n","      <td>291.0</td>\n","      <td>3.44</td>\n","      <td>75.0</td>\n","      <td>1082.0</td>\n","      <td>85.00</td>\n","      <td>195.0</td>\n","      <td>251.0</td>\n","      <td>9.5</td>\n","      <td>1.0</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>7333</th>\n","      <td>7319</td>\n","      <td>4196</td>\n","      <td>Placebo</td>\n","      <td>20284</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>1.1</td>\n","      <td>248.0</td>\n","      <td>3.37</td>\n","      <td>41.0</td>\n","      <td>1243.0</td>\n","      <td>75.95</td>\n","      <td>84.0</td>\n","      <td>156.0</td>\n","      <td>11.8</td>\n","      <td>4.0</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>7334</th>\n","      <td>4806</td>\n","      <td>140</td>\n","      <td>D-penicillamine</td>\n","      <td>25772</td>\n","      <td>F</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>S</td>\n","      <td>6.6</td>\n","      <td>243.0</td>\n","      <td>2.64</td>\n","      <td>156.0</td>\n","      <td>3074.0</td>\n","      <td>167.40</td>\n","      <td>90.0</td>\n","      <td>102.0</td>\n","      <td>12.0</td>\n","      <td>4.0</td>\n","      <td>D</td>\n","    </tr>\n","    <tr>\n","      <th>7335</th>\n","      <td>227</td>\n","      <td>1434</td>\n","      <td>D-penicillamine</td>\n","      <td>20256</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>3.2</td>\n","      <td>408.0</td>\n","      <td>3.44</td>\n","      <td>43.0</td>\n","      <td>1134.0</td>\n","      <td>120.90</td>\n","      <td>137.0</td>\n","      <td>295.0</td>\n","      <td>10.3</td>\n","      <td>3.0</td>\n","      <td>D</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>7336 rows × 20 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1ed8d16d-517e-4137-a613-f7141c3a5bb0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1ed8d16d-517e-4137-a613-f7141c3a5bb0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1ed8d16d-517e-4137-a613-f7141c3a5bb0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6a48b4e9-3244-49eb-8fcd-bffbec124eba\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6a48b4e9-3244-49eb-8fcd-bffbec124eba')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6a48b4e9-3244-49eb-8fcd-bffbec124eba button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"cirrhosis_female_data","summary":"{\n  \"name\": \"cirrhosis_female_data\",\n  \"rows\": 7336,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2278,\n        \"min\": 1,\n        \"max\": 7904,\n        \"num_unique_values\": 7336,\n        \"samples\": [\n          69,\n          5195,\n          851\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"N_Days\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1088,\n        \"min\": 41,\n        \"max\": 4795,\n        \"num_unique_values\": 451,\n        \"samples\": [\n          1141,\n          3762,\n          2716\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Drug\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"D-penicillamine\",\n          \"Placebo\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3622,\n        \"min\": 9598,\n        \"max\": 28650,\n        \"num_unique_values\": 389,\n        \"samples\": [\n          22977,\n          15612\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"F\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Ascites\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Y\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Hepatomegaly\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Y\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Spiders\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Y\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Edema\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"N\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Bilirubin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.8505288629098295,\n        \"min\": 0.3,\n        \"max\": 28.0,\n        \"num_unique_values\": 110,\n        \"samples\": [\n          15.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Cholesterol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 194.8431103034389,\n        \"min\": 120.0,\n        \"max\": 1775.0,\n        \"num_unique_values\": 226,\n        \"samples\": [\n          132.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Albumin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3460310661084128,\n        \"min\": 1.96,\n        \"max\": 4.64,\n        \"num_unique_values\": 159,\n        \"samples\": [\n          3.68\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Copper\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 73.00799670577757,\n        \"min\": 4.0,\n        \"max\": 588.0,\n        \"num_unique_values\": 169,\n        \"samples\": [\n          148.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Alk_Phos\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1916.716630531305,\n        \"min\": 289.0,\n        \"max\": 13862.4,\n        \"num_unique_values\": 364,\n        \"samples\": [\n          2374.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SGOT\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48.732377224394384,\n        \"min\": 26.35,\n        \"max\": 457.25,\n        \"num_unique_values\": 206,\n        \"samples\": [\n          110.05\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tryglicerides\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 52.19992792381623,\n        \"min\": 33.0,\n        \"max\": 598.0,\n        \"num_unique_values\": 153,\n        \"samples\": [\n          66.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Platelets\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 87.3179449704929,\n        \"min\": 62.0,\n        \"max\": 563.0,\n        \"num_unique_values\": 227,\n        \"samples\": [\n          297.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Prothrombin\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7770220458427131,\n        \"min\": 9.0,\n        \"max\": 18.0,\n        \"num_unique_values\": 49,\n        \"samples\": [\n          12.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Stage\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8679904731188415,\n        \"min\": 1.0,\n        \"max\": 4.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"C\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":33}],"source":["cirrhosis_female_data = cirrhosis_data[cirrhosis_data['Sex'] == 'F'].sample(frac=1).reset_index(drop=True)\n","cirrhosis_female_data"]},{"cell_type":"markdown","metadata":{"id":"-ZiKCi_lUH0z"},"source":["#Feature Engineering"]},{"cell_type":"markdown","metadata":{"id":"6xKHKju68wiY"},"source":["##Encoding"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RdcNlGJN84h4"},"outputs":[],"source":["#One Hot Encoding - cos no inherent order\n","#low cardinality (data categorical features has 3 class labels max)\n","#it is said that one column shoul be dropped to avoid multicollinearity, but https://inmachineswetrust.com/posts/drop-first-columns/ said differently.\n","\n","categorical_columns = ['Edema']\n","\n","encoded_columns_1 = pd.get_dummies(cirrhosis_data_shuffled[categorical_columns], dtype=int)\n","encoded_columns_2 = pd.get_dummies(cirrhosis_female_data[categorical_columns], dtype=int)\n","encoded_columns_3 = pd.get_dummies(cirrhosis_male_data[categorical_columns], dtype=int)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fb9D_HJQQSpi"},"outputs":[],"source":["#concatenation\n","\n","cirrhosis_data_shuffled_encoded = pd.concat([cirrhosis_data_shuffled, encoded_columns_1], axis = 1)\n","cirrhosis_female_data_encoded = pd.concat([cirrhosis_female_data, encoded_columns_2], axis = 1)\n","cirrhosis_male_data_encoded = pd.concat([cirrhosis_male_data, encoded_columns_3], axis = 1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"T60S-lfYh5Gr"},"outputs":[],"source":["from sklearn.preprocessing import LabelEncoder\n","\n","# Initialize LabelEncoder\n","label_encoder = LabelEncoder()\n","\n","# Define categorical columns to encode\n","categorical_columns = ['Drug', 'Sex', 'Ascites', 'Hepatomegaly', 'Spiders', 'Status']\n","\n","# Encode each categorical column and attach the encoded variables to the DataFrame\n","for col in categorical_columns:\n","    # Encode the column\n","    encoded_labels = label_encoder.fit_transform(cirrhosis_data_shuffled_encoded[col])\n","\n","    # Attach the encoded variables to the DataFrame\n","    cirrhosis_data_shuffled_encoded[col + '_encoded'] = encoded_labels\n","\n","# Now, the encoded variables are attached to the DataFrame as new columns\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"IjcqJoEXhQGi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020379831,"user_tz":-60,"elapsed":240,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"9862c9ca-9c17-4e0e-d287-1b638f95de46"},"outputs":[{"output_type":"stream","name":"stdout","text":["Label Encoding Mapping for 'Drug':\n","{'D-penicillamine': 0, 'Placebo': 1}\n","\n","Label Encoding Mapping for 'Sex':\n","{'F': 0, 'M': 1}\n","\n","Label Encoding Mapping for 'Ascites':\n","{'N': 0, 'Y': 1}\n","\n","Label Encoding Mapping for 'Hepatomegaly':\n","{'N': 0, 'Y': 1}\n","\n","Label Encoding Mapping for 'Spiders':\n","{'N': 0, 'Y': 1}\n","\n","Label Encoding Mapping for 'Status':\n","{'C': 0, 'CL': 1, 'D': 2}\n","\n"]}],"source":["# Create a dictionary to store label encoding mappings for each column\n","label_mappings = {}\n","\n","# Encode each categorical column and store the mappings\n","for col in categorical_columns:\n","    # Encode the column\n","    encoded_labels = label_encoder.fit_transform(cirrhosis_data_shuffled_encoded[col])\n","\n","    # Store the mapping of original labels to encoded numbers\n","    label_mappings[col] = dict(zip(label_encoder.classes_, label_encoder.transform(label_encoder.classes_)))\n","\n","# Print label encoding mappings for each column\n","for col, mapping in label_mappings.items():\n","    print(f\"Label Encoding Mapping for '{col}':\")\n","    print(mapping)\n","    print()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Ckl0-69ri9Zt"},"outputs":[],"source":["categorical_columns = ['Drug', 'Sex', 'Ascites', 'Hepatomegaly', 'Spiders', 'Status']\n","\n","# Encode each categorical column and attach the encoded variables to the DataFrame\n","for col in categorical_columns:\n","    # Encode the column\n","    encoded_labels = label_encoder.fit_transform(cirrhosis_female_data_encoded[col])\n","\n","    # Attach the encoded variables to the DataFrame\n","    cirrhosis_female_data_encoded[col + '_encoded'] = encoded_labels"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YeecnxKIiwyP"},"outputs":[],"source":["categorical_columns = ['Drug', 'Sex', 'Ascites', 'Hepatomegaly', 'Spiders',  'Status']\n","\n","# Encode each categorical column and attach the encoded variables to the DataFrame\n","for col in categorical_columns:\n","    # Encode the column\n","    encoded_labels = label_encoder.fit_transform(cirrhosis_male_data_encoded[col])\n","\n","    # Attach the encoded variables to the DataFrame\n","    cirrhosis_male_data_encoded[col + '_encoded'] = encoded_labels"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KZ9q7xTsjicT","colab":{"base_uri":"https://localhost:8080/","height":273},"executionInfo":{"status":"ok","timestamp":1715020379831,"user_tz":-60,"elapsed":12,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"277cf911-471e-4665-c42d-194ea053adc2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["     id  N_Days             Drug    Age Sex Ascites Hepatomegaly Spiders  \\\n","0  1213    1435          Placebo  12816   F       N            N       N   \n","1  2326    2689          Placebo  14899   M       Y            Y       Y   \n","2   538    2456          Placebo  18499   F       N            Y       N   \n","3  4855    4079          Placebo  18329   F       N            N       N   \n","4  5404    3336  D-penicillamine  16463   F       N            Y       Y   \n","\n","  Edema  Bilirubin  ...  Status  Edema_N  Edema_S  Edema_Y  Drug_encoded  \\\n","0     N        0.7  ...       C        1        0        0             1   \n","1     Y        3.2  ...       C        0        0        1             1   \n","2     N        1.3  ...       C        1        0        0             1   \n","3     N        0.9  ...       D        1        0        0             1   \n","4     N        1.4  ...       D        1        0        0             0   \n","\n","   Sex_encoded  Ascites_encoded  Hepatomegaly_encoded  Spiders_encoded  \\\n","0            0                0                     0                0   \n","1            1                1                     1                1   \n","2            0                0                     1                0   \n","3            0                0                     0                0   \n","4            0                0                     1                1   \n","\n","  Status_encoded  \n","0              0  \n","1              0  \n","2              0  \n","3              2  \n","4              2  \n","\n","[5 rows x 29 columns]"],"text/html":["\n","  <div id=\"df-893e6117-47bf-4c68-b79a-ab201ac3c182\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>N_Days</th>\n","      <th>Drug</th>\n","      <th>Age</th>\n","      <th>Sex</th>\n","      <th>Ascites</th>\n","      <th>Hepatomegaly</th>\n","      <th>Spiders</th>\n","      <th>Edema</th>\n","      <th>Bilirubin</th>\n","      <th>...</th>\n","      <th>Status</th>\n","      <th>Edema_N</th>\n","      <th>Edema_S</th>\n","      <th>Edema_Y</th>\n","      <th>Drug_encoded</th>\n","      <th>Sex_encoded</th>\n","      <th>Ascites_encoded</th>\n","      <th>Hepatomegaly_encoded</th>\n","      <th>Spiders_encoded</th>\n","      <th>Status_encoded</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1213</td>\n","      <td>1435</td>\n","      <td>Placebo</td>\n","      <td>12816</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>0.7</td>\n","      <td>...</td>\n","      <td>C</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2326</td>\n","      <td>2689</td>\n","      <td>Placebo</td>\n","      <td>14899</td>\n","      <td>M</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>3.2</td>\n","      <td>...</td>\n","      <td>C</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>538</td>\n","      <td>2456</td>\n","      <td>Placebo</td>\n","      <td>18499</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>1.3</td>\n","      <td>...</td>\n","      <td>C</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4855</td>\n","      <td>4079</td>\n","      <td>Placebo</td>\n","      <td>18329</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>0.9</td>\n","      <td>...</td>\n","      <td>D</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5404</td>\n","      <td>3336</td>\n","      <td>D-penicillamine</td>\n","      <td>16463</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>1.4</td>\n","      <td>...</td>\n","      <td>D</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 29 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-893e6117-47bf-4c68-b79a-ab201ac3c182')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-893e6117-47bf-4c68-b79a-ab201ac3c182 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-893e6117-47bf-4c68-b79a-ab201ac3c182');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-811a9d5c-92f6-4d18-bdfd-96ff626dfcb6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-811a9d5c-92f6-4d18-bdfd-96ff626dfcb6')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-811a9d5c-92f6-4d18-bdfd-96ff626dfcb6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"cirrhosis_data_shuffled_encoded"}},"metadata":{},"execution_count":40}],"source":["cirrhosis_data_shuffled_encoded.head(5)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tOgJForQjtbR","colab":{"base_uri":"https://localhost:8080/","height":307},"executionInfo":{"status":"ok","timestamp":1715020379831,"user_tz":-60,"elapsed":11,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"24463fa2-b468-4551-ab5d-02b02e7725d2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["     id  N_Days             Drug    Age Sex Ascites Hepatomegaly Spiders  \\\n","0  6371    3422          Placebo  15574   F       N            N       N   \n","1  6705    2769          Placebo  18713   F       N            N       N   \n","2  2574    1682  D-penicillamine  17738   F       N            N       N   \n","3  4922    1592  D-penicillamine  14872   F       N            N       N   \n","4  6784     737  D-penicillamine  14558   F       N            Y       N   \n","\n","  Edema  Bilirubin  ...  Status  Edema_N  Edema_S  Edema_Y  Drug_encoded  \\\n","0     N        0.7  ...       C        1        0        0             1   \n","1     N        1.2  ...       C        1        0        0             1   \n","2     N        0.7  ...       C        1        0        0             0   \n","3     N        2.3  ...       C        1        0        0             0   \n","4     N        2.0  ...       D        1        0        0             0   \n","\n","   Sex_encoded  Ascites_encoded  Hepatomegaly_encoded  Spiders_encoded  \\\n","0            0                0                     0                0   \n","1            0                0                     0                0   \n","2            0                0                     0                0   \n","3            0                0                     0                0   \n","4            0                0                     1                0   \n","\n","  Status_encoded  \n","0              0  \n","1              0  \n","2              0  \n","3              0  \n","4              2  \n","\n","[5 rows x 29 columns]"],"text/html":["\n","  <div id=\"df-9ffb25fa-3b23-4739-8a5e-18059c59fa5a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>N_Days</th>\n","      <th>Drug</th>\n","      <th>Age</th>\n","      <th>Sex</th>\n","      <th>Ascites</th>\n","      <th>Hepatomegaly</th>\n","      <th>Spiders</th>\n","      <th>Edema</th>\n","      <th>Bilirubin</th>\n","      <th>...</th>\n","      <th>Status</th>\n","      <th>Edema_N</th>\n","      <th>Edema_S</th>\n","      <th>Edema_Y</th>\n","      <th>Drug_encoded</th>\n","      <th>Sex_encoded</th>\n","      <th>Ascites_encoded</th>\n","      <th>Hepatomegaly_encoded</th>\n","      <th>Spiders_encoded</th>\n","      <th>Status_encoded</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>6371</td>\n","      <td>3422</td>\n","      <td>Placebo</td>\n","      <td>15574</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>0.7</td>\n","      <td>...</td>\n","      <td>C</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>6705</td>\n","      <td>2769</td>\n","      <td>Placebo</td>\n","      <td>18713</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>1.2</td>\n","      <td>...</td>\n","      <td>C</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2574</td>\n","      <td>1682</td>\n","      <td>D-penicillamine</td>\n","      <td>17738</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>0.7</td>\n","      <td>...</td>\n","      <td>C</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4922</td>\n","      <td>1592</td>\n","      <td>D-penicillamine</td>\n","      <td>14872</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>2.3</td>\n","      <td>...</td>\n","      <td>C</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>6784</td>\n","      <td>737</td>\n","      <td>D-penicillamine</td>\n","      <td>14558</td>\n","      <td>F</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>2.0</td>\n","      <td>...</td>\n","      <td>D</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 29 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9ffb25fa-3b23-4739-8a5e-18059c59fa5a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9ffb25fa-3b23-4739-8a5e-18059c59fa5a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9ffb25fa-3b23-4739-8a5e-18059c59fa5a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ff5d1df1-6554-4bd4-a0b9-ec395aee05c2\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ff5d1df1-6554-4bd4-a0b9-ec395aee05c2')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ff5d1df1-6554-4bd4-a0b9-ec395aee05c2 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"cirrhosis_female_data_encoded"}},"metadata":{},"execution_count":41}],"source":["cirrhosis_female_data_encoded.head(5)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-GSJh_mhj3qP","colab":{"base_uri":"https://localhost:8080/","height":290},"executionInfo":{"status":"ok","timestamp":1715020379831,"user_tz":-60,"elapsed":9,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"dd861471-221e-4a1d-df9b-70da4c81b620"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["     id  N_Days             Drug    Age Sex Ascites Hepatomegaly Spiders  \\\n","0  2083     611          Placebo  26259   M       N            Y       N   \n","1  6145    1363          Placebo  16467   M       N            N       N   \n","2  7787     980  D-penicillamine  18713   M       N            Y       N   \n","3  1711    1657  D-penicillamine  27220   M       N            Y       N   \n","4   408    2563          Placebo  12839   M       N            N       N   \n","\n","  Edema  Bilirubin  ...  Status  Edema_N  Edema_S  Edema_Y  Drug_encoded  \\\n","0     S        2.0  ...       C        0        1        0             1   \n","1     N        6.4  ...       C        1        0        0             1   \n","2     N        7.1  ...       D        1        0        0             0   \n","3     N        5.0  ...       C        1        0        0             0   \n","4     N        1.0  ...       C        1        0        0             1   \n","\n","   Sex_encoded  Ascites_encoded  Hepatomegaly_encoded  Spiders_encoded  \\\n","0            0                0                     1                0   \n","1            0                0                     0                0   \n","2            0                0                     1                0   \n","3            0                0                     1                0   \n","4            0                0                     0                0   \n","\n","  Status_encoded  \n","0              0  \n","1              0  \n","2              2  \n","3              0  \n","4              0  \n","\n","[5 rows x 29 columns]"],"text/html":["\n","  <div id=\"df-501667d8-2954-4bd6-9c2a-48a23b463a5a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>N_Days</th>\n","      <th>Drug</th>\n","      <th>Age</th>\n","      <th>Sex</th>\n","      <th>Ascites</th>\n","      <th>Hepatomegaly</th>\n","      <th>Spiders</th>\n","      <th>Edema</th>\n","      <th>Bilirubin</th>\n","      <th>...</th>\n","      <th>Status</th>\n","      <th>Edema_N</th>\n","      <th>Edema_S</th>\n","      <th>Edema_Y</th>\n","      <th>Drug_encoded</th>\n","      <th>Sex_encoded</th>\n","      <th>Ascites_encoded</th>\n","      <th>Hepatomegaly_encoded</th>\n","      <th>Spiders_encoded</th>\n","      <th>Status_encoded</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2083</td>\n","      <td>611</td>\n","      <td>Placebo</td>\n","      <td>26259</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>S</td>\n","      <td>2.0</td>\n","      <td>...</td>\n","      <td>C</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>6145</td>\n","      <td>1363</td>\n","      <td>Placebo</td>\n","      <td>16467</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>6.4</td>\n","      <td>...</td>\n","      <td>C</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>7787</td>\n","      <td>980</td>\n","      <td>D-penicillamine</td>\n","      <td>18713</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>7.1</td>\n","      <td>...</td>\n","      <td>D</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1711</td>\n","      <td>1657</td>\n","      <td>D-penicillamine</td>\n","      <td>27220</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>Y</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>5.0</td>\n","      <td>...</td>\n","      <td>C</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>408</td>\n","      <td>2563</td>\n","      <td>Placebo</td>\n","      <td>12839</td>\n","      <td>M</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>N</td>\n","      <td>1.0</td>\n","      <td>...</td>\n","      <td>C</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 29 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-501667d8-2954-4bd6-9c2a-48a23b463a5a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-501667d8-2954-4bd6-9c2a-48a23b463a5a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-501667d8-2954-4bd6-9c2a-48a23b463a5a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-2abb3720-c9fb-4382-9ee7-73b5dcbd9c2e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2abb3720-c9fb-4382-9ee7-73b5dcbd9c2e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-2abb3720-c9fb-4382-9ee7-73b5dcbd9c2e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"cirrhosis_male_data_encoded"}},"metadata":{},"execution_count":42}],"source":["cirrhosis_male_data_encoded.head(5)"]},{"cell_type":"markdown","metadata":{"id":"HgSOAXCpjlI3"},"source":["##Correlation"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fAyewQw8GkBg"},"outputs":[],"source":["cirrhosis_data_numeric = cirrhosis_data_shuffled_encoded.select_dtypes(include='number')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UuKMv7alncFH","colab":{"base_uri":"https://localhost:8080/","height":492},"executionInfo":{"status":"ok","timestamp":1715020383469,"user_tz":-60,"elapsed":3645,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"3c5b8724-27e3-4bb2-d4cc-fba7c5980744"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1800x1200 with 2 Axes>"],"image/png":"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RERERCqJE9xEREREREREREREpJI4wU1EREREREREREREKokT3ERERERERERERESkkjjBTUREREREREREREQqiRPcRERERERERERERKSSOMFNRERERERERERERCqJE9xEREREREREREREpJI4wU1EREREREREREREKokT3ERERERERERERESkkjjBTUREREREREREREQqSU0gEAjKOxNERERERERERERERB+KV3ATERERERERERERkUriBDcRERERERERERERqSSN8s4AUXlouHhDeWehTPxWzRY9z4+pV445KTv1ygGi547fqHa5+GwUl0uHnr+UY07K5vr5+aLnzlNUu0w8t4rLpOben8sxJ2UX6r5A9LztoF/LMSdlc/vYPNHzRgtVu375rhbXL5cR68oxJ2V37+Bc0fMW49aXY07K7tGuOaLntX9X3XIJnikuE+fJqt1WPLeJ20qr0apdvx7sE9evmntUfFwZIx5XVPkcTPL8y2W46rZ5ALh3SNzuGyxR3TIBAP8V4nJpPE91Y3n2qzgO16GqXb/uHhbXL1U+lwSkzydbuqv2uPJwr3hcqSjfIYnKA6/gJiIiIiIiIiIiIiKVxAluIiIiIiIiIiIiIlJJnOAmIiIiIiIiIiIiIpXECW4iIiIiIiIiIiIiUkmc4CYiIiIiIiIiIiIilcQJbiIiIiIiIiIiIiJSSZzgJiIiIiIiIiIiIiKVxAluIiIiIiIiIiIiIlJJnOAmIiIiIiIiIiIiIpXECW4iIiIiIiIiIiIiUkmc4CYiIiIiIiIiIiIilcQJbiIiIiIiIiIiIiJSSRrlnQEqX2PGjMHevXuxevVqfPfdd6LtJ0+exIABAyAQCEp8//Xr19GxY0cAgJqaGgwNDVG7dm107doVs2fPho2NjVLz/ylN7+yCIc0bw1BHG17hUVhx+irCElNKfM/wVo4Y17YZLAz08TImHj/+54FnkbGi14c0b4zejvXR0MYKBjraaLVqC968zVZK/h/5ALsOAb4BQHyiGjatEqBLu5Lf89ALWLMZCAwFbKyAKaOAAT2l0xw4Aez6B0hIAuzrAIu+AZo0UEoIxXzd0wUDXRrDUFcb3iFR+PHIVYTHp8hN71ynKsZ0ao4GtlawMjbArB2n4fEsqMz7VYSxo9qiT48mMNDXxnO/SKz/4zIio5Llpu/b2wn9ejuhsrUxACA0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YpaL4yzVjcXnN3EctTeq7pgCAMHfiMeVOutVO5agOeJYnKeqbv0CAM8/xXWs7hrVjeXVd+I4KlL9ajJbdcsEAJ5ukCiXdapbLkFzxWVSa9O6csxJ2YXMmCt6rsplAkiXS70fVbutBCwSt5Vaf6huHQuZPvf9if5PpUXJvm9ceTKqoro3cpaHV3DTZ2HLli1o0aIFzM3NcefOHaxduxbTp08v72wRERERERERERF9lHzwuuJPgRPc9Fl49eoVVq1ahaSkJFSvXh1z584t1Q0hiYiIiIiIiIiI6P8XJ7jps7BhwwZs2KDaPy0iIiIiIiIiIiKiT4sT3EREREREREREREQKlsclSj4J9fLOABERERERERERERHRx+AENxERERERERERERGpJC5RQkRERERERERERKRg+Vyi5JPgFdxEREREREREREREpJJ4BTcRERERERERERGRguUJeAX3p8AruImIiIiIiIiIiIhIJXGCm4iIiIiIiIiIiIhUEpcoISIiIiIiIiIiIlKw/PLOwP8JXsFNRERERERERERERCqJE9xEREREREREREREpJK4RAkRERERERERERGRguVBUN5Z+L+gJhAIeKSJiIiIiIiIiIiIFCgi0qa8s1CMbdXo8s6CwnGJEiIiIiIiIiIiIiJSSVyihIiIiIiIiIiIiEjB8rhuxifBCW76v9RgyYbyzkKZ+K+YLXreoecv5ZiTsrt+fr7oud3a9eWYk7IL/HaO6Hl+TL1yzEnZqFcOED2vfeincsxJ2QUP/170vF3/teWYk7K7dfJb0XOXS9+VY07K5l63NaLntX9T7TYfPEvc5hueXFZ+GVEAv/7LRM/rHP6x/DKiAEFDF4meN5mjuuP90/Xisb72QRXvi0eI++Ka234tx5yUXejkeaLnbl+o9rhy44x4XKm9UXX74+BvxH1xReq/6q9U3f4LAF7+IO7DVDkWyTianFlSjjkpu6dfrBA9r0jn+DX3/lyOOSm7UPcFouctL3xfQsrP28Meql2nSPVxiRIiIiIiIiIiIiIiUkm8gpuIiIiIiIiIiIhIwfLLOwP/J3gFNxERERERERERERGpJE5wExEREREREREREZFK4hIlRERERERERERERAqWB7XyzsL/BV7BTUREREREREREREQqiRPcRERERERERERERKSSuEQJERERERERERERkYLlC8o7B/8feAU3EREREREREREREakkTnATERERERERERERkUriEiVERERERERERERECpYHtfLOwv8FXsFNIqGhoVBTU4O3tzcA4Pr161BTU0NKSgoAYM+ePTAxMVHIZ6mpqeHkyZOlzgsRERERERERERFRUbyC+//ImDFjsHfvXtH/zczM0KJFC/zyyy9o0qQJbG1tER0dDQsLC5nvHzp0KHr16vVJ8vq+vHxKI1o6YlybZrAw0MeL2Hj8eNYDzyJj5abv3qguZnZyRVUTI4QlpWDdpVu4+SpU9HrXBnYY2qIJGlWxgomeLgZs+RsvYuI/QSRCY0e1RZ8eTWCgr43nfpFY/8dlREYly03ft7cT+vV2QmVrYwBAaFgC9h68i4ePQ0Rpfvt5GJyaVJd63+mz3lj/xyXlBAFgZFNHTGjRHJb6+vCPi8eKqx54GhMjM21dc3N809YVDtZWqGZsjFXXPLDniVeZ9qkIj3yAXYcA3wAgPlENm1YJ0KVdye956AWs2QwEhgI2VsCUUcCAntJpDpwAdv0DJCQB9nWARd8ATRooLQyRUXWbYaJ9K1jqGsA/ORbLnlzC06RomWm7V6uPrxu6ooahKTTU1RH6Jhk7XjzAydDnUulmNW6PYXWcYKSpjScJr/HDowsITZdfXxVp/PA2+KKrsK08exGFdVsv4XV0itz0/Xs4oX8PJ1S2MgIAhIQn4n/s3Xd4U1UfwPFvd5u0pZO2zDJbdlvKaNlDNoIgyB4CCgoKCgqKyBBREV8XgiJblkxBZO9VCpTR0lLo3nune7x/pCRNmxa0CUg9H548TxpObs4vZ9xzb849d8vvV7nuo2wrhgZ6vD21F326OmNgoIf3nTC+WX+K1PRsrcUxsn5nxjv2wMrQlKCsWL4JOIx/RtQT39fXvi0r2o7jQsJ9Ft7ZrjbNBy2G80r9znz74Ah7Iq5oOusqJrZtxwx3d2wlUgKSEll67hz34itp81bWzPMobfPmtVhx4Rybb6u2+fFt2zK+TTvqmsvL61FKMj9c9+JCWJhW4wAY26gDrzfrgo2RKYHpcay8dwzftGi1afs6tOCN5t1oYGqFvo4uEbIUNgdd5UjkPUUa/+FL1b73a7+TbAq6qo0QFCY0bc8M587YGpsSkBbPMp+T3EuJUZu2X10n3mrZhYamyna/MdCLQ+Hydq+vo8t7bXrQ06Ep9U0tyCzI42p8KF/dPUdCbpZW43jsrQEejOzcBjMTI+6ExvDZvjNEJKVV+Z7XurRjSq/22JhJeRiTyKqD5/CLUI4TrM0kvDe0Ox7NGyA1MiQsMYUNp705fS9IKzFMbNaeGS3K9cXJ6vvi15q4MKJRG5pbyMdbfilxrL57XiW9jbGUD1x60c2+EeaGxngnRLDs1knCMrXfF09s5cKb7TpgayIlIDmRT6+c4W6i+nY/xrkNI5q3wslKHotvYjyrvS9VSD/PvQtjndtgbmTEzbgYFl86RVhGmrZDAeD18V0Y0q90vxIQwzc/nSS6iv3KsIEuDBvogr2dvJ8Ki0hm6+6rXL8l36+YmRrz+rguuLs6YmdrRlpGDpe9HrHxt8vIsvO1EsPEtu2Y0b5MX3z+Kfri2mX64jsVx1+PzXTvwAddurH5tg8rLp7XSv7L0mT/9TjNuKZutLa0x9JIwpATvxKQVvkxgyaNc2/HNI/22JYer6w4fg7fmMo/e0CLZrzbU368EpaSxtdnLnExKExt2mWD+jCmfVs+P3Gerd6Vl5+m1JRYXnPsyJQm8n39w4x4Vvkdxa+SfX0f+xZMb9ad+lIrDHT0CJclsy3kKn9G3VWkMdEzZG6Ll+ht70wtQwnR2ansDPVib/hNrcYBNWuMP9HJlTdbd5LvV1IS+NT7NHeT1Mcyplk7RjRphZOFLQC+yXGsvn2xQvomtaxZ2L4HnewaoK+jw6P0ZGadP0iMLFOrsbzaoDMTGnXD2tCUR5lxfB1wBP/0J4/xX7Jvy0qXMVyI92fB7d8Ur89o2oeX7NtiZ1yLgpIiHqRHs+7RSe4/xTYF4d9AzOD+jxkwYACxsbHExsZy5swZ9PX1GTJkCAB6enrY29ujr6/+dw8TExNq165d6bbz8zU3kH5SXp6Vga2b8+GA7qw978XI9TsIjEtiw6QRWElN1KZ3qe/A168OYr+PHyPW7eBMQBA/jH2ZZrWtFWlMDA3wiYhmzcnLzyoMhbGjOjLyZTe++eEks+b+Rk5uAas/G4WhgV6l70lMyuSXzRd5Y8423nxnGz53I1i5ZASODaxV0h05dpcR49YqHus3nddaHIOcmvNRzx78cNWLYdt+40FiIptHjcBKor5cjA30iUxLZ/XFyyRkqT9J8ne3qQk5OeDUFD6Z+3Tpo2Jh5kLo5AoHf4VJr8Inq+GytzLNX2fhy7Xw9mTYvwGcmsCM+ZCs5fHi4AYt+Mi1D9/7XWbo8U0EpCWwtdcYrI0katOn5eew1v8KI09tZdCxX9kXco+vOg2hm30jRZo3W3RmSnN3Ft84xohTW8guLGBLrzEY6lZeXzVl3CsdGTnEja/Xn+LND3aQk5vPmk+rbisJyZms336B6e9vY8b87fj4hrNq0Ss41le2lTmv96ZLhyYsWX2YOYt3Y2NpysqFw7UWRx+7trzjNISNwaeZ4vUDjzJj+V/7aVgaSqt8n72xJXOaD+Z2amilaXrUbkWrWg1IzE3XdLYrGNy8OR9178H3Xl4M3fkbAYmJbH1lBNYm6tuniYE+EenpfHX5Mgky9W0+NjOLr65cZtiuHQzftYNrkZH8PHQYzays1abXlAF1W/Fh6/789OA8r57/mQcZ8fziOQGrSsokvSCHnx9eZNyFX3nl7DoOhN9mpetwutRuokjT/djXKo+PfQ5RXFLCyZgArcYyuH4LPnLpy/f3L/HyyY08SEtgS4/K2316fg4/+V/h1dNbGHx8A/tD7/Jlx6F0s28MgLG+Aa0s7fnR/zIvn9zIW1f20cjMml+6jdZqHI9N7e3OuG4urNh7mvHf7iInv4D1b47AUL/ydt/fpTkLhnVn/QkvXvtmB4ExSax/YwRWpsq6uXLcABxrW/LOpj8YsXo7p+8FsXrSYJzr2mo8hsENWvCRW2lffOzJfXFnuwYcCb/PuNM7GHlyG7GyDLb1GoudiakizfruI2lgasGbF/cx5NhGomUZbO89DhM9A43nv6whTZxY7NGT725dY/D+7finJLBt8KtYG1cSS536HA56wNgjexhxaCexsky2D34VO4kylpntOjK1tSsfXzrF8IM7yCksYNvgVzHS0/5+ZezIjowY4saan04xc/4OcnPz+Xr5k8dgP2+9wIy523hj3nZ87oWz8uNXFGMwGytTrK1NWbfpPFNmb2HVt8fo6NaID94ZoJUYBjdrzkfdevD9dS+G7irti4c/RV98pfK++LG2dnaMbd2WgMRnM+lD0/0XgETfgJuJkXx179wzieGxgS2bs+il7qy96MUrG3bwID6JjeMqH8O61nNgzYhB7Lvjx/ANOzgTGMTa0S/TzLbi/q+vUxPa1bUnPuPZ/MhYU2LpX6c1C1oOYP3D87x2cT2BGXGs7zSpyn39hkcXmXh5AyMvrOWPyNssbzccT9umijQLWg2gS+2mLLq9n+HnfuC3kGssaj2YnnZOWo2lJo3xhzg6s7hDb767e4XBR7bgn5rAtr6jK9+v2NfncGgAY0/sYsRf24nNzmT7S6NV9isNzCzYN2A8wekpjD2xkwFHNvPDvavkFRVpNZa+9m2Y6zyIX4POMOnqWh5lxvK9+9QnjvEdTCx4x3kgt1MqjvEjZEmsDjjM2Cvf8cb1n4nNSeUH99exMKh6m8KTFaHzr3vUROIE93+MkZER9vb22Nvb4+LiwsKFC4mMjCQxMfGJy4KUX6Jk6dKluLi48Ouvv9KoUSOMjY0BcHR05Ntvv1V5r4uLC0uXLlV5LTY2loEDB2JiYkLjxo3Zt2+f4v8qWy7lzJkzuLu7I5FI8PT0JDAwsLpfSZUme7qx95YfB2/7E5yYwtIjp8ktKGSEW2u16Sd1duVyUBibrtwiJCmF789eIyA2gXGdXBRpDt8N4Kfz17kaEqHVvKvz6nB3tu++xhWvIELCEln19VFsrE3p6tms0vdcux7M9RshRMekEhWdysatl8jJzaelcx2VdHl5BaSkyhSPbC3NHAJ43b09e+75sd/vPkHJKXxy8jQ5BYWMaq2+XHzj4vnywkWOPggkv5LBxt/dpiZ07wxzp8NL3Z8u/e4/oK4DfPg2NHGE8SOgXw/YuleZZuvvMGoIjBgETR1h6ftgbAwH/tJGBErTnDqyJ/gO+0LvEZSRxOIbx8gpLGRU43Zq019PiOBk1EOCM5KJyEpjy8MbPEhLwN22viLNVKeO/Hj/CqejH/EgLZH5XkewMzGjXz3tDuQBRg9tz7bfvbjsHURweCIrv/sLaytTunWqvK1cvRGM161QomLTiIxJZcOOy+Tk5tPKSd5WpBJDBvdtw4+bzuHjG8HD4HhW/XCMNi3q0rK5g1biGOvYlcNR3hyNuUWYLIGv/A+RV5TPkDrulb5HFx2WtXmNX4NPEZOdojaNrZE57zm/zFLf3RSWFGsl72VNc2vPHj8/9vnfJyglhcVnTsvrVyv17fNefDxfXL7Inw8rb/NnQ0M4HxZKWFoaoWlprLl6heyCAlwdtFMWj01p4sHecB8ORtwhODORZXf+JLeogBENXdWmv5EUxpnYB4RkJRGZncpvIdd5mBGPm7XyqpmkvCyVR28HZ7yTQonK1u4vW687dWJPyB32P273N/8ip7CQVxtV0u4TIzgZHUhwZjIRsjS2PLrBg/QE3G3k7T6rII/JF3bxV2QAoZkp3EmOYanPCdpYOeAgMddqLAATurux4ZQ35++H8Cg2iY93HsfWXErv1k0qfc+kHm7s9/Ljjxv+hMSnsGKffN8xvKOybro4OrDr0h38IuKJTklnw2lvMnPyaFnPTuMxTHMu7YtDSsvEu7QvbqK+TOZdPcxvj3wISEsgJCOZhd5/oaOjg6e9IwCNzKxws6nHJzeOcy8lltDMFD65cQwjPX2GOrbUeP7Lmt7Gnd0BvuwN9CMoLZmPL54ip7CA0c7q2/3cs3/xm/8d/JMTCU5L4cMLJ9DR0aFLXWVbeb2NGz/4eHEqPJgHKUm8d+4v7CSm9HNsqnabmjTq5fZs/92LK9flY7DP/yffr3TtXPV+5fqtUKJj04iKSeXX7fL9SsvS/UpoRBJLVv3B1RvBxMSlcfteBL9uv4Rnxybo6Wr+4HWaW3v23C/TF5+tfl8MIDEw4H/9B/HRmVOk5+VqPN/qaLr/AjgU7seP/pe5Elf5j8PaMLWzG7/f9uPAXX+Ck1L49Kj8eGWkSyXHKx1duRQUxsZr8uOV785fwz82gQkdXFTS1TaT8smAXsw/dJyCYu2erHuspsQyqbEn+yNu8UfkbUKyEllx7wg5RQUMb+CmNv3N5DDOxgUQmpVEVHYqO0K9eJQZj6uVsv9ysazP4cg73EwOIyYnjf0Rt3iYEU9ri3pajaUmjfGnt+zA7kd32RvkS1B6Mh9fO0FOUQGjm7ZRm37upT/5LfA2/qkJBGek8OHVY+igQxf7hoo0C1y7cy46mC9uned+SgIRmWmcjgwiOVd7V2cCjHPsyqHIG/wZ7UOoLIEv7v9BblE+Q+u2r/Q9uuiwvO1rbHh0muicimP8E7F3uZEcTExOKiFZCXz74C9MDYxpZmavzVAEQWPECe7/sKysLH777TeaNm2KtfU/m7EWFBTE/v37OXDgwN9eL/uTTz5h5MiR3L17l/HjxzNmzBgCAqqebfbxxx+zZs0abt68ib6+Pq+//vo/yvfTMNDTpZWDHdeClSeiS0rgWnAELvXUnwBpV9+Ba+VOXF8OCselvnZPmDwNB/taWFuZcut2uOI1WXY+/oGxFU5WV0ZXV4fePZwxNjbg/gPVSzj79mrJH7tns3ndVGZM6Y6RkXZm3xvo6tLa3o4r4co4SoCr4eG41vln37M2tqkNd+6DR7kxS9cO8tcB8gvky52UTaOrK//7cRptMNDVpbWVA1fiwhSvlQBX4kNxtan7VNvwtHOksbkVNxLl7ae+1ILaJqYqB4mZBXncSY556m3+Uw528rZy855qWwl4GKs4Wf0kuro69Omq2lacmthjYKCnst2I6BTiEtJp/ZTb/Tv0dfRwMqvLjWTlMggllHAjJYjWFg0rfd/rTfqQmi/jSLT6S1510GFJm9fYEXaRUFmCxvNdnoGuLq1r23ElUrV9XokI19jJaF0dHYY0d8JEXx+fWPWXp2uCgY4eLS3q4JUYonithBKuJYbgYvV0B6idbRrhaGrNzaRwtf9vbSSlu10z9odr99JrA11dWls6cDVe2UZLgKvxobjaPF0snrUdaWxmhXdi5T/4mhkYUVxSQma+dk961bWqha25FK+Hyrxk5ebjGxFHO0f17VNfT5cW9exU3lNSAtcfRtDOUVk374TF0t+lOeYSI3R0YIBLc4z09bkRHKnRGCrti+Oevi820TPAQEdXcZLx8Wy6vKJClW3mFxWpnKzQNANdXVrb2nEluly7j4rAze7p+ksTfX0MdHVJK42lvlktaktNVbaZmZ/PnYTYp97mP/V4v3Lrjpr9yt8Zg3VTPwYrSyo1Ijs7n6LikmrnuyxFXxyhpi+2r15fvKxnb86FhXAl8tlM/nhW/dezYKArP165GlqmHwKuhkbgWsnxiks9B66FljteCQlXOb7RAVYPG8DGa7cISkzWRtYrqCmx6Ovo0aKWA15JwYrXSijhelIw7Syfrn51smmMo9SGW8nK9nYnNZKe9s7UNjYDoIN1IxqaWnMtUTvLXUHNGuMb6OrS2tqeKzHl+rCYMNxs/8Y+UleXtNIxiQ7Qq15jQjNS2dZ3NDdHz+bQoIn0q1/5D5eaoK+jh7N5nYpj/ORg2lg0qPR905r2JjU/i8PRt57qM4bX70BmQQ4PM9Uv4SI8veISnX/doyYSa3D/x/z555+YmsovqZHJZDg4OPDnn3+iq/vPfuvIz89n27Zt2Nr+/ctsR40axfTp0wFYsWIFp06d4ocffuCnn36q9D0rV66kR48eACxcuJDBgweTm5urmD2uSRYSE/T1dEmWqf76mizLppGtpdr32JhKScoqlz5Lho2p+sueniUrS/mlRSmpMpXXU1NlWFmaqnuLQiNHG376ZgKGhvrk5OTzyYpDhEcoB4inzwcQH59OUkoWTRrV5s3Xe1C/nhVLPjuk8TgsTUzQ19UlOVv1e07KzqaxldW/ZpvakJQCNuWqnrUVZMl0yM0rISMTiop0sLZUPai1toRQLR5/WRpJ0NfVJSlXtW4l5cpoYlb5j2dmBkZcHTYHQz09iktKWHLzOJdLB9C2JlLFNspv09ZYu5fJWVvIt5+apvrZKekyRTuqTOOGNqz7Yry8reTm8/EXhwiLkrcVK0sp+QWFZMnyVLeblv3E7f4TFoYS9HX1SMlXvRQ3JS+LhlL1fXZbi4YMrduBSde+q3S7Exv1oKi4iN+1vOb2Y4/bZ5Ka9tmkmu3TydqGfa+NwUhfn+yCfGb9eYSgFPWz1jXBQtFWVMskOU9GY9PK7zlhqm/E+QHvY6Arbysr7h7lWpmT5GUNq+9CdmE+p7S8PImlYeXtvrF55e3e1MCIq0PfUbb7W8e5Eq9+tqOhrh4ftu3NkYj7ZBVq76ogABtz+X46ObPcPjwzG2sz9ftwS2npOEHNexrVVnbWC7Ye5atJg7j82VsUFBWRm1/I3M2HiUzS7PI+VfbFVZRJWR+69CI+J4vLpScegjOSiZals6BdLz72PkZOUT6vO3WkjtSc2iZVjx2qw9K4tN3nqMaSmCOjicXTtfuFnXoQL5MpTmjbSqSl21Atr8ScbMX/aYtiDFZuv5Ka9nT7lbWrxyvGYItXHiI8Uv1JulrmJkx6zYMjJ+6q/f/q0FZfPKS5E61r2zFs947qZvGpPYv+61mxlJSOYcsff8iyaVx+0FjKxlRKUvnjmywZNlJlXzejSwcKi0vY9gzW3H6spsRiWTr+Ss5TrV/JeTIamVZ+zGyqb8Tpl+ZjoKtPcUkxK33/VDlJvsrvKJ+2fZnTLy2goLiIkpISlt37g1sp6n/w1kgsNWiMX1ksibnZNKn1dPvIhe17EJ+TxZWYMEB+jwpTAyNmte7EmjuX+OLWeXrUbcT6Xq8w9sQursdr9ofsx/7JGL+dRUNerufOhCs/VLntrrZOfNZuDMZ6BiTlZTL7xibSC7Q7G10QNEWc4P6P6dWrF+vWrQMgNTWVn376iYEDB+Lt7f2Ed6rXsGHDf3RyG8DDw6PC30+aBd62bVvFc4fSmXsJCQk0aFDxl8q8vDzy8lRPJBkZGWFkZPSP8vui6durJe/P6af4e+Gn+//xtiKjUpj+9hakUiN6dHVi0fuDePeDXYqT3H8eUx5IhYYlkZySxf++GEMdBwtiqrh5kvDfllWQx5DjG5HoG+Bp78jHrn2JyErjesKznQ31UvcWzJ+lbCsffvbP20pEdAqvz9uKVGpEL4/mfPzOIOZ8vFtxkvvfTKJnyKdtXmOV//5KB7JOZnUZ3aALU7y+f8a5046Q1BSG7PgNMyNDBjZrzup+/Rm773etnuT+J2SF+Yw4tx6JviGdbRvxQZv+RGanciMprELaEQ1d+TPqHvnFhRU39C8gK8hj6Mlfkegb4mnnyMcufYnMSuV6uVmQ+jq6/OA5AnR0WHLzmMbzMcjNmSWj+ij+fvvXQxr/DMW2B3pgbmLEjHX7SJXl0Lt1U1ZPHszUH3/nUey/p2+Y2dKDIQ1bMu7Mb+SXXsJfWFLMrIv7+aLzYO6Meo/C4mKuxIVyPiYI/sXrN85y6cjQJk6MObJH6+ugqtO3Rwvef7vMGGx59fYr09/dilRiRI8uzflo3iDeWbS7wkluiYkhXywZQXhkMpt3avfmspriYGrKkh49mXRwf5VLmPxbPG3/9aJrZV+bSR1dGbHh2f3ooC0vUiyywnxGXViHRN+QTjaNmd9qAFHZqdxMDgNgnGNn2lrWZ473DmKy02hv3ZCP2gwhITeT60nqf/R+Xv4tY3xNmtW6E0MbtWDMiV3kle4jdXTk+8FTkUFs9Jdf+eifmoBb7bqMd3LR2gnuv0uiZ8iytqP43O/gE09W30wJYcLVH7AwkDK8fgdWuYxlqtc6UvNlVb5PEP4NxAnu/xipVErTpsp1Bn/99Vdq1arFhg0bFLOp/+72ytPV1aWkRHUGaUFBwd/PrBoGBsobGj3eoRQXq1//ddWqVSxbtkzltU8//bTCWuCVScvOobCoGGup6swta6mEpEz1O4YkNbO1rdXM6n4WrngFEVDmElaD0psYWVlKVWZxW1pKCQqu+g7vhYXFRJeeqH4YFI9zc3tGDmvPNz+cVJs+4IH8Mqa6WjjBnZqTQ2FxMdYS1e/ZRiIhSfbPdrza2KY22FhBUrkldZNTwFRagrGRfDkSPb2SCjeUTE6Vv1dbUvOyKSwuxqbcrAsbYymJuZV/fyVAeOnd0gPSEmhqbsOslp5cT4ggsXTWXvlt2BhL8U+tur7+XZe9g/B/qLz07nFbsbSQklymrVjVkvIotOolOQoLi4mOSwPgYXA8zs0ceHVoe75ed5KUVBmGBvqYSo1UZnFbWUgqXFmhCWn52RQWF2FlqDrL0srIlOS8ijdYqiuxpo6JFatdJite0y3tZy/1XcmYK2twsXTE0lDKwW4LFWn0dfWY4zSY1xp2ZcSlLzUex+P2aaOmfSZWs30WFBcTnp4GgF9CAm3t7Jji6sbiM6ertd3KpCnaimqZWBtJSVJTJo+VUEKETH7S/UF6HI1NbZnRrGuFE9ztrRvQ2MyG92/sVbMVzUrN10S7j6eJuQ0zW3iqnCB6fHK7rrQWE87t0Mrs7fP3g/GNULZ7Qz35kNjaTEJSpjL/1mYSAqPV3/QuVVY6Tig3w1u+Dfl+v551LcZ1c+WVL7cRHC8/IfkwJgm3xnV5rYsLn+07o7GY/mlfDDDduRMzW3ow8exOHqSpxuuXGseQYxsxMzDCQFePlLxsDvSbjG9KnMbyXl5qbmm7N1GNxdZEqtg/VGZGW3dmuXRk/J97eZCSpHg9MVtWug2J4vnjv/2TNbvc0hXvIALU7FesLMqNwSykBIU8xX7l8Rjs8X7l5fasWascg5mYGLB62atk5xSweOUhioo0f28EbfTFrWvbYSORcnjsBMVr+rq6dKxbj4ntXHD+8TuKSzS71Apot/961lKzS8ew5Y8/pJJKjz+Sys1whtLjldKZ0O4N6mItlXDuXeWxob6uLh++1J1JnVzp88MmDUchV1NiSS0df1kbqdYv+b4+s9L3lVBCZOm9TwIz5Pv6aU27czM5DCNdfd5p0Ye5N3ZzKeEhAI8y43E2d2BKky5aO8H9oo/xy6osFltjyZP3K606MqtNZ8af3MODVOU+MjUvm4LiIh6lJ6mkD05Lxt1Oe2ujVz3Gr1jH6kqsqSOxYo3bRMVrj8f4V/utYNSl/ynW5M4tKiAqO4UoUvBLj2Rft/d4uZ47W0MuaC2e/4KaelPHfxuxBvd/nI6ODrq6uuTk5Ghsm7a2tsTGKgf1GRkZhIZWvHzPy8urwt8tWrTQWD4WLVpEenq6ymPRokVP/f6ComLux8bTubFyjUkdHejcuD53otSvQ3U3MpbOjVVnk3s2acCdyGe/blVOTj7RsWmKR1hEMskpWbi5KNfelUgMaenkgH8Vazmqo6Ojg6FB5Xe5btqkNgDJKZo/aVdQXIxfXDyeDZXfsw7g2bABt2P+2fesjW1qg0sr8Cq3ZNrVm/LXAQwNoFVz1TTFxeDlo0yjDQXFxfilxCpuSgal35+dI7eTop96O7o6Oor1XiNlaSTkZKls01TfEBfrOn9rm08jJ7eA6Lg0xSMsUt5W2rdV1geJiSEtmjtwP/DvthUUbSUwOI6CgiLat1W2wfp1LLGvXQu/v7ndp1FYUkRgZjTu1sofNXXQwd2qKX5pFS9nDZclMv7q/5js9b3icSkxAJ+UECZ7fU98bjrHYm8z8dp3KmkSc9PZEXaRubc2ajwGKK1fCfF41i/XPus34HasZtunjo4OhnqV923VVVBShH9aDJ1tGyk/Ex062zbmTkrUU29HV0dHcUK2rBEN3fBLjSEwQ3sHiI8VFBfjlxqLp52j4jUdwMPOkdtJfyMWVGN5fHLb0cySSed3kpavufFJWdl5BUQmpSsewfHJJGbI6NRMuc+XGhnSpoE9d8PUt8/ComICouJV3qOjA52a1edumLxumhjKYyt/kq6ouFhxcKkpir64XJl42lfdF7/RojNzWndhyrndVZ60zizIIyUvG0czS9pYOXAq6qEGc6+qoLgYv8R4POuWa/d1G+ATX3l/+Wa7Dsxx82DyX/vxTVJtB5GZ6STIsvCsq+yDTQ0McantUOU2/4mcnAL1Y7B2avYrf3MMpqujPGH+eDtrlo+moLCIjz47QH6BdmZCV9kXx/2zvvhqZAQDftvKkJ3bFY978XH88SCAITu3a+XkNmiv/3oeCorlxysejmX6IcCjUX1uV3K8cicqls6Nyh2vNGqgOL75wzeAl3/ezvBfflM84jOy2HjtFtN3HhSxPEFhSREB6bF0smlcJg4dOtk05m7q09cvnTLjYn1dPQx09Smh3L6EYsWkL2140cf4ZRUUF+OXHIeng3IfoAN4Ojjik1j5577ZqiNz2noy+dRefJNV95EFxcXcS4qjsbnqTKJGtayIzsrQaP7LKiwp4kFGDB3Kj/Gtm+CbVvEHt3BZImMuf8eEqz8qHpcSHnArJZQJV38kPrfyJdPkZSfmxQovBlFT/2Py8vKIi5N3zKmpqfz4449kZWUxdOhQjX1G79692bJlC0OHDsXCwoIlS5agp+aEwd69e3F3d6dr167s2LEDb29vNm7U3AkSTSxHsvWqD6te6Y9fTAK+UXFM8nDFxNCAgz7yO/Z9MaI/8RlZ/O+0fC3abV632fb6KKZ4unHhYSiD2jjRqo4dnx5WzgasZWKEQy1zapvJfz1uVLqmXFKWTOszvfcdusnEMR5ERacSG5/GtIndSErO4vLVR4o0a1a9xuWrDzl4RL5O3Ywp3bl+M4SEhAxMJIb07dkSl7YNWLD4dwDqOFjQp2cLrt8IISMjh8aNavP2m7244xtJSJj6WW/VtenmLVYPGoBvXDz3YuOY4u6GiYEB+/zk5bJ60ADiM7P4+tJlQH5TkaY28rXVDPT0sDM1o0VtW7LzCwhPS3uqbWqDLBsiyoynomIh4BHUMoc6dvDNLxCfCF9+LP//McNg50FYvQ5GDpKfuD5+HtZ/odzG5NGwaBW0doY2zrBtH+TkwCsDtRYGABsDvfm681B8U2K5mxzDVKeOSPQN2Bd6D4CvOw8lPieT1XfPAzCrpQe+KbGEZ6ZhqKdHzzpNGO7Ymk9uHFdsc3OgN7NbdSEsM5WorDTmte1OfE4mJ6MCtRsM8PuRW0we5UFUTCqxCelMH9eV5JQsLl1XtpVvl4/motcjDvwlbytvTuiGl08o8UkZSEwMealbC1xbN+D9ZfLZtLLsfI6e9mX21J5kZOYgy8ln7ow++D6IVplBrkm7wi7zSetRPMiI4n56JGMadMVYz5A/Y+S/gixpPZrE3HTWBZ0gv7iQkCzVE0JZBfKb6Dx+PaMgm4xylzYWlhSTkpdJRLbq7BVN2uhzi6/7DcA3Pp67cXFMdXNDYmDAPn95+/y63wDiZVmsvlKmzZfePNlAVw87qRktbEvbfOmM7QVdunI+LJSYzExMDQx52dmZzvXqM+XgP19K4GlsCb7GKrdX8EuNwTc1mklNOmOiZ8DBCHk9WuX2Cgm5GfzPXz6zd0azrvilxRApS8VQV4/u9s0YWr8ty+8eVdmuVN+I/nVastpP/ZU12rAp8DqrO71cebvvNJS47Ey+9j0PwMwWnvimxBKRJY+lZ52mDHdszZJb8navr6PLj11G0trSnumX9qCro6OYaZWen0NBJVdsacpvF31446VORCSlEZ2SztsDPEnMkHHWT7kG6oaZIznjF8Tuy/KlubZd8OGzsf3xj0zANyKOCT3k44RD3vK6GRqfSnhiKktG9WHNkYukyXLp3boJHs0bMnvjIY3HsPGBN197qOmLQ0rLxGMo8dnKvvjNFp2Z27Y7867+QZQsXfF9Zxfmk10ov/puYH1nUvKyiZFl4GRhy5L2L3Eq6qFinW5t+dX3Jmt6DsQ3MZ47CbFMa9MeiYEBewP9AFjTayDxsiy+8r4EwMx2HZnXwZN3zxwlKjMdWxP5rE5ZQYEilk2+Psxx60xYeiqRmem8796F+OwsToZp7yZtj+09fItJr8n3K3Hx6bw+Qb5fueyl3K9889loLl17xMGjpWOwSd24fiuUhET5fqVPjxa4tGnAgk/l+xWJiSFfLx+FsZEBn605itTECKmJfOyblpFNsYZvNKnoixNK+2JXNX1xVharr5bpi63K9MWmZrSwsSW7QN4XywoKeJisutRKdkEBabm5FV7XNE33XwC1DI2pI6mFXen69I3N5Ce9EnOzKqz7q0mbvXz4clh//GITuBcTx+SOrpgYGHDgrrxcvhzWn/jMLL45W3q84n2b7ZNGMbWzGxcehTKolROt69ix5Kj8eCUtJ5e0HNUb+xYUF5GUJSO0/GWCIha1toVc5TOXV/BPi8E3LYoJjT0w0TPkUIQPACtdRhCfm8H3D+T5nNa0G/fTYojMTsFQV49utZszpF47VvoeAUBWmMeNpFDea9GP3KICYrPTaG/tyNB6Lnx9/3il+dCEmjTG/9X/Bmu6DsY3OY47SbFMa+GORN+AvUG+AKzpOpj47Ey+8rkIwMzWnZjn0pV3Lx4hKitdsUa4rMw+8pf71/mh+zC846O4FhdOj7qN6VOvKWNO7NRqLDvDLvNpm1cJSI/ifnoUYxy7YKJnyJ/R8jq2tM2rJORl8NPDk2rH+JmF8gkEj1831jNgauNeXEoIICkvEwtDCa826IytkTln4ny1GosgaIo4wf0fc/z4ccXa1WZmZjg7O7N371569uxJWFiYRj5j0aJFhIaGMmTIEGrVqsWKFSvUzuBetmwZu3fv5q233sLBwYFdu3bRsmVLjeRBU475PcRSYsI7vT2wMZUQEJfIG9sPKm486VDLTGV2yZ3IWBbsO8a7fTyZ17cL4clpzNl1mEcJykF6L6cmrBrRX/H3N6MHA/DjuWusPac6q13Tdu31xtjYkPnv9MPU1Bjf+1F88Mleldk+dR0sqGWuvNTPwkLCR/MHY2UlRSbLIyQ0kQWLf+fWbfkM0IKCItq7OvLqcHdMjA1ISMzk4uWHbN99TWtx/BX4EGuJhLldPLGVSvBPSOT1fQcUN4msY6ZaLrVNTTkyWXlJ1oyO7szo6M71iEjG79n7VNvUhvuBMHmuctbFl2vlz4cPKGHVIkhMhtgyVy7Xc5CfzP7iR9i+H+xtYcUC6NpRmWZQb0hNg+83yW9K2aIp/LJau0uUAByNCMDKSMK8Nt2xMZYSkBrPlPN7FAd0dSTmKmViomfIcvcB2JuYkVtUSHBGMu9dO8zRCOWN8X4O8MJE35DPOwzE3NCYm4mRTD2/R7E2rDbtPOiNibEBC97qj6nUCN+AaOYv36fSVurYW1DL3ETxt4WFhI/nDsLaUt5WgsOTeH/ZXm7eVc6W/mHTWYpLevHZh8MwMNDD+3YY3/ysneUwAM7E38PSUMr0Ji9hbWTGo8wY5vlsIrX0pjR2xhZamyGnSUcfPsTKRMI8D09sJBICkhKZcuiA4mZndczNKEa1zR8dr2zzb7i784a7O15RkYzbJ2/z1iYS1vQfgK1ESmZ+PoFJiUw5uJ/LEdq91Px49H2sDKXMadELGyNTHqTH8ea13xQ3o3KQ1FKJxUTfkCXtBmNnYk5eUSEhmUl8eOsAx6NVf3wbVLc1OuhwNOrZHYQcjQzAykjK3NY95O0+LZ6pF3arxlKmfkn0DFjeXtnuQzKTed/rD45Gytu9nYkZL9VtLt92/xkqnzXu7HatLwOw+exNTAwNWDKqL2YmRtwOjWHWLwfIL1S2+3o2tbCUKtv9iTsPsTQ14a0BHtiYy5czmfXLQVJKf7AuLC7m7Q2HmDukKz9MG4bE0JCI5DQW7zrB5YAwjcdwNCIAK2MJ89qW6YvPVd4Xj2/mhpGePj91G6myne98L/Gdr/zEcW0TUz5261t6OXkWB0J9+dHvssbzXt6fwYHyWNy7YFva7if/tY+k0ptE1jU1V1kSb0Krdhjp6bO+3zCV7Xx78yrf3pKvSb3+rjcmBgas6t4Pc0MjbsRFM/mv/c9kne5d++X7lfmzS/cr/tEs+LTq/YplLQkfzRuEdekYLDgsiQWf7uXmHfl+pXkTO1o515Fvf4Nqm3lt2s/EJWh2BuHRR6V9cedK+uLy4y9pub64vTtvtC/ti/drfymlqmi6/wLoW6c5X3VSThr63nMEAN/5XeT7+5e0Fssx/4dYSUx4p4cHtqYSAuITmb6zzPGKuWq53I6KZf7BY8zt5cl7vboQlpLG278f5lHi878nQE2J5USMH5aGEt5y6o2NkSmBGXHMur6dlNJ1jO1Nyu3r9Qz5uM2Q0n19AaFZSXx0ez8nYvwUaT7w2cu7zn1Z5foqtQxNiM1J44cHZ/g9/IZWY6lJY/w/wx7I9ysuXbE1kRKQksDk07+TlFu6X5GW2684ucr3K71eUdnOt3cu8+1d+Y8sJyIe8bHXCd5q05mlHfsQkpHCrPMHuZmgvdnoAKfjfLE0lPJGs75YG5nxMCOWd29uVtx40s7EQqWOPUlxSQmOUlsGu7piYSglPT8b//Qo3rj+CyFZml3G67+oSCye8UzolJRfLFkQ/gNaLPnf885CtQQsn6d43nPgV88xJ9V3/tgHiudNV3/zHHNSfUEL3lM8L45r/hxzUj269srLzhvv+vw55qT6QsZ+pHjebfjq55iT6rt0aIHiucfJhVWk/He71k95yUHjb1/sNh8yV9nmWx5a+vwyogH+w5cqnjfZs/L5ZUQDgl/7WPG87Xsv7v7+3jfKfX3jnS94XzxO2Rc7/vz1c8xJ9YW9OV/xvMfQF3u/cuGIcr/S+LsXtz8OeVfZF9ek/stpxYvbfwEEfqLsw17kWMrG0fbIkueYk+q7N3S54nlNGuM7btX8PWCepbDJHyqedzz+URUp/928B7zYdUqbbkQ4Pu8sVNChQdjzzoLGiZ8RBEEQBEEQBEEQBEEQBEEQhBeSWKJEEARBEARBEARBEARBEARBw4pLtHczWEFJzOAWBEEQBEEQBEEQBEEQBEEQXkjiBLcgCIIgCIIgCIIgCIIgCILwQhJLlAiCIAiCIAiCIAiCIAiCIGhYEWKJkmdBzOAWBEEQBEEQBEEQBEEQBEEQXkjiBLcgCIIgCIIgCIIgCIIgCILwQhJLlAiCIAiCIAiCIAiCIAiCIGhYUYmYW/wsiG9ZEARBEARBEARBEARBEARBeCGJE9yCIAiCIAiCIAiCIAiCIAjCC0ksUSIIgiAIgiAIgiAIgiAIgqBhxWJu8TMhvmVBEARBEARBEARBEARBEAThhSROcAuCIAiCIAiCIAiCIAiCIAgvJLFEiSAIgiAIgiAIgiAIgiAIgoYVofO8s/CfIGZwC4IgCIIgCIIgCIIgCIIgCC8knZKSkpLnnQlBEARBEARBEARBEARBEISa5GyY0/POQgW9HQOfdxY0TixRIgiCIAiCIAiCIAiCIAiCoGFFJWLxjGdBfMuCIAiCIAiCIAiCIAiCIAjCC0nM4Bb+k1ou/t/zzkK1+H82T/HcbeaLHYvPemUsrRe82LH4rVbG0njX588xJ9UTMvYjxfPiuObPMSfVp2v/UPG87bwXu37d+5+yfjX6cc1zzEn1hM5+X/G88bffPMecVF/I3PcUz5vt/ew55qT6Ho1arHjuuP2L55iT6gubuFDxvOlXL267D/pA2eadl724cQA8+FQZi9OKFzuWwE/KxLL8BY9liTKWFp+8uLEErFDG0erDFzcOgPtfKmOpSccrL3IfVrb/qkn1q/F3L/gY7F3lGKwm7Vcc1339HHNSPWGz5j/vLPxrFYubTD4TYga3IAiCIAiCIAiCIAiCIAiC8EISJ7gFQRAEQRAEQRAEQRAEQRCEF5JYokQQBEEQBEEQBEEQBEEQBEHDisTc4mdCfMuCIAiCIAiCIAiCIAiCIAiCWmvXrsXR0RFjY2M6deqEt7d3lem//fZbnJycMDExoX79+sybN4/c3Fyt5U+c4BYEQRAEQRAEQRAEQRAEQRAq2LNnD++99x6ffvopPj4+tGvXjv79+5OQkKA2/c6dO1m4cCGffvopAQEBbNy4kT179vDRRx9pLY/iBLcgCIIgCIIgCIIgCIIgCIKGFZXo/usef9c333zDjBkzmDp1Ki1btmT9+vVIJBI2bdqkNv3Vq1fp0qUL48aNw9HRkX79+jF27NgnzvquDnGCWxAEQRAEQRAEQRAEQRAEQVCRn5/PrVu36Nu3r+I1XV1d+vbty7Vr19S+x9PTk1u3bilOaIeEhPDXX38xaNAgreVT3GRSEARBEARBEARBEARBEAThPyAvL4+8vDyV14yMjDAyMqqQNikpiaKiIuzs7FRet7Oz48GDB2q3P27cOJKSkujatSslJSUUFhYyc+ZMsUSJIAiCIAiCIAiCIAiCIAjCi6QY3X/dY9WqVdSqVUvlsWrVKo3FfP78eT7//HN++uknfHx8OHDgAEePHmXFihUa+4zyxAxuQRAEQRAEQRAEQRAEQRCE/4BFixbx3nvvqbymbvY2gI2NDXp6esTHx6u8Hh8fj729vdr3fPLJJ0ycOJHp06cD0KZNG2QyGW+88QYff/wxurqan28tZnALgiAIgiAIgiAIgiAIgiD8BxgZGWFubq7yqOwEt6GhIe3bt+fMmTOK14qLizlz5gweHh5q35OdnV3hJLaenh4AJSUlGopClTjB/QLT0dHh0KFD1dpGz549mTt3rkby86ydP38eHR0d0tLSnndWBEEQBEEQBEEQBEEQBEFFUYnOv+7xd7333nts2LCBrVu3EhAQwKxZs5DJZEydOhWASZMmsWjRIkX6oUOHsm7dOnbv3k1oaCinTp3ik08+YejQoYoT3Zomlij5F4uLi2PlypUcPXqU6OhoateujYuLC3PnzqVPnz7PO3sVnD9/nl69epGamoqFhcXzzo7Gze7jwSj3NpgZG3E7Ioblh88QnpxW5XvGdmrH613bY2MqJTAukZV/nsM3WnlZxyj3Ngxu50RLh9qYGhvR6bOfyMzNq2KL1TdzqAevdG2DmYkRd4Nj+HzXGSITKo/DrWldJvVzp0WD2thamPLeusOcvxuskmbp5H687NFK5bWr98OY/cNBbYSg8HY/D17tJI/ldlgMKw6cISIprcr3jPFsx9Qe7bExkxIYm8jnh87hF6ksk80zX6VDk/oq7/n92j2WHzhTflMaMbFZe2Y4d8LWxJSA1HiW3jrJvZRYtWn713PirZaeNDSzRF9Xl7DMVH59cJ1DYX4q6ea26c6YJi6YGxhxKymKT24cJywrVSv5f+zGXdi0C+4/hMRkHX74rIS+3ap+j/dt+GItBIWBQ22YORFeGaiaZsdB2LQbklLAuQl8/C60baG1MFS8NcCDkR7yNn8nLIbP9j65fr3WpR1Tesvr18OYRFYdOIdfhLJ+1bOuxfsvd8e1cR0M9fW48iCcVfvPkZKVrbU4JrZx4Q1Xd2wlUgKSEll68Sx3E+LUpm1mZc28Tp60sbWjnnktll86x+a7PippLk2aTj3zWhXeu/3eHZZc1E47AZjYth0z3MvEce4c9+KriMPDk9Z2talnXosVF86x+fZtlTTj27ZlfJt21DU3B+BRSjI/XPfiQliY1mJQfHaT9kx38sDW2JQHafEsv32Ce6kxatP2q+vETOcuNDS1Ql9Xl/CsFDYGXuePCF9FmjktuzO4fkscJOYUFBfhlxrH//zOcTdF/TY1aWJzN95s1QlbEykBqQl86n2Ku8nq+7AxTdsxonFrnCxsAfBNiWP17Qsq6cMmLlT73s9vneUXf2/NB1Bqgms7pndsj61USkBCIstPn+NeXHyl6Qc6NWNuV0/q1TInLDWNry5c4kJImOL/rSUSPujRla6NGmJuZMSNyGiWnTlHeGqa1mJ4bFyHdkzzlI89HsQl8tmxc/jGVB5L/5bNeLeXJ3UtzAlPTuPr05e4GCSPRV9Xl3d7e9KjaSPqWdYiKy+PqyERfHP6MglZMu3H4t6OaR7tsTWV8iA+kRXHq45lQItmvNtTHktYShpfn1HGUt6yQX0Y074tn584z1bv22rTaNI4d3m5KGJ5QrkMaKEsl7DkirHM7tGZwa2csDc3o6CoiPuxCfzv3BXuRavvFzVtTm/VcfGyw2cIT0mr8j3jOirHxQ/iEll5VHVcbKivx4cDujOojRMGenpcCQpn+ZGzJMu0t4+c/ZIHr3ZUjiWXHzxDxJPG9x7tmNq9zFjyj3P4Rqkvy/WvD6ebUyPmbD3MWf9gtWk0paYcq9SkPgxqRh2b2LYdM9qXGYOdf4oxWO0yY7A7lfexM9078EGXbmy+7cOKi+e1kv+yasp+ZWIrF9506SAvk+REPr18pvLxvaU173XsQhub0vH9lbNsuqc6vtfV0WGuuyevNG+JrURCvEzGvkA/frjlpdU4hBfHa6+9RmJiIkuWLCEuLg4XFxeOHz+uuPFkRESEyoztxYsXo6Ojw+LFi4mOjsbW1pahQ4eycuVKreVRzOD+lwoLC6N9+/acPXuW1atX4+vry/Hjx+nVqxdvv/32886eVj2+w+q/ybRu7kzo7MKyP04zZv0ucvIL+GXyCAz1K//laUDr5nw4sDs/nfPi1Z928CAuiV+mjMBKaqJIY2ygz+VH4fxy8cazCIPJ/dwZ28uFz3eeZvKX8jjWzqk6DmMjAx5GJfLF7rNVbvuKXygvffCz4rFo41+azr6K13u6M76rC8sPnGbcD/JYfp7+hDJp15wPhnZn3SkvRn27g8CYJH6erlomAHu9fOmx/GfFY83RS1qJYXCDFnzk2ofv/S4z9PgmAtIS2NprDNZGErXp0/JzWOt/hZGntjLo2K/sC7nHV52G0M2+kSLNmy06M6W5O4tvHGPEqS1kFxawpdcYDHW18yvpYzk54NQUPpn7dOmjYmHmQujkCgd/hUmvwier4XKZ81d/nYUv18Lbk2H/BnBqAjPmQ7J2z9UDMLW3O+O6u7Bi72nGf7uLnLwC1s+sun71d2nOguHdWX/Ci9fWyOvX+jdHYGUqr18mhvr8PHMEJZQw46d9TP5+DwZ6uvwwfRg6f/9H9KcyuKkTH3ftwXc3rjFkz3YCkhPZ+vJIrE1M1KY30dcnMj2dL69dIkGWpTbNsN930GHTOsVjwqG9ABwNDtROEMDg5s35qHsPvvfyYujO3whITGTrKyMqj8NAn4j0dL66fLnSOGIzs/jqymWG7drB8F07uBYZyc9Dh9HMylprcQAMqteSj9q9xI/+lxh+6lcC0uPZ1H0sVpW2+1zWBVxh9NnNDD25gf2hd/miw1C62jVWpAnLTGb57RMMOfkLY85tJVqWxubu47AyVL9NTRnS0JnF7r357t5lBh/djH9qAtv6vIa1sfrP7WzfgMNh/ow9tZMRx7cRK8tge9/XsDMxVaTpsPcHlceCq0cpLinhWIT26tcg5+Z81Ks7P1zxYtjWHTxITGLz6BFYSdTXL9c6Dvxv6CD2+vrx8pYdnHoUxLpXXqaZjbLurH9lKPUtajHzwGFe3rqD6IwMto0eiYmBdueWDGzVnIX9urP2ghcjft5BYHwSv06oIpZ6DqwZOYh9t/145ecdnA4M4scxL9PMVh6LsYE+Le1r89PF64z8ZQdz9hyhkbUlP40dptU4AAa2bM6il7qz9qIXr2zYwYP4JDaOe0IsIwax744fwzfs4ExgEGtHK2Mpq69TE9rVtSc+Q33/oGkDWzZnUWm5vPKLfEy4cfzTlcvwX0pjeU01lrDkVJYfO8fQ9dsZt+V3otPS2TR+BJaVbFOTppeOi5cePs1rP+8iO7+ADU8YFw8sHRevPefFyHU7CIxLYsNk1THYooE96OnUmLm7jzJp015qm0n5fuxQrcUxrYc747u4sOzgacb+WDq+n/aEsWTb5nwwpDs/nfFi1Pc7CIxN4udpFceSAJO6uqKlq7ArqCnHKjWpD4OaUccGN2vOR9168P11L4buKh2DDX+KMdiVysdgj7W1s2Ns67YEJCZqI+sV1JT9ypAmTizu0pPvbl5j8L7t+CcnsG3Iq1ibqB9/megbEJGRzpfXL1ZaJjNdOzKhVTuWXDpD392b+cLrIm+6dGRKG1dthiK8YGbPnk14eDh5eXlcv36dTp06Kf7v/PnzbNmyRfG3vr4+n376KUFBQeTk5BAREcHatWu1OhlWnOD+l3rrrbfQ0dHB29ubkSNH0rx5c1q1asV7772Hl5fyV7SkpCReeeUVJBIJzZo14/DhwyrbuXDhAh07dsTIyAgHBwcWLlxY5cnjvLw85s+fT926dZFKpXTq1Inz588r/j88PJyhQ4diaWmJVCqlVatW/PXXX4SFhdGrVy8ALC0t0dHRYcqUKYB8bZ5Vq1bRqFEjTExMaNeuHfv27VNs8/FSI8eOHaN9+/YYGRlx+fJl8vLyeOedd6hduzbGxsZ07dqVGzeezeCqvEmebvx83puzD0J4GJ/Ewn3HqW0mpU+LJpW+Z0oXN/be9OOgjz/BiSksO3ya3IJCRrRvrUiz/dptfr14g7uR6me7adq4Pm78esybC3dDeBSdxJLNx7G1kNLTpfI4rt4P46fDVzl3p+oZAfmFRSRnZCsemdnand0xsZsbv5zx5tz9EB7GJvHR7uPUNpfSp1XlsUzq7sa+634cuulPSEIKyw/Iy+SVjq1V0uUWFJCcma14yPLytRLDNKeO7Am+w77QewRlJLH4xjFyCgsZ1bid2vTXEyI4GfWQ4IxkIrLS2PLwBg/SEnC3Vc44n+rUkR/vX+F09CMepCUy3+sIdiZm9KvnpJUYHuveGeZOh5e6P1363X9AXQf48G1o4gjjR0C/HrB1rzLN1t9h1BAYMQiaOsLS98HYGA5o97cTACb0cGPDSW/O+4XwKDaJj3cex9ZcSu82VdSvnm7sv+bHH97+hMSnsGLvaXLyCxneSV6/XBrVoY6VOZ/sPMmj2GQexSazeOcJWtW3o2OzBlqJY7pLe/bc92VfwH2CUlP4+NwpcgoLGNWijdr09xLiWXX1In8+CiS/qEhtmpTcHJKysxWP3o6NCUtL5Xp0lFZiAJjm1p49fn7s879PUEoKi8+clreVVq3Vpr8XH88Xly/y58PK4zgbGsL5sFDC0tIITUtjzdUrZBcU4OrgoLU4AF5v3ok9obfZH3aXoMwkltz6i5yiAl51dFGb3jsxnFMxgQRnJhMhS2Vr0A0C0+Nxt1G2+yOR97maEEqkLI2gjCRW3T2FmYExTha1tRrL9JYd2f3oLnuDfQlKT+Zjr+PkFBUwuklbtennXj7Cbw9v45+aQHBGCh96HUMHHbo4OCrSJObKVB4v1W/GtbhwIrPStRbH6+5u7Lnnx34/f4KSU/jkxGlyCgoZ1UZ9/Zri7srF0DB+9b5FcEoK316+hn98AhPdXABwtLTAtW4dPj15Ft+4eEJTUlly8gzG+voMbeGstTgApnR2Y6+PHwfu+BOclMKnf8r3cyNd1ccysZMrl4PC2HT1FiFJKXx/7hr+sQmM7yiPJSsvn2m/HeC4/0NCk1O5Gx3HimPnaF3HDgdzM63GMrWzG7/f9uPA3dJYjpbG4qI+lkkdXbkUFMbGa/JYvjsvj2VCBxeVdLXNpHwyoBfzDx2noFh9/6BpUz3c+N1HTSyVlMukTk+O5U+/QK6FRhCVlk5QYjKrTl7EzNgIJzsbrcczycON9RfKjIv3y8fFfasYF0/2LB0X35aPi5ceKR0Xu8m/A1MjQ0a4tebL4xe5HhqJf0wCHx08iVvDOrSrp/4GVtU1sasbP5/15px/CA/jklj0+5PHkpO7ubHPWz6WDE5IYdnB0jg6qJals4Mtk7u355O9J7WS9/JqyrFKTerDoGbUsWlu7dlzv8wY7Gz1x2AAEgMD/td/EB+dOUV6Xq62sq+ipuxXprdzZ7e/L3sD/QhKTebjC6fIKShgtHMlZZIYx6prFzgSVHmZtLerw6mwYM5FhBCVmcGxkIdcigqjXW3tjov/K4rQ/dc9aqKaGdULLiUlhePHj/P2228jlUor/H/ZXzyWLVvG6NGjuXfvHoMGDWL8+PGkpKQAEB0dzaBBg+jQoQN3795l3bp1bNy4kc8++6zSz549ezbXrl1j9+7d3Lt3j1GjRjFgwAAePXoEwNtvv01eXh4XL17E19eXL7/8ElNTU+rXr8/+/fsBCAwMJDY2lu+++w6AVatWsW3bNtavX8/9+/eZN28eEyZM4MKFCyqfvXDhQr744gsCAgJo27YtH3zwAfv372fr1q34+PjQtGlT+vfvr4jvWalnWQtbMynXgiMUr2Xl5XMvKg6X+nXUvsdAT5eWdezwKvOekhK4FhyBS/3ns5Ooa1ML21pSrgeUiSM3H7/QONo2Vh/H3+HevB6nv3qTA0sns2hsb2pJjau9zcrUs6qFrbmUa49UY7kXEUe7hupj0dfTpWVdO7weqZaJ16MI2jVULZPBrs5cWjqTg+9PZO7ALhhrYcadga4ura0cuBIXpswPcCU+FFebuk+1DU87RxqbW3EjUR5TfakFtU1MuRIXqkiTWZDHneSYp97ms3LnPni0V32tawf56wD5BfLlTsqm0dWV//04jbbUtZbXL6+HqvXLNzyOdo6V168W9exU3lNSAtfL1C9DfX1KSuQ/Bj2WV1BEcUkJbo2q3wbLM9DVpXVtOy5HlskTcCUqAjd7zfRDBrq6DHdqyd4AvycnrsZntK5tx5XIcMVrJcCViHCNnYzW1dFhSHMnTPT18YnV3rIeBjq6tLJ04Gq8so2WAFfjw3C1fro26lHbkUZm1op2r+4zXmvsRkZ+Lg/SKr/ktrrkfZh9xT4sNgw326eLxUTPAANdXdLyctT+v42xhF51m7An6J4Gcqyega4ure3tuBKm2k6uhkfgWkd9/XKt48DVMNXv/1JouCK9Yem6gnlFygkFJUB+URHt62q+rT9moKtLqzp2XA1RjeVaSAQu9dTH4lLfQSU9wJXg8ErTA5gZGVFcUkKGFpcpMNDVpZWDHVdDy5VLaASulcVSz4FroaqxXA5RjUUHWD1sABuv3SIoMVkbWa9AY7FUUS4Gurq81r4NGbm5BMZpdyZkVePidlWMi1vVseNaSOXj4lZ17DDU11PZbmhSKjFpGVoZOz8eS3qVH0tGxtGuQRXj+7p2KuPPkhLwCoqgXQNlHo0N9Plq7EA+O3SWJC0uQfZYTTlWqUl9GNSMOqYYg0WoGYNVcyy5rGdvzoWFcCVS/XhG02rKfsVAV5fWtnZciSpXJtERuNn98zHGrfgYutRtQKNalgC0sLbF3b4u5yNCn/BOQfj3EGtw/wsFBQVRUlKCs/OTZ/lMmTKFsWPHAvD555/z/fff4+3tzYABA/jpp5+oX78+P/74Izo6Ojg7OxMTE8OHH37IkiVLKtzRNCIigs2bNxMREUGdOvLOcf78+Rw/fpzNmzfz+eefExERwciRI2nTRj77r3Fj5SXSVlZWANSuXVtxEj4vL4/PP/+c06dPK+6u2rhxYy5fvszPP/9Mjx49FO9fvnw5L730EgAymYx169axZcsWBg6UL8q7YcMGTp06xcaNG1mwYMHf/l7/KRtT+aU+5QcPyVnZ2JipvwzIQmKCvp6u2vc0trHUTkafwNpcnteUjHJ5yszGxrx6l7FfvR/G2dtBxCSlU8/WgtnDu/DDnFeY8uVuirVw3dzj7z058+nLxFIqL5NkNWXSqLayTI7eDiQmNYPEjCyaO9gyb1BXHG0tmbvtT43GYGkkQV9Xl6Rc1fX/knJlNDGrfIkEMwMjrg6bg6GeHsUlJSy5eZzLpSeYbE2kim2U36atccUfy56npBQo3xSsrSBLpkNuXgkZmVBUpIO1pWr9sbaEUC2PgxX1S01dsX5S/SpfJzOV9eteWCw5+QXMG9qV749eQUcH3h3SFX09XWzMNV8+liYm8jqWU64+ZGfTxMJKI5/Rr3FTzI2M2PdAe786KOLIVv1uk7KzaWJVvTicrG3Y99oYjPT1yS7IZ9afRwjS4o+olbX75NysKtu9qb4Rl4e+i6GuvN0v9TnGlQTVA45eDk35X+cRmOgZkJCbyZSLO0jNV3/iWBMUsZSrX4m5MprUerplXha69SQ+J4srsWFq/39k4zbICvI5ocXlSSwl8vqVXL5+ybJpbKV+f20jlVasjzIZtlJ5/xCSkkp0egbzu3dl8YnT5BQUMNXdDQdzM2qbaq8vVsQiqxhLo0rGHjam0orps2SKsU95hnp6zO/blaO+D5Dla+fqJigTS/l+WFb5OMrGVEqSrHy/LcNGqoxlRpcOFBaXsO0ZrLn9WGXl8sRYKsResVx6NmvENyMHYWJgQGKmjNd/O0BqjnZnQj7OQ/mySZJlY1tJvXk8LlY7Biv9DmzMJOQXFlZY3zkpKxsbM823m8f7+n8yvq8QR2Y2jWyVZfnh0B7cDo/hnH+IhnOtXk05VqlJfRjUjDqmrTHYkOZOtK5tx7DdO6qbxadWU/Yrlsbqx/eJ2bJqje/X+VzHzMCQM2Nfp6i4GD1dXb6+fok/HgVUN8uC8MyIE9z/QiV/44Rg27bKy4ClUinm5uYkJCQAEBAQgIeHBzplFnft0qULWVlZREVF0aCB6iXxvr6+FBUV0bx5c5XX8/LysLaWH6y+8847zJo1i5MnT9K3b19GjhypkofygoKCyM7OVpy4fiw/Px9XV9X1nNzd3RXPg4ODKSgooEuXLorXDAwM6NixIwEBT9fJ5uXlkZenOkg2MjLCyMioyvcNaefM0peVN/Gcuf3QU33ev83Ajs58PE4ZxztrD2nts07efKh4HhSTzKPoJI589jruzevhHRhZ7e0PdnXm05HKWN7adKja26zMvuvKG7c9iksmMUPGppmvUt+6FpHJ2rtE/mllFeQx5PhGJPoGeNo78rFrXyKy0rie8GxmP9REg9ycWTJaWb/e3nBIK5+TKsth/tY/WfxqH8Z1c5WvK3w7EP/I+L/V7/+bjG7ZhgvhoSTIns2NmjQtJDWFITt+w8zIkIHNmrO6X3/G7vtdqye5/wlZYR4vn9yAVN8QDztHFrV7iQhZGt6Jytk7XgnhvHxyA1ZGEkY3duU7j5G8emYTKXnanz34T8xq1Zmhji0Yc3IneZVczju6aVsOhfpX+v//VoXFxbx16AirBryEz7tvUVhczNWwCM4Hh2ptvf1nQV9Xl29HDQYdWHq06vty/Bu1sq/NpI6ujNjw7E6oaNv1sEiG//wblhITRru14duRgxm1cRcp2Zr7cWtIW9Vx8azfDmls28/SYBdnlo4oE8fmQ1r5nF4tGtOpSX1e/U579aymHKs8a9ruw2pSHdMmB1NTlvToyaSD+6tcwuRFUJP2K0OaOjGseQvePf0nD1OSaWlTmyVdehGfLWN/oJYvn/0PKC4Ri2c8C+IE979Qs2bN0NHR4cGDB09Ma2BgoPK3jo4OxcXF/+hzs7Ky0NPT49atW+jpqd74wtRUfgOo6dOn079/f44ePcrJkydZtWoVa9asYc6cOZVuE+Do0aPUrat6yXL5E83qlmOpjlWrVrFs2TKV1z799FOWLl1a5fvOBgRzr8w6c4b68mZiYyohqczdtq1NJTyIVX8ZaFp2DoVFxRVmD1ibSp7JpYoAF+4G4xeqjMOgNA4rcwlJGWXiMJMQGKXZy1mjk9JJzcymfm0LjZzgPucfzL2IimVibSYhKVO1TAJj1MeSKpOXibW6MsmsvEx8Sz+3vrWFRk9wp+ZlU1hcjE25mdU2xlIScys/WVgChGfJ77IYkJZAU3MbZrX05HpCBImlv+SX34aNsRT/VO0tVfBP2FhBUrmbRSangKm0BGMj+XIkenolFW4omZwqf68mnb8fjO/XauqXabm28jT1q9yMHGszCUllrpq4FhjB4JWbsZAaU1RUQmZuHmeXvUGUFn48Sc3Jkdcxk3J1TCIhMbv6J6TrmpnRpV4DZh07/OTE1aCIQ6L63dpIJCRW88R6QXEx4elpAPglJNDWzo4prm4sPnO6WtutTGXt3trYlMTcym9KVAJEyErbfXo8TcxsmOnsqXKCO6eogAhZKhGyVO6kRHNqwFuMauTCzw+uajeWcvXL1liq6IsqM6NlR2a17sz4U7t5kKa+TXWoXY8mtayZfekPjeVZndRsef2yLl+/pJIKs7YeS5LJKtZHqZTEMunvxyfw8tYdmBoaYqinR0pODvsmjMEvTnt9sSIWqZpYKhl7JGXJKqZXM3tYX1eX/706mDq1zJmybZ/WZz4qYim/z35CLDbS8vt45ew79wZ1sZZKOPfudMX/6+vq8uFL3ZnUyZU+P2zScBRylZXLE2OpEHvFcskpKCQiNZ2I1HTuRsdx4u0pvOraml+uaO6eNWcfBHMvSv0+MrHMuNhGKiGgkuVRHo+L1Y7BSmNKyszGUF8fM2MjlVncNqaqY71/6px/ML6RFcfF5bdvbSrhQSX7+krjMFOOJTs1rU99KwuuLX1LJc23E4dwKzSaqb/so7pqyrFKeS96H1aT6thj2hiDta5th41EyuGxExSv6evq0rFuPSa2c8H5x++0cgVwTdmvpOaqH9/bSqTVGt8v8ujBOh9vjgTJr5oLTEmirqk5b7l2FCe4hReG+BnhX8jKyor+/fuzdu1aZGp2HGlpaU+1nRYtWnDt2jWVmYFXrlzBzMyMevXqVUjv6upKUVERCQkJNG3aVOVhb6+8uUv9+vWZOXMmBw4c4P3332fDhg0AGBoaAlBU5pfYli1bYmRkRERERIVt1q9fn8o0adIEQ0NDrly5onitoKCAGzdu0LJly6eKf9GiRaSnp6s8Fi1a9MT3ZecXEJGSrngEJSSTmCmjcxNlfqVGhrStZ8+dSPVrtRYUFeMfE0/nxsr36OhA58b1ufOMbtKSnVdAZGK64hESm0xiuoyOzmXiMDakdSN77oVods3Z2ham1JKakJiumVmd2XkFRCanKx7B8fKZ1Z2bliuTBvbcDVcfS2FRMf7R8XRqqlomnZrW52545WXiXFd+kzZNHFyVVVBcjF9KLJ72jsr8IF9X+3ZS9FNvR1dHB0Nd+Q9SkbI0EnKyVLZpqm+Ii3Wdv7XNZ8GlFXjdUn3t6k356wCGBtCquWqa4mLw8lGm0ZTsvAIik9IVj+DSmfudmqvWrzYN7bkbVnn9CoiKV3mPjg50aqa+fqXJcsnMzaNj0/pYmUo476f5S0wLiovxS4inS33l1To6gGe9BvjEVb8ferVFa5Jzsjkbpt3LYx/H4Vk+jvoNuB2r2f5UR0dHsX6yNhSUFHM/NRaP2o2Unwl41nbkdvLfbfdVz1F4mjTVIe/D4ir2YfYN8UmsPJY3W3ZiThtPJp/5Hd+UuErTvda0HfeSYwlITdBgrisqKC7GLy4ez4Zl2i7g2bA+t2PU16/bMbF4NlS9Cq6LYwO16bPy80nJyaGhpQVt7O04HVT1DZuro6C4mPsx8Xg0Vo2lc+P63IlSH8udyFg8GqnG4tm4gUr6xyeGGlpbMHX7ftK0vAQGlMYSG4+Ho2osHo3qc7uyWKJi6Vw+lkbKWP7wDeDln7cz/JffFI/4jCw2XrvF9J0HtR9Lo2rGUq5c1NHV0cFQX7N9WKXj4sYVx8V3qxgX33/CuPh+TDz5hUUqaRxtLKljYa6RsXN2fgERyemKx+OxZKfyY8n69tyNqGJ8Hx2vMv5UjCVLJ0T8eu4Gr3y7nZHf/aZ4AHx55AKLNXQzwJpyrFIhTy94H1aT6pgiP1WNwf7hWPJqZAQDftvKkJ3bFY978XH88SCAITu3a+XkNtSc/UpBcTF+ifF41itXJnUb4BP/z4/pTfQNKEH1uy8uKVZZDUAQ/u3EDO5/qbVr19KlSxc6duzI8uXLadu2LYWFhZw6dYp169Y91TIdb731Ft9++y1z5sxh9uzZBAYG8umnn/Lee+9VWH8boHnz5owfP55JkyaxZs0aXF1dSUxM5MyZM7Rt25bBgwczd+5cBg4cSPPmzUlNTeXcuXO0aNECgIYNG6Kjo8Off/7JoEGDMDExwczMjPnz5zNv3jyKi4vp2rUr6enpXLlyBXNzcyZPnqw271KplFmzZrFgwQKsrKxo0KABX331FdnZ2UybNu2pvsOnWY7kaW276sObPTsRnpxGVGo67/TxJCFTxpkA5YHqpqkjOe0fxM7rdwHYcsWHVSP74xeTgG9UHJM8XTExNODgLeUvoDamEmxMpTSwsgCguZ0Nsrx8YtMzSM/R/I1Pdp7xYfrATkQkpBGTlM6slz1JTJNx/o4yjvVzR3LuThB7zsvjMDEyoL6theL/69qY07yeLRmyXOJSMzExMuDNwZ05c/sRSRnZ1LepxbsjuhGZmMY1//DyWdCY7Zd8eKNPJ8KT0ohOSWd2f08SMmScua+M5dc3RnLGL4hdV+WxbLvow8rX+nM/KgG/yDgmdJOXyaEb8jKpb12LQa7OXAoIJS07l+YONnz4cg9uBEfxMDZJ4zFsDPTm685D8U2J5W5yDFOdOiLRN2BfqPyGal93Hkp8Tiar754HYFZLD3xTYgnPTMNQT4+edZow3LE1n9w4rtjm5kBvZrfqQlhmKlFZacxr2534nExORmlvDVsAWTZElDmnFRULAY+gljnUsYNvfoH4RPjyY/n/jxkGOw/C6nUwcpD8xPXx87D+C+U2Jo+GRaugtTO0cYZt+yAnB14ZqNVQAPjtgg9vvNSJiER5/Xp7oCeJGTLO+irr14ZZIznjG8Tuy6X167wPn43rj39kAr7hcUzoUVq/rivb/LCOLQmNTyElK4d2jg58+EpPtl/wISwxtXwWNOLXO7dY03cA9xLiuBsfx+vt3OR1rPSmkGv6DiBOlsXqa5cB+Y1rmlrJl6Qy0NPDXmpKCxtbsgsKFDOdQT6QHuXcmv0P/Cl6BsurbPS5xdf9BuAbH8/duDimurkhMTBgn7/8u/263wDiZVmsvlImjtKltQx09bCTmtHC1pbsfGUcC7p05XxYKDGZmZgaGPKyszOd69VnysH9Wo1l08PrfNXxZfxSY7mXEs2UZp0w0Tdgf5i8Hn3V4WXiczJZ43cOgDedPfFLiSVCloqhrh49HJoyrGEbPvU5Bshv1DirRVfOxjwkITcLS0MTJjR1x87EjGNR/lqN5Vd/b9Z0GYJvcix3kmKZ1sIdib4he4PlfdgazyHE52Ty1W35TaVnturEvHbdePfyEaKy0hX3BpAV5pNdWKDYrqmBIYMaOrHy5rNZBmPTTR9WD+qPb1wC92LjmOLuiomBAft85fVr9aD+xGdl8fVF+Y/uW27eZufYUUzr4Ma54FCGtHCitb0dH59Qzvwf6NSMlOwcYjIycbK1ZnGfnpx6FMzlMO0uJ7XFy4cvhsvHHvei45jcWR7LgdK7834xvD8JmVl8c0Yey/brt9k2ZRRTPdw4/zCUwa2daFXHjiVH5LHo6+ry3aghtHSozcxdh9DT0VHMZkvPyaXgH141+DQ2e/nw5bD++MUmcC8mjskdS2O5K4/ly2H9ic/M4puz8li2ed9m+6RRTO3sxoVHoQxq5UTrOnYsOSqPJS0nt8KJrYLiIpKyZISWv1xI07Fc8+HLx+USE8fkTqrlUiGW67fZPrlMLK1LY/lTHouJgT4zu3XibGAwiVkyLCUmjHdvh525Kcf9H2k1FoBt13yY2bMT4Smq4+LTZcfFU0ZyOkA5Lt561YdVI/rjF52Ab3QckzxKx8U+8u8gKy+fAz5+LBzYg/ScXLLy8lk8uBe3I2K4G1X5j2HVsf2yD2/27kREkjyOOf0qjiU3zpCPJXdeK43jkg+fj5aPJX2j4pjYVV6WB2/K40jKylY7GzQ2LZPo1AytxAE151ilJvVhUDPqmGIMllA6BnNVMwbLymL1VTVjSV097EzNVMaSsoICHiar3owxu6CAtNzcCq9rWk3Zr/x69yZreg/ENzGeO/GxTGvbHomBAXsflI7vew8kXpbFV9cvAfIyaWapHN/bSc1oaW2LrKCA8Iw0AM6EBfO2W2eiMzN5lJpEK5vaTGvnrtimUD1FYm7xMyFOcP9LNW7cGB8fH1auXMn7779PbGwstra2tG/fnnXr1j3VNurWrctff/3FggULaNeuHVZWVkybNo3FixdX+p7Nmzfz2Wef8f777xMdHY2NjQ2dO3dmyJAhgHx29ttvv01UVBTm5uYMGDCA//3vf4rPW7ZsGQsXLmTq1KlMmjSJLVu2sGLFCmxtbVm1ahUhISFYWFjg5ubGRx99VGX+v/jiC4qLi5k4cSKZmZm4u7tz4sQJLC2f/Y1PNl66iYmhAcuG9cXM2AifiBje2HqA/ELlbPX6VrWwlJoo/j7u9xArqQlz+nhgU3qJ4JtbD6rcCOW1jm15u7eH4u/tM0YD8NH+Exy6rfkTE1tP3sTEyIDF4/tiJjHiTlAMs39QjaOebS0sTJVxtGxox4b3Rin+fn9UTwAOX7vP0q0nKS4uplldG4Z0bomZxIjE9Cy8/CP46fBVCspsV9M2nZeXydJXS8skLIaZv5YrE+tyZXL3IZZSE2b398DGTH554MxfDypuNlJQWETnpg3kA0lDA+LSMjnlG8TPp69rJYajEQFYGUmY16Y7NsZSAlLjmXJ+j+IGdHUk5iqzGEz0DFnuPgB7EzNyiwoJzkjmvWuHORqh/MHr5wAvTPQN+bzDQMwNjbmZGMnU83vI1/IatvcDYfJc5S/8X66VPx8+oIRViyAxGWLLTMSs5yA/mf3Fj7B9P9jbwooF0LWjMs2g3pCaBt9vkt+UskVT+GW15pcoUWfzWXn9WjK6L2YmRtwOjWHWz+Xaio1q/Tpx5yGWpia8NcADG3MJgdGJzPr5ICllDkIca1vx7uCu1JIYE52SwYZT3my/4KO1OI4GBWJtYsJ7HbvILx9PTGTKkf0k5cjzVMdMtY7Vlpry15hJir/fcOvAG24d8IqOZOzB3xWvd63fkLrm5uwNeDaD3qMPH2JlImGehyc2EgkBSYlMOXRAcdOjOuZmFJeZdVLb1JSj4ycq43B35w13d7yiIhm3by8A1iYS1vQfgK1ESmZ+PoFJiUw5uJ/LEdo9AflXlD9WRhLebdUDW2MpAWnxTLu0i+S8x+2+lsoMGomeIUvdBmIvkbf7kIwk5l//g79KT14XlRTTxMyaVzxHYmUoITU/B9+UGMae20pQhuZ/mCvrz/AHWBlLmNeuG7YmUgJSE5h8dg9JufJyqSs1V4llQnM3jPT0Wd/jFZXtfHv3Mt/eu6z4e6hjC3TQ4XDYs7mx0V8PHmJtYsLcrh7YSiX4JyTy+t6DihtP1jE3U2knt2Niee/PY8zr5sn73boQlprGrIOHeZSkPDC3lUr5qFcPrKXyZRwO3vdn7VXt7EvKOnb/IVYSE+b09MDWVL5kxIwdyrFHnVpmKlf23Y6KZf6BY8zt5cm83l0IS0lj9u7DPEqUx2JnZkof5yYA/DFzospnTdqyF+/wKO3F4i+P5Z0epbHEJzJ9pzIWh/LlEhXL/IPyWN7rJY/l7d+VsTxPx/zlY8J3elYSSy01sZSWy3ul5fL2HmUsRcUlNLa25JVRQ7GUGJOWk4tvTDzjt/xO0DOI99dLNzExMGDZy30xfzwu3qa6j2xgVQtLiXIfecxPPgZ7p3RcHBCbyBvbVMfFq45doLikhO/GDMVQX48rQWEsP6K9H7o2XigdS45UjiXf3FRxfG9Rdix5T16Ws/spx5JvbjpY4cZ1z1pNOVapSX0Y1Iw6dvRR6RiscyVjMDOzCmNJlTFYe3feaF86Btu/95nnv6yasl/5MzhQXiYdumBbWiaT/9ynGN/XNTVXaSd2UlP+Gq2cWPimSwfedJGP78cc3gPAp5fP8H7Hrqzo3hcbExPiZTJ2+t/l+5vXnm1wglANOiUv6p2tBKEaWi7+3/POQrX4fzZP8dxt5osdi896ZSytF7zYsfitVsbSeNfnzzEn1RMyVvnjU3Fc8ypS/vvp2itvgNp23otdv+79T1m/Gv245jnmpHpCZ7+veN7422+eY06qL2Tue4rnzfZ+9hxzUn2PRil//Hbc/kUVKf/9wiYuVDxv+tWL2+6DPlC2eedlL24cAA8+VcbitOLFjiXwkzKxLH/BY1mijKXFJy9uLAErlHG0+vDFjQPg/pfKWGrS8cqL3IeV7b9qUv1q/N0LPgZ7VzkGq0n7Fcd1Xz/HnFRP2Kz5zzsL/1o7gzo97yxUMK6p9idePGtiBrcgCIIgCIIgCIIgCIIgCIKGFZWItcyfBbEQjCAIgiAIgiAIgiAIgiAIgvBCEjO4BUEQBEEQBEEQBEEQBEEQNKxYzC1+JsS3LAiCIAiCIAiCIAiCIAiCILyQxAluQRAEQRAEQRAEQRAEQRAE4YUkligRBEEQBEEQBEEQBEEQBEHQsKISMbf4WRDfsiAIgiAIgiAIgiAIgiAIgvBCEie4BUEQBEEQBEEQBEEQBEEQhBeSWKJEEARBEARBEARBEARBEARBw4rRed5Z+E8QM7gFQRAEQRAEQRAEQRAEQRCEF5I4wS0IgiAIgiAIgiAIgiAIgiC8kMQSJYIgCIIgCIIgCIIgCIIgCBpWVCLmFj8L4lsWBEEQBEEQBEEQBEEQBEEQXkjiBLcgCIIgCIIgCIIgCIIgCILwQhJLlAiCIAiCIAiCIAiCIAiCIGhYkZhb/EzolJSUlDzvTAiCIAiCIAiCIAiCIAiCINQkPwX2et5ZqOAtp3PPOwsaJ35GEARBEARBEARBEARBEARBEF5IYokSQRAEQRAEQRAEQRAEQRAEDSsu0XneWfhPECe4hf+klh/973lnoVr8P5+neO649cvnmJPqC5v8oeK5y5wXu1zu/KAsl27DVz/HnFTPpUMLFM/bznuxy+Te/5RlUhzX/DnmpPp07R8qnnea9M1zzEn1XN/2nuJ52/de8Pr1jbJ+dZzy4pYJgPcWZbnUpL648XcvbrmEvKssk5pUvzqPX/Mcc1J9XjveVzxv9Nuq55iT6gudsEjx/EXuj8v2xd2HvbjjL4CLfyjHYE7LX9wyAQhcoiyXF/nYq+xxV4/BXz3HnFTfhaMfKJ53GfVi98VX9ir74k4TX+x95PXtyn1kt1e+fo45qZ5LB+c/7ywI/3FiiRJBEARBEARBEARBEARBEAThhSRmcAuCIAiCIAiCIAiCIAiCIGhYkZhb/EyIb1kQBEEQBEEQBEEQBEEQBEF4IYkT3IIgCIIgCIIgCIIgCIIgCMILSSxRIgiCIAiCIAiCIAiCIAiCoGHFJWJu8bMgvmVBEARBEARBEARBEARBEAThhSRmcAuCIAiCIAiCIAiCIAiCIGhYETrPOwv/CWIGtyAIgiAIgiAIgiAIgiAIgvBCEie4BUEQBEEQBEEQBEEQBEEQhBeSWKJEEARBEARBEARBEARBEARBw8RNJp8N8S0LgiAIgiAIgiAIgiAIgiAILyRxgltQOH/+PDo6OqSlpQGwZcsWLCws/hV5EQRBEARBEARBEARBEARBKE8sUfIfdO3aNbp27cqAAQM4evTo886OWp6ensTGxlKrVq3nnRWF2X09GOXeBjMTI26Hx7D8jzOEJ6dV+Z6xndvxerf22JhKCYxLZOWRc/hGxQNQy8SI2X098GzaEAcLc1Jl2ZzxD+b7U1fJysvXSgwTnVx5s3UnbE2kBKQk8Kn3ae4mxapNO6ZZO0Y0aYWThS0AvslxrL59sUL6JrWsWdi+B53sGqCvo8Oj9GRmnT9IjCxTKzGUNWuQByM85WVyJzSGz/ecISIxrdL0bk3qMrmPOy0a1KZ2LVPmbTjMuXvBKml6t2vKqC5tadGgNhZSE1774jcCoxO1HAlMG9uFoS+1xVRqhO+DGNasP0lUbFql6YcPcGH4ABfsa5sDEBqRzJbfr3LdJ1SRxtBAj7en9qJPV2cMDPTwvhPGN+tPkZqerbU43hrgwUiPNpgZG3EnLIbP9p4hIqnyOABe69KOKb3bY2Mm5WFMIqsOnMMvIl7x//Wsa/H+y91xbVwHQ309rjwIZ9X+c6RkaSeOG3dh0y64/xASk3X44bMS+nar+j3et+GLtRAUBg61YeZEeGWgapodB2HTbkhKAecm8PG70LaFVkKo4I0Rngzr2RpTiTH3HkXz1ZYzRManVZp+8pAO9HRvRkMHK/IKCvF9FMOPey4REZcKgLnUmBkjPOjUuiF21uakZWZz4VYwP++/gixHO/3XY28N8GBkZ2W7/2zfU9axXmXq2EHVOmZtJuG9od3xaN4AqZEhYYkpbDjtzel7QVqL441XPBneQ1kmX257QpkM7kCv9mXKJCiGH35XlgnI2/y7Y3rQr5MTBvp6ePmF89W2M6RkaK/NQ83oiye2bceM9u7YSqQEJCWy9Pw57sXHqU3bzMqaeR6etK5dm3rmtVhx4Ryb79yudNsz3TvwQZdubL7tw4qL57UUQUU1pY7NGOnJsF5t5PvHhzF8tel0lXFMermjvP+qY0Vevrz/Wrv7IhGxyjg+fL0vHVo3xMZSSk5ugTzNrkuEx6ZoLY6Jzd14o2UnbE1MCUhNYOmNk9xNrmQM1rQdIxq3oXktGwB8U+L4+s4FlfQSfQM+dO3FS/WaYWlkQmRWOlsCb7LzUeV1UZNqSl/8+jjV8dc366oefw0b4MLwgarjr617VMdfQ/u1pW/3FjRvYodUYsSgcd+TJcvTWgwA49zbMc2zPbamUh7EJ7Li2Dl8Y+IrTT+gRTPe7eVJXQtzwpLT+PrMJS4GhSn+f3aPzgxu5YS9uRkFRUXcj03gf+eucC9afb+oaTXhuOux1yd0ZUj/0joWEM03a08RHZNaafphg1wYNsgFezv5cXBYeBJbd13l+i1lHXt/dj/auzTExsqUnNwC/AKi+XnzBSKitNeHTX/Nk6F92mAmNeLegxi+3nCaqLi0StNPHN6RHp2a0bBuaV8cGMO6HReJKI3d3tac/T/NUPvexWuOcM7roTbCAErHxb1K948Pn2JcPFTNuHi36v5x4dS+dGjVABtLU3Jy8xVj5/DYystaE6aN7cLQvm2Ux5A/n6r6GLJ/O9VjyMhktvx+Tc0xZE/5MaR+6THkz6e1egxZ0xWh87yz8J8gZnD/B23cuJE5c+Zw8eJFYmJinnd21DI0NMTe3h4dnX9HRzCtuzsTPFxY9sdpxqzbRU5+Ab9MHYGhvl6l7xnQpjkfDurOT2e8eHXtDh7EJvHL1BFYSU0AsDU3xdbMlNXHLjHsu218tO8kXZs7smJkP63EMMTRmcUdevPd3SsMPrIF/9QEtvUdjbWxRG36zvb1ORwawNgTuxjx13ZiszPZ/tJo7CSmijQNzCzYN2A8wekpjD2xkwFHNvPDvavkFRVpJYaypvR1Z1wPF1buOc3ENbvIySvgp7eqLhMTIwMeRiey6vezlacxNOB2SDTf/XFZG9lWa9wrHRk5xI2v15/izQ92kJObz5pPR2FoUHksCcmZrN9+genvb2PG/O34+IazatErONa3VqSZ83pvunRowpLVh5mzeDc2lqasXDhca3FM7e3OuO4urNh7mvHfystk/cyqy6S/S3MWDO/O+hNevLZmB4ExSax/cwRWpvJ2YmKoz88zR1BCCTN+2sfk7/dgoKfLD9OHoa3uIScHnJrCJ3OfLn1ULMxcCJ1c4eCvMOlV+GQ1XPZWpvnrLHy5Ft6eDPs3gFMTmDEfkrU75gVg4uAOjH7JhS+3nGHasp3k5hXw3YIRVdYvV+f67Dt9h2nLd/HOl/vQ19Pl+w9GYmwo/13cxkKKrYUp3++6yLiPtrL8lxN4tHVk8TTt9F+PTe3tzrhuZepYfgHr33yKOjastI59U1rH3lDWMYCV4wbgWNuSdzb9wYjV2zl9L4jVkwbjXNdWK3FMGtSB115y4YutZ3h9+U5y8gr4/v2qy8TNuT57z95h2opdzFm9Dz09XX6YrywTgHlje9LNpTGL1v7JzFW/Y2sh5cs5Q7USw2M1oS8e3Kw5H3XrwffXvRi66zcCEhPZOnwE1iYmatObGOgTkZ7OV1cukyDLqnLbbe3sGNu6LQGJ2v+htKyaUscmDunA6P6ufLn5NNOXyOP4duHIJ/Rf9dh/+g7TP93JO1/I+6/vFr6KsZEyjgeh8Xz2y3HGLtjC3C/3o4MO3y0cia6WdiyDG7bg4/Z9+O7eZYb8tYmA1Hi29n4NayP1Y7BOdg05HObP2NM7GXFiG7HZmWzrMwY7E+UYbHH7PnSv05h5V4/Q98gGNj+4wbIO/ehbr6lWYiirpvTF40Z0ZORgN9asO8WbC3aQm5vP10urHn8lJmfy87YLzHhvGzPel4+/Pv9IdfxlbGSA9+1QftvnpZV8lzewZXMW9evO2gtevPLLDh7EJbFx/AisJOr7MNd6DqwZOYh9t/0Y/ssOzgQGsfa1l2lmq4whLDmV5cfOMXT9dsZt+Z3otHQ2jR+BZSXb1KSacNz12NhXOzJiqBtr1p5k5nu/kZtbwNcrnlDHkjL5ectFZry7jTfe3YbPvQhWfjICxwbK8nkYFM8X/zvGpJkbmf/JXnR0dPh6xWh0dbXTh40f1oFXB7qy+pfTzFgkH0t+s7jqvtilVT0OnLjDGx/tZO6Kfejr6/K/xcq+OCE5k6Ez1qk8ft1zheycfLzuhFa63eqaOLgDo/u58OXmM0xbWjou/uApx8XLyoyLPxypul8Ji2fFhhOM+XAL7351AHR0+P4D7e1XoPQYcrArX/98ijc/3EFOXgFrlrz6FMeQF5k+fzszFvyGj28EqxYOL3cM2Ysu7o+PIfdgY2XKyg+HaS0OQdAUcYL7PyYrK4s9e/Ywa9YsBg8ezJYtW574nkOHDtGsWTOMjY3p378/kZGRiv+bMmUKw4cPV0k/d+5cevbsqfi7Z8+ezJkzh7lz52JpaYmdnR0bNmxAJpMxdepUzMzMaNq0KceOHVO8p7LlUk6cOEGLFi0wNTVlwIABxMaqn/miaZM83fj5nDdnA0J4GJfEwr3HqW0mpU/LJpW+Z0pXN/be8OOgjz/BCSks++M0ufmFjGjfGoCg+GTm7vyT8w9CiExJ53pIJN+dvEIv50boaWFwMr1lB3Y/usveIF+C0pP5+NoJcooKGN20jdr0cy/9yW+Bt/FPTSA4I4UPrx5DBx262DdUpFng2p1z0cF8ces891MSiMhM43RkEMm52v91d3xPNzac8Oa8bwiPYpL4ZPtxbGtJ6dW28jK54h/G2qNXK8wULOvojQB+OX6d64ER2si2WqOHtmfb715c9g4iODyRld/9hbWVKd06Nav0PVdvBON1K5So2DQiY1LZsOMyObn5tHKqA4BUYsjgvm34cdM5fHwjeBgcz6ofjtGmRV1aNnfQShwTerix4aQ35/1CeBSbxMc7j2NrLqV3m8rLZFJPN/Zf8+MPb39C4lNYsfc0OfmFDO8kbycujepQx8qcT3ae5FFsMo9ik1m88wSt6tvRsVkDrcTRvTPMnQ4vdX+69Lv/gLoO8OHb0MQRxo+Afj1g615lmq2/w6ghMGIQNHWEpe+DsTEc+EsbEaga09+VzYevc9EnmKDIJJb+fBwbC1N6uFV+EmTu1wc4etmf0OhkHkUmsXzDCRxszHFuZAdASHQyC384wuU7IUQnpHMrIJJ1ey/T1bWxVvqvxyZ0d2PDKW/O3y9Xx1pXUcd6uLHfy48/bpTWsX2nySkoZHjH1oo0Lo4O7Lp0B7+IeKJT0tlw2pvMnDxa1rPTShxj+rmy6fB1Lt4OJigqiaUbjmNjWXWZvLtGXiYhMaVl8qu8TFo4yvMoNTHk5e6t+XbXBW4GRPIgPIHlG0/QrlldWjfRTpuHmtEXT3Nrz577fuzzv09QSgqLz54mp7CQUa1aq01/Lz6eLy5f5M+HgeRX8YOuxMCA//UfxEdnTpGel6ut7KtVU+rYawPc2HzoOpduyfuvZeuOYWNhSvf2lccx76sDHL14n9DoZIIiElnx83GV/gvgj3O+3HkQTWxSBoFhCfy89zL2NuY42JprJY7pLTqyJ+gu+0JKx2DXj5NTVMiopm3Vx3DlML899CEgNYGQjBQWev1VOgZzVKRxs63HgRBfrsdHEC1LZ1fQHQJS42lnXUcrMZRVU/riUUPbs32vfPwVEp7Iym/l46+unZ9u/BUVk8qvv6mOvwD2HrnFjv3e3A98NscpUz3c+N3HjwN3/QlOSuHTo6fJLShkpKv6PmxSJ1cuBYWx8dotQpJS+O78NfxjE5jQwUWR5k+/QK6FRhCVlk5QYjKrTl7EzNgIJzsbrcdTE467Hhs1zJ3te65xxSuIkLBEPl9zVF7HPKqoY97BXL8ZQnRMqryObbtETm4+LZ2VdezI8bvcux9FXEIGj4Lj+XXbJexqm2NfWztXP48e7MbW/de5fDOY4IgkVvx4DBtLU7p1qLwvfn/lAf46f5/QqGSCwhNZufY49rbmODWWt+fi4hJS0rJVHt07NuPMtUBycgu0EgfAmAGVjIur2K/MXX2Ao5dKx8URSSz/pXRc7Kjsmw6d8+VOYOl+JTyBn/dd0ep+BWD0EDe27fXisncwweFJZY4hK4/l6s0QvHzUHEOWHh9KJYYM7tOGHzefx8c3koch8az64bhWjyEFQVPECe7/mN9//x1nZ2ecnJyYMGECmzZtoqSkpNL02dnZrFy5km3btnHlyhXS0tIYM2bM3/7crVu3YmNjg7e3N3PmzGHWrFmMGjUKT09PfHx86NevHxMnTiQ7u/ITo9nZ2Xz99dds376dixcvEhERwfz58/92Xv6uepa1sDWXci1YeZCdlZfPvag4XBqoP4gw0NOlZR07vIKU7ykpgWvBEbg0qHzHYGpsRFZePkXFlZfJP2Ggq0tra3uuxIQr8wNciQnDzbbuU23DRM8AA11d0vLlB+k6QK96jQnNSGVb39HcHD2bQ4Mm0q9+5QM2TalrXQvbWlKVEx9Zufn4hsXRrpH2D+w0ycGuFtZWpty8pywbWXY+AQ9jVQ6WqqKrq0Ofrs4YGxtw/4H8qgynJvYYGOipbDciOoW4hHRaP+V2/4661vJ24vWwXJmEx9HOUf3n6evp0qKencp7Skrg+qMI2jWUtxNDfX1KSiC/UHkSKa+giOKSEtz+JWV95z54tFd9rWsH+esA+QXy5U7KptHVlf/9OI221LGthY2FKd73ld+xLCef+yFxtGn69INUUxMjADKyKj9JZyoxQpaj+f7rsbpWldSxiH9Qxx5G0M5RGf+dsFj6uzTHXGKEjg4McGmOkb4+N4Ij1W22WhRl4l+uTILjaPM3ThI+LpN0mbxMWjjayS8jLbPd8NhUYpMy/tZ2/46a0Bcb6OrSurYdVyLK7R8jwnG1r973tqxnb86FhXAl8tn9YAo1p47Vsa2FjaUpN+6X2T/m5HM/OJY2zZ6+fplKqu6/jI30GdyjNdEJacQna355NQNdXVpb2XM5VjkjsQS4EhuGm80/G4MB+CRG0adeM8Ws7s52DWhkbsWlWO3NfISa0xcrxl93K46/nnacpKurQ+9u8vGXX+DzuSrWQFeXVg52XA0t890CV0MjcK2nvl261HPgWqhqd1kFtAABAABJREFUv3Q5OByXStIb6OryWvs2ZOTmEhin3atRasJx12MO9vI6dutOuToWGEsr579Rx7qXjvED1NcxYyMDBr7Uhpi4NBKSMjSS97Lq1Jb3xTd9VePwD3r6tgIgfUJf7NS4Ns0b1ebPM37Vy3AVFPtHPw2Ni2WV71eGdG+ltf0KVNGHPfq7x5BO8vpV+oOcUxM7+THk3fLHkBlaOYb8rygu0f3XPWoisQb3f8zGjRuZMGECAAMGDCA9PZ0LFy6ozLguq6CggB9//JFOnToB8hPVLVq0wNvbm44dOz7157Zr147FixcDsGjRIr744gtsbGyYMUO+7taSJUtYt24d9+7do3PnzpXmZf369TRpIv/1fvbs2Sxfvvyp8/BP2ZjJLx9NKrfeb3JWNjam6i8ttZCYoK+nq/Y9jW0tK3mPMbN6dWKvt68Gcq3K0kiCvq4uSbkyldcTc7NpUsu6knepWti+B/E5WVyJCQPAxliKqYERs1p3Ys2dS3xx6zw96jZifa9XGHtiF9fjNX8w8piNufx7T85U/X5TMrOxNldfJv9W1hZSAFLTVMsmJV2GlaW0yvc2bmjDui/GY2ioT05uPh9/cYiwqGQArCyl5BcUVljzMSUt+4nb/Scet5NkNXXe2kx9mVhK5e2kfDkmZ2bTqLa8ndwLiyUnv4B5Q7vy/dEr6OjAu0O6oq+ni4255uP4J5JSwKZcs7a2giyZDrl5JWRkQlGRDtaWqgdQ1pYQquXzXta15N99Srk181LSZVhZPN33p6MD8yb05O7DaEKik9WmqWVqzOvDOnPovOb7r8cqa/fJmdWrYwALth7lq0mDuPzZWxQUFZGbX8jczYeJTErXcBRVlEmGDOtaT18m743ryZ0yZWJdq7TNZ5dr8xnZT73dv6sm9MWWJiby/WO5H9iTsrNpYmX1j7c7pLkTrWvbMWz3jupm8W+rKXXs8f6xYv+Vrfi/J9HRgbkTe3I3MJqQKNX+a2Tfdrw9tjsSY0PCYlJ4Z9U+CouKNZP5MpRjsHJ1LFf21GOwD117EZ+TpXKSfOmNU3zeaSBeI+dQUCz/4fcjr2N4J2hv/AU1qC+2rGT8lfZ046+fviwdf+Xks3jVIcIj1e8ftc1SIu/DkmXlvltZNo3LD05K2ZhKKx6jyGQVjmt6NmvENyMHYWJgQGKmjNd/O0BqjnavRqkJx12PPa5HKamqdSw1TYaVpam6tyg0bmjD2jUTlHXss4p1bPhgF96c2hOJiSHhkcm8//HvFBZqvg97PF5MSSvXF6f9vb743Sk9ufsgmtBK2sqQ3m0IjUrG76H2fiyytqhiXPw39o/zJlSyX+nTjtljuin2K3O+3K+V/QqUOYYsH0ta9hPH+I0b2LDui3FljiH/UB5DWlSyr/8bxw6C8LyIE9z/IYGBgXh7e3Pw4EEA9PX1ee2119i4cWOlJ7j19fXp0KGD4m9nZ2csLCwICAj4Wye427ZVXoKpp6eHtbU1bdool8aws5Nf3pOQkFDpNiQSieLkNoCDg0OV6fPy8sjLU+2YjYyMMDIyqjKvQ9o5s3R4H8XfM7cdqjK9JkiNDFk/eTjBCcmsPfNs1uv7O2a17sTQRi0Yc2IXecXymbSP10c/FRnERv+bAPinJuBWuy7jnVw0eoJ7kLszi8coy2TO+kMa2/az9lL3FsyfpVzv78PP9v/jbUVEp/D6vK1IpUb08mjOx+8MYs7HuxUDFG0a5ObMktHKMnl7wyGtfE6qLIf5W/9k8at9GNfNleKSEo7dDsQ/Mr7Kq0/+q/p7OLNwal/F3++tOVTtbS6Y1IfGda1587M9av9famzIN++/Qmh0MhsOXqv25z02yM2ZJaPK1LFfD2ls2+W9PdADcxMjZqzbR6osh96tm7J68mCm/vg7j2Kr1576ezizaLKyTOb971A1cwsfTOxD43rWvLFSfZloS03qi7XJwdSUJT16Mung/iqXMNGUmlLH+ns68+G0lxR/v7/6YLW3uWBKH5rUs+GN5bsr/N/xKwF4+4ZjbSll/KAOrHxnKG8s20V+gfbL7O+Y2aozQx1bMPbUDvKLlXmb7NQeV9s6TD+3l2hZOh1rN2BZx37yyQhxYRr7/JrSF7/UowXvlx1/raje+GvaXPn4q6dncz56Vz7+el4nubXlelgkw3/+DUuJCaPd2vDtyMGM2riLlOwcjX1GTTru6tuzJe/PVtaxhUurV8emz9mCVGpEjy5OfPTeIN75cJdKHTt1zp8bt+V92JiRHVm66GVmz99R7T6sX1dnFryp7IsXrKp+X/z+9D40rm/DrE8q9sUAhob6vNTVmS0aXre+v6cWxsWT5fvHN1dU3D8evxqAt1841hZSxg9y5/PZQ5ixYrdG9isvdW/B/JnKcvlw5YF/vK2ImBRef28bUokRvTyb8/E7A5mzeM8zOYYUBG0SJ7j/QzZu3EhhYSF16igvLSkpKcHIyIgff/zxH21TV1e3wkmmgoKKa2YZGBio/K2jo6Py2uOTpcXFlf/CqW4bVZ3gWrVqFcuWLVN57dNPP2Xp0qWVvgfgbEAw9yKVa+YZ6pfeVM1UQlKm8hd4a1MJD2LVX6aXlp1DYVFxhZkG1qYSksrNXpEYGvDLlFeQ5RUwZ8cRCqv4Dv6p1LxsCouLsTFW/dXV1lhCYo6sknfJzWjVkVltOjP+5B4epCrjTc3LpqC4iEfpSSrpg9OScberp7nMA+d9g/ENq1gm1mYSkjKU+bcyk/Aw+tneyOvvuuwdhP9DZSwGpTcBsbSQklxmhodVLSmPQiv/AQegsLCY6NK7lz8Mjse5mQOvDm3P1+tOkpIqw9BAH1OpkcosbisLSYWZJP/E+fvB+H6tpkxMVcvE2lRCYIz6MkmVydtJ+Rlf8nJVtpNrgREMXrkZC6kxRUUlZObmcXbZG0Qla35G1z9hYwVJ5W4WmZwCptISjI3ky5Ho6ZVUuKFkcqr8vZp06XYw94PjFH8/rl9WtSQkp5erX+FV1y+A+RN709WlMW+u3ENCasWb6UmMDfh2wQiyc/P58PvDFGlwlsr5+8H4RpSpY3pl2n3ZvthMQmAl7b7KOlbaF9ezrsW4bq688uU2guPlA/uHMUm4Na7La11c+GzfmWrFUb5MHt8kq0KZmEt5GPEUZTKhN13bNebNVaplkpxe2uYlRiqzbqzMVT+nOmpSX/xYak6OfP8oUa0jNhIJibJ/9r21rm2HjUTK4bETFK/p6+rSsW49JrZzwfnH7yjW4A90NaWOXfIp13+VjSOtbP8l4VH4k+vX+5N708W1CTNX7CYxpWL/JcvJR5aTT2R8Gn6PYjn1y2x6uDfj1LUH1Y6lLOUYrFwdM5aSmFP1TUpntOjIrFYeTDi9iwdpypiN9PSZ79KTmRf3cy5avpb9g7REWlrVZkbLTho9wV1T+uLL3kH4Bz7F+MtCStA/GH+NGiIffz1rqdnyPsxaWu67lUoqzGh+LCmr4mxta2nFWd05BYVEpKYTkZrO3eg4Trw9hVddW/PLlRsay39NOu66cj2IgDJL1SjGYJZSlbG3pYWUoJD4KrdVWFhMdGwaIL+hpHNze14d1p41PyrrmCw7H1l2PtExqfgHxvDnnnfo5tmcMxcCqhXH5ZvB3A9Ss0+xKNcXW0h4FPbkvvi9ab3xdGvC25+q74sBenVuhrGRAccv+lcr7+Vd8lGNpdrj4klVj4tV9itBsZz++W16tm/KSa/AasdS6TFkLUm5Pkzy944hQ+JxbmrPq0Pc+Hr9KVLSKtnX15KSkqaZ8eR/UVENXRLk30Z8y/8RhYWFbNu2jTVr1nDnzh3F4+7du9SpU4ddu3ZV+r6bN28q/g4MDCQtLY0WLVoAYGtrW+FGj3fu3NFaHH/HokWLSE9PV3ksWrToie/Lzi8gIiVd8QhKSCYxQ0bnJvUVaaRGhrStZ8+dCPWXUBUUFeMfE0/npsr36OhA5yb1uVPmIEFqZMivr4+goKiIt7f/obLOsCYVFBfjlxyHp4PyBpE6gKeDIz6J0ZW+781WHZnT1pPJp/bimxyn8n8FxcXcS4qjsbnqGbpGtayIztLs+m/ZeQVEJqUrHsFxySSmy+joVKZMjA1p42jP3dDnswbi08rJLSA6Lk3xCItMJjkli/ZtlTdMlJgY0qK5A/f/5nqOOjoo7podGBxHQUER7dsqy7x+HUvsa9fSyDqRasskQ0an5qrtpE1De+6Gqf+8wqJiAqLiVd6jowOdmtXnbnjFGzOlyXLJzM2jY9P6WJlKOO8XUu04NMGlFXjdUn3t6k356wCGBtCquWqa4mLw8lGm0ZTs3AKiEtIUj9DoZJLSsujQUlm/pMaGtGpsj29Q1Te/mj+xNz3aN+XtL/YSq2ZNR6mxId9/MJKCwiLm/+8Pjc96rFDH4kvrWLNydazBU9SxZmrqWOmJWhND+cF0+ROORcXFaOLO9+XLJCSmkjJpYo9v8BPKZEJverZvyltf7SWmXJkEhMVTUFikst0G9pY42Jg/cbtPHUsN6osfKyguxi8hHs/6yu9NB/Cs34Dbcf/se7saGcGA37YyZOd2xeNefBx/PAhgyM7tGj25DTWnjmXnFhAVn6Z4hEYnk5SaRYdWqvvHVk0c8H1Udf16f3Jverg3ZfbK34lNfPKYREdHR2UfqkkFxcX4pcSp3CBSB/C0b4hPUhVjsJadmN2mC5PP7sE3RXUMZqCri6GeXsV+q6QEXTR7w7ya0hfn5Dz9+OvvjpN0dZQnm561guJi7sfG49GozHcLeDSqz+0o9e3yTlQsnRup3qjbs3ED7lSS/jFdHR3FyU5NqUnHXTk5+UTHpikeYRHyOubWTjkWl5gY0sLJQXHPnKelq6NTZR3TKf2niXqYXe5YJTRK3he3b63aVlo2fXJbeW9ab7p3bMo7y34nNqHyvnhI7zZcvhlMWobmrg6AKsbFrf7BuHhS6bh41d6n36+gub6h8mPIcvWr2T84htTVKXMMGV96DKn8juTHkObP7V4DgvC0xAzu/4g///yT1NRUpk2bRq1aqndXHjlyJBs3bmT16tUV3mdgYMCcOXP4/vvv0dfXZ/bs2XTu3FmxPEnv3r1ZvXo127Ztw8PDg99++w0/Pz9cXV2fSVxVeZrlSJ7Wtqs+vNmrE+FJaUSlpvPOS54kZMo44x+sSLNp2khO3w9ip9ddALZc9mHVq/3xi0rANyqOSV1cMTE04KCP/K5yUiNDfp06AmMDfT78/TimRoaYGhkCkCLL0fgB8K/+N1jTdTC+yXHcSYplWgt3JPoG7A2Srz23putg4rMz+crnIgAzW3dinktX3r14hKisdGxLZ3/LCvPJLpTP0v/l/nV+6D4M7/gorsWF06NuY/rUa8qYEzs1mnd1dpz3YUb/TkQkpBGdnM7bQzxJTJdx7p6yTH6ePZKz94LYc1FeJiaGBjSwtVD8f11rc5zq2pKenUtcqvwGIOYSIxwszbEtXYetoZ187b6kDFmFtSM15fcjt5g8yoOomFRiE9KZPq4rySlZXLr+SJHm2+Wjuej1iAN/3QbgzQnd8PIJJT4pA4mJIS91a4Fr6wa8v2wvIJ/VcfS0L7On9iQjMwdZTj5zZ/TB90G0yq//mvTbBR/eeKkTEYlpRKek8/ZATxIzZJz1VZbJhlkjOeMbxO7L8jLZdt6Hz8b1xz8yAd/wOCb0kLeTQ9eVd18c1rElofEppGTl0M7RgQ9f6cn2Cz6EJaaWz4JGyLIhosw5h6hYCHgEtcyhjh188wvEJ8KXH8v/f8ww2HkQVq+DkYPkJ66Pn4f1Xyi3MXk0LFoFrZ2hjTNs2wc5OfDKQK2EoGL3idtMHdaJyPhUYhIzeHOkJ0lpWVzwCVKk+fHDVzl/K4h9p+8AsGByb/p3dmbBt4eR5eZjVbqmryw7n7yCQsXJbSNDfT5dfwypiSFSE3n/lZah+f7rsd8ultaxpNI6NqC0jvmVqWMzR3LGr0wdu+DDZ2NL61hEmTrmLa9jofGphCemsmRUH9YcuUiaLJferZvg0bwhszce0kocu0/e5vWhnYiMSyUmKYOZIzxJSlUtk7UfyMtk75k7AHwwsTf9PZyZ/91hsnPzFessZ5WWiSwnn8MX/Zg7pgcZWbnIcvKYP6E39x7F4KehE9zq1IS+eKPPLb7uNwDfhHjuxsUx1dUNiYEB+/zldeTrfgOIz8pi9dXLgPzkYlMr69LnetiZmtHCxpbsggLC09OQFRTwMFn1Mt/sggLScnMrvK4tNaWO7Tnuw5ThnYmMSyMmMZ03Xu1CUloWF28p4/hh0atcuBnEvlPyOBZM6UM/T2c++OYPtf1XHdta9PVw4vq9MNIyc6htZcakoR3Jyy/k6h3t/HD6a4A3azyHcC8ljrtJMbzeogMSfQP2Bd8DYI3nEOKyM1l95wIAb7bszLx23Zh7+TBRWemKK/CyS8dgWQX5eMWHs8itN7lFhURnpdPJrgEjGrXm/+zdd1RURxvA4R+99yZ2sWBBQazYazT2XmLXmMQ0S0wxxagpJjGmm65GjRq7sfdeUKMiKCgCUqR3pEgRvj8Wd1lYiAm7Evze55w9Luvs3Xl37tyZOzt37oeXKzfT+VE8KcfiLbsvM3mMD3djU4mNT2dGcf/rjK+q//XlkjGcLtH/em5SVy5cVvW/+nRrhpdHXeYv2qJ8j72tBfZ2FtRytQUU6yln5+QTn5jBvQpu1vxvrT5/hU+H9eN6TAL+MXFM6dAaMyMjthffyfrTof2Iv5fJF8fOArD2wlXWTRnNtI7enLx9hwEe7njUdGHhniMAmBkZ8kLXDhy7FUpiZhZ25mZMaOuJi7UlBwJvl5sPbXkSzrse2vLnX0wep+jjx8WlMX1SV8U+dl71PX7x0VhOnw9mxx7FPjZzSjcu/BVGQqJiH+vdozleLevy+nubAcXNK3t1bcqlq+GkpWfj5GjFhNEdyc0rwPeSbo5hm/deYcrIjtyNSyMmIZ2ZYzuTlJrJ6UuqY/HXC0dx6mII2w74AYplSfp2acpbn/1J9v087G1VbUpeXoHyfbVq2OLVrDbzl/77JTf+iT8OFPeL44r7xaOK+8Ul2pXv3hrFib9K9Yt9yu8X13SyoW/HJlwIiCD1Xg7O9pZMHlTcrlzT3Y1/N++5wpTRHZXHsGef6Vx8DqmK5avFoznlG8L2/aXOIYv3r77dmtG6RR1eW7JVGdPeowG8PK2noq3PzmPOzF46PYcUQltkgPv/xMqVK+nTp0+ZwW1QDHB/9tln+Pv7l/k/c3Nz3nzzTZ555hmio6Pp2rUrK1euVP5/v379eO+993jjjTe4f/8+06dPZ/LkyQQE6O6GHVVh5am/MDM2YvHwPliZmnAlIobnVm9X++W/jr0NdhZmyr8PBARjb2HGK318cLRSXFb3/OodypvwNa/pjGfxnb0Pzp+u9nl9PltJTJp2Z0HvCb+Jvak5c7264GRmQVBKAlOObFbe9KiWhbXaki8T3VtjYmDIjz2Hq23nK78zfHVN0UE+GHmbd3wP8mLLjixq35uwjBRmndjBXwnlz0jSlt+OKMrkvfF9sDIz4WpYDC9+X6pMHNXLpEVdF36dPVr59/wRPQDYdeEGC39XXPLXo2VDlkzsp0zz2bSBAPy47zw/7tfN+ugbdlzEzNSI11/sh6WFCQFB0cxfslVtRmzNGrbYWKtisbU15505A3CwsyArK5fQiCReW7xF7Y7X3646RmFRTz58cyhGRgZcvBrOFz8d0UkMAKuPKcpk4ZjiMrkTw6yf1MukdqkyOegXjJ2lGS/298HRWnF586yfdpBS4jLZ+s72zB7YBRtzU6JTMvjl8EXWnbyiszhu3IIpc1SzxT5doXg+rH8RSxdAYjLElrjyr7arYjD7k+9g3Tao4QQfvA5dStymYEAvSE2Db1YpbkrZrBH8vEz7S5Rosm7vJcxMjFgwrS+W5iZcux3N7M+3q+1ftZxtsLVSlcuo3l4A/PjOGLVtLfn5AHvPBOJe3xmP4rvNb/98hlqaYfN+1TjjWxuU+9joEvvYz/9iH/tZtY8VFBby0i87mTOoC9/OGIq5sTGRyWm8u/EgZ4LCdRLH2n2XMDUx4u2HZRIczezlj1YmPy1QL5PFvyrKBODLjScoLCrik5cHY2xkgG9AOJ+t0+1g15NwLN57Oxh7M3PmduyEo7k5QUmJTN25XXnjyZpWVmqDH84WluydMEn593Nt2vJcm7b43o3imW1bymy/Kjwp+9i6PYo43pqhiMM/OJo5n6rHUdvFVi2OkX0Vcfzw3li1bX3w0wH2nrpBXn4BXu61GNffGysLU1LSs/G7eZeZizeSquXZgw/tjQjCwcScea264mhmQVBqAlOPqfpgNS2s1faxiU0UfbAfuo9Q285X/qf52l/xQ8srp//kjdY9+KrzEGyNTYnOyuDzaydZf/uqTmIo6Uk5Fm/YfhFTUyPml+x/La64/2VnY87bcwbgYK/qf81fpN7/Gtrfk2njOyv//m7pMwB8/PU+DhxT/YCvLfsDFeccr/bwwcnSnKD4RJ7dsEN540lXG/Vj2NW7sczfvp85PTsxr1dnwlPSeGnTLm4nKn6Ae1BYhJuDHcNHD8bO3JS0nPsExMQz4bfNhCTq/ke6J+G866GNWy9iZmrM/FeewtLClIDAu7z+3hb1fczVFpsSN2a2szXn7dcGqvax8ERef28zf/kp9rG8vAe0alGbUUPbYmVpSmpaFteu3+Wl+etJS9fNZJz1f17CzNSIN54vPhbfjOa1j0q1KS622JQ4Fo/o5wXAisXqx+KPVhxg3wlVPRjU04OElHtcvBauk7yXpuwXTy/RPi77m/axjxdQTr/4dGBxu1Kbcf1U7crVW3d5dskfOmtXoMQ55KynVMewD7ZVfA5pY847s59WnENm5xEanshrS7aWOoc8TmFRER++MQQjI0Mu+t3R6Tnk/4NCLV9dJTTTK5K7dIn/Q83f/rKqs1ApgR/PVT6vv+bTKsxJ5YVPeVP53OuV6l0uft+qyqXrsLJXRFQXp3e+rnzeam71LhP/L1VlUhjXpApzUnn6NYKVzztM/qIKc1I5F9bOUz5vNa+a719fqPav9lOrb5kAXPxNVS5P0rHY7evqWy5hs1Vl8iTtXx0nLK/CnFSe7/rXlM8b/L60CnNSeXcmqpbuq87H45LH4m5Dq2//C+DUn6o+mPuS6lsmALcWqsqlOp97lTzv6j7wsyrMSeWd3PuG8nnn0dX7WHx2i+pY3GFS9W4jL6xTtZFdh39ehTmpnNM75ld1Fv6zFl0fWtVZKGORx59VnQWtkzW4hRBCCCGEEEIIIYQQQlRLskSJEEIIIYQQQgghhBBCaNmDIplb/DjItyyEEEIIIYQQQgghhBCiWpIBbiGEEEIIIYQQQgghhBDVkixRIoQQQgghhBBCCCGEEFpWWKRX1Vn4vyAzuIUQQgghhBBCCCGEEEJUSzLALYQQQgghhBBCCCGEEKJakiVKhBBCCCGEEEIIIYQQQsseyNzix0K+ZSGEEEIIIYQQQgghhBDVkszgFkIIIYQQQgghhBBCCC2Tm0w+HjKDWwghhBBCCCGEEEIIIUS1JAPcQgghhBBCCCGEEEIIIaolWaJECCGEEEIIIYQQQgghtKxQ5hY/FvItCyGEEEIIIYQQQgghhKiWZIBbCCGEEEIIIYQQQgghRLWkV1RUVFTVmRBCCCGEEEIIIYQQQognyVy/cVWdhTK+9PqjqrOgdTKDWwghhBBCCCGEEEIIIUS1JAPcQgghhBBCCCGEEEIIIaolw6rOgBBVodnCL6s6C5UStGSu8nmXkZ9XYU4q78y2+crnjT6r3uUS8oaqXHwOvVWFOamc8099onze4LvlVZiTyrvz8mvK5x0mf1GFOam8C2vnKZ8XxjWpwpxUjn6NYOVzty+rd5mEzVWVSaPNH1ZhTiovZMy7yuduGz6uwpxUXtgzbyufe75afduVa9+o2pT6qz+rwpxUXvi0N5TP639fvfst4S+q+i0+46t3G3l+o6qNbLi8+h6PQ19THYvrraredSViuqquPEnnKw2+rb515c4rqnrS4PelVZiTyrszcYHyef11n1SQ8r8vfJLqXKv+2k+rMCeVFz75TeXzVrsXVmFOKsd/8JKqzsJ/VmGRXlVn4f+CzOAWQgghhBBCCCGEEEIIUS3JALcQQgghhBBCCCGEEEKIakmWKBFCCCGEEEIIIYQQQggtKyySucWPg3zLQgghhBBCCCGEEEIIIaolGeAWQgghhBBCCCGEEEIIUS3JEiVCCCGEEEIIIYQQQgihZQ/Qq+os/F+QGdxCCCGEEEIIIYQQQgghNFqxYgX169fH1NSUDh06cPHixQrTp6Wl8dJLL+Hq6oqJiQlNmjRh3759OsufzOAWQgghhBBCCCGEEEIIUcamTZuYN28eP/74Ix06dOCrr76iX79+3Lp1C2dn5zLp8/Ly6Nu3L87OzmzdupVatWoRERGBra2tzvIoA9xCCCGEEEIIIYQQQgihZYVF1X+Jki+++IKZM2cybdo0AH788Uf27t3LqlWreOutt8qkX7VqFSkpKZw7dw4jIyMA6tevr9M8yhIlQgghhBBCCCGEEEII8X8gNzeXjIwMtUdubq7GtHl5eVy+fJk+ffooX9PX16dPnz6cP39e43t27dqFj48PL730Ei4uLnh4ePDxxx/z4MEDncQDMsAthBBCCCGEEEIIIYQQ/xeWLl2KjY2N2mPp0qUa0yYlJfHgwQNcXFzUXndxcSEuLk7je8LCwti6dSsPHjxg3759vPfeeyxfvpwPP/xQ67E8JEuUCCGEEEIIIYQQQgghhJYVFv335hYvWLCAefPmqb1mYmKite0XFhbi7OzMzz//jIGBAW3atCE6Opply5bx/vvva+1zSpIBbqEUFxfHRx99xN69e4mOjsbZ2RkvLy/mzJlD7969qzp7VeaZ9p5M79wGR0sLbsYn8tHe4wREx5ebvl+LxrzaqxO1bK2JSElj+aHTnLodrvz/vs0aMbZdK1rUdMbW3Izh3//OzbjExxCJwoxxnRncpyVW5iYE3Irh858Pczc2rdz0E4e3p3vHJtSrZU9uXgEBt6L5Yd0pomJSlWnsbc15cXJ32rWqj7mZMZExKazd5stJ39s6i2Nia0+ebd8GJwsLghISWXLkOP5xmsulsYMDs7v44FHDmdo2Nnx49AS/Xb5aqW1qy8g6HZlQvzv2xpaEZMbyRdAuAjPu/u37+tRoxQetnuFkwg3e8lunMc0bzYYxvE5Hvrq5m02RZ7Wd9TImtfTiudZtcTK3ICgpkUWnjnEtQfMvuo3tHZjboRMtnVyobW3DktPHWX3tilqa05Ofpba1TZn3rvP3Y+GpozqJoaTnRnRiaA8PLM1N8b8dzWe/HSUqPq3c9FMGtaNH28bUc7UnN7+AgNsxfLfpNJFxirpibWHKzBE+dPCoh4uDNWn3sjl5OZSftp0lKydP6/m/dA1WbYQbwZCYrMe3HxbRp2vF77l4FT5ZASHh4OoML0yC4U+rp1m/A1b9AUkp0LQhvDMbWjXTevbLmOTpycw2bRX1MzGRRceP4x9fzv7l4MBcn054OCvq/AcnjrP6qnqdn9WuHf0aNcbN3p77BQVciYnh0zOnuZOaqnGb2jSxURuedffBydSSoLR4llw9iH9KjMa0T9VyZ1azztSztMdQX5/weymsCr7AzogAAAz19Jnbsgc9ajSijqUt9/JzORd/h2X+x0i4n6nzWCY1bsPMZh1wMrMkKDWeRZcP4Z8cqzHt2IZejGjQkia2jgBcT4lj2bUTaukdTS14w6snXWs0wNrYlIsJkSy+fIjwe7ovF4AXB/gwwqclVmYm+N2J4aPNR4lMTCs3vXfDWkzt3ZZmdZxxtrFkzi+7OB4Qqpamd6tGjO7SimZ1nLG1MGPMp79zK1p37f6kpq153qM9TmYWBKUm8L7vEa4laa4r45q0YkTDFrjbOQEQkBzHssunyk3/kc9TTGjqxZILR1kVeFlnMTw0ycOL573aKdqV5ETeP320/HbFzoF57Tur2pUzx1jlr96u6OvpMaddJ4Y3aY6TuTnxWVlsvXmdby/76jwWgJmjOjGkV0usLEzwvxXDZ6uOcDcurdz0k4e2p3u7xtSrWdwHC47h+42niIxV1YcV743Bu3kdtfftOHKNz1Ye0UkME708mdlWdSxefOw4/uXM3mrs4MCcTp3wcCk+Fh8/zm9X1I/F7WrVYma7tni4uOBiackLf/7J4ZBQjdvTtsnNWvNcybpyvuK6MrKRel357C/1ujKndWcGN2hKTQsr8gsLi+vTafwSNR8TtUnb5ysAr/TyYXSblliZmnA1MobFu48SkZKm20Ao7k96l+pPltfeP+xPOhfX+1Nl+5MALhaWvNWpK93rNcDMyJDwtDTeOHqQgATd9fMnNfHmueYP28cEFl06xLVy2sdxjTwZ4daSJjaK9jEgJY7P/U6qpTc3NOLN1j3pW7sxdiZmRGWm89utv9hwu+w5jS5ieb5FB1VduXj4b2LxwN3WSRnLsqvqsYRPKrteL8DHl4/xc+BF7QdQwiT31qpYUhJ4/+KR8mNp7MkItxbqsVw5VSZ9QxsH3vLuTgeXuhjq6XE7PZlZJ3cQk3VPZ3GMrd+eqQ0742hiSXBGPEuv7+V6WrTGtL1rNOPZxt2oY2GPkZ4BEVnJrA07x56715Rp7I0tmNv8KXycGmJlZMqV5AiWXt9LZFaKzmIQVcvExOSRB7QdHR0xMDAgPl79mBkfH0+NGjU0vsfV1RUjIyMMDAyUrzVr1oy4uDjy8vIwNjb+95kvx3/vZwRRJcLDw2nTpg3Hjh1j2bJlBAQEcODAAXr27MlLL71U1dmrUFFREQUFBTrZ9tMeTXizfzdWnPBl5I/ruRWXxC+TR2BvYaYxvVcdVz4fNYBtV64z4of1HA0K4dvxQ2js7KBMY2ZsxJXIaJYfOqOTPFdkwrD2jBrQms9/OsxzC9aTcz+fL94bhbGRQbnvad2iDtsPXOX5BeuZu3gLhgYGfLlwNKYmRso0774ygLo17Xnrkx1Mmfcbp3xvs2TeYBo3KHs3XW0Y0LQJb/fsxrdnfRm6Zj03E5NYPWYE9uaay8XUyJCo9HSWnTxDQmaWVrapDb1dWvGq+yBWhh5hqu+33L4Xy5dtZmBnbFHh+2qY2vFKk4FcTb1Tbpruzi1oYVOXxPvp2s62RgMbufNOl+58fek8gzatIyg5kTVDRuJgpvn7MzNUlMmn50+TkKV5EG7o5vW0W/WD8jFx5xYA9obe0lkcD00a2I4xfb349LejzFi8gfu5+Xz9+oiK60rTOmw94seMJRt59dOtGBro880bIzE1VvyW7GhrgZOtJd9sPMUzb69hyc8H8WlVn3dnPKWTGHJywL0RvDfn0dLfjYUX3oIOrWHHrzB5FLy3DM6UOM/Ydww+XQEvTYFtv4B7Q5g5H5J1PPY4sEkT3u7WnW98fRm8/neCkhJZM2JEhftXZHo6n505U+7+1b52HdZd82PkHxuZvG0rRvr6rB0xEjND3f72P6BOc9727Mu3N04z9PCv3EyLZ3W38dibmGtMn553n++DzjL66GoGHfyFbeHX+KTdYLq6uAFgamhEC9sarAhUbO+ls1tpYOXAT13G6DQOgIF1m/G2d2++uX6GwftXEZSWwJqe43AoJ5aOLnXZHXGDZ46sZ+ShtcRmZbC253hczCyVaX7sNpK6lrY8f2org/avJDorg3W9nsHMwEjjNrVpWp+2jO/mxYebjzDxi43k5OXzw6wRGBuWX+/NjI24FZ3I0i3Hyk9jYsTVsGi+2qX7dn9Qg6a8274nX/udZeCuNQSmJLL2qTE4mJZTJjXqsutOEOMP/MGIvb8Tm3WPdU+NwcXcskzafnUb09rJlTgdnrCXNKiRO+927sHXf51n4JZ1BCYlsHbQKBzMNMdiZmREZEY6n/qeKrfev9C6PRNbeLLw9FH6bFzNJ+dP8Xzr9kxt2VqXoQAwcXA7RvdvzWcrjzDjvQ3k5Obz1VsjK25XmtVm2yE/Zi7cwOyPt2JoqM9XC0ZhaqJ+nNp51J+BL/ygfHy34ZROYhjo3oS3u3fnm/O+DFn3OzcTE/ltZPnHYtPitn7Z6TMkZGouE3MjI24mJrLoaPl1SBdK1pVBu9YQlJLIun7l1xUf17rsCgti3P4/GL7nd2Iy77Gun3pduZOewkLfIzy1czUj967n7r0M1vUbg72p7vqSoJvzlWe7tGViBy8W7T7C2J83kp2Xzy+TKz4easPAxu6807U7X188z6A/1ina+7/rT2ak8+m58vuT1iYmbB01jvzCQqbt3k7f9b/x8ZmTpN+/r7s46jXjnTa9+dr/DIP2rSIoNZ41vcaW2z52cKnHrvBAxh/ZwIiDa4nNvsfa3uPU2sd32/SmW0035p7bTZ/dv7D65iUWt3uKPrUb6SwOgEH1mvJu21587X+GgXtXE5iawNreYytuV8IDGX94AyMOKNr6dX3GqsXSbsu3ao/Xz+2lsKiI/ZG67eMPql8cy7WzDNzzmyKWPhW0kS512BUexPhDGxmxf52ijew7Ri2Wupa2bO0/gdD0FMYf2kD/3av51v8cuTpcZ7hfTQ9eb96fH4NPMPbUj9zKiOPHDpOxL+ccMj0/h19un2LSmV8YeXIFf0ZdZYnnMDo5qfadr9s9Q21zO2Zf3MDYkz8Qk5PGzx2nPpb+l/jvMzY2pk2bNhw9qppkVlhYyNGjR/Hx8dH4ns6dOxMSEkJhYaHyteDgYFxdXXUyuA0ywC2Kvfjii+jp6XHx4kVGjhxJkyZNaNGiBfPmzcPXVzGrJTIykqFDh2JpaYm1tTVjxoxR+wVn0aJFeHl58dNPP1GnTh3Mzc0ZM2YM6emqAbapU6cybNgwFi9ejJOTE9bW1rzwwgvk5almLxYWFrJ06VIaNGiAmZkZnp6ebN26Vfn/J06cQE9Pj/3799OmTRtMTEw4c0Y3J41TOnmz5fJ1dlwNJDQxhUW7j3A/v4AR3h4a00/u2JozIeGsOnuZsKQUvjl2nqDYBJ7p4KVMs+taEN+fuMC5sEid5Lkiowd5s3arL2cuhRIakcSH3+7Dwc6Sru3L7xi99uE29h+/wZ2oZEIiEvn4u/3UcLLGvaFq/SUP95ps23+VoJA4YuLTWbPNl8zsXNzdXMrdbmVMb+vNJv/rbLseSEhyCu8dPEJOfgGjW2oul4C4eD49cZq9N4PJe6D5x5B/uk1tGF+/C7vuXmRvzGXCsxL4LHAnuQ/yGFSzbbnv0UePxS3H8mvoYWKyNf+i7mRizbymQ1gU8AcFRYUa02jbs15t2HQjgK1BNwhJTeGd44fJKchndLOWGtP7J8Sz9Nwp9ty+RV45HcCU+zkkZWcrH73quxGelsqF6L+f4V5Z4/q1ZvWuC5y6EkpIVBKLfjqAo60l3b3LrytzPt/O3jOB3IlO5nZUEkt+OYirozVNGyjqQVh0Mm99u5szfmFEJ6RzOSiKH7acoUtrNwz0tX9n7W4dYc6z0Lfbo6X/40+o5QpvvgQN68OEEfBUd1izRZVmzWYYPQhGDIBG9WHRa2BqCtv3aT37amZ4t2HT9etsDbxBSEoK7x45Qk5BAaM9NNdP//h4Pjl9ij3Bt8gr0Lx/TduxnW2BgdxOTuZmUhKvHzpILWtrPFx0c9x6aHqTDmwKu8q28GuEZCTx3uV9irrSwEtj+guJERyOvkXovWQis1JZc/sSt9LjaeOkmLGZmZ/L1FMb2Hc3iDv3UvBLiWbxlQO0tK+Jq7m1TmOZ0bQ9m0L92BrmT0hGEu9e3K8ol4aeGtPPPbeL329fISgtgbCMZN66uA89PT061agPQAMre7wda/PepQP4p8Ry514K713aj4mBIYPrN9dpLAATunvzy6GLnAgI43ZMEu+uO4CTjQW9WjUs9z1ng8JZsfccx/zLn3G651IQPx24wIVbum/3n23Rlj+C/dkScp2Q9GTeOXeQnIJ8xjTWfCyec2oPv9/0IzAlgdD0FN48ewA9PT06u9ZTS+dibsmijn2YfWoPBYWPqV3xbMsfgQFsuXmdkNRk3jmpaFfGNC2n3ifEsfT8SXaHlN+utKlRk8PhoRyPCOPuvQz2hwVzOiocTxdXXYYCwNinvfltxwVOXw4lNDKJJd/vx9HOkm5ty29X5n6ynX2nbnDnbjIhkYl8+MMBXJ1U7cpDuXn5pKRnKx/ZOrgqCGB6mzZsCrjOthvFx+LDir7SqPL6X/HxfHLqFHtulV8mJ8PD+eLsOQ6FhOgkz+V51qMtf9zyZ8vt69xOS+bts8V1pYnmujL75B7Wlaor+np6dK6pqit/hgVxNiaCqHvp3E5L5oOLx7A2NqFZ8axvXdHF+cpkH29+PHWRYzfDCI5P4q3tB3C2sqBP0/KPh9pQbn+yeQX9ybMV9ydfaNOe2Mx7vHH0INfi47ibkcHpqAgiM3Q3CeTZZu3ZFHKNrWEBimPxhQPkPChgdKNWGtPPPbuL34OvEJSaQFhGCm/57kMPPToXt48A3k612R4WwIX4SKKz0tkY4kdQajyeDjV1FgfAs83b88fta2wJLY7F9wA5D/IZ01BzLHPO7Ob34KsEpiYQmpHCm777FbG4qmJJvJ+l9uhbpzHn4yKIytTtxJxnm7UrFctBRSyNymkjz+zh91slYjn/MBZVvX+9dTeO3w3lkysnuJGSQGRmGkfuhpB8P1tncUx268S2yMv8GXWVsMxEPvDfTc6DfIbV9daY/q/kcI7FBXEnM4m72amsv+PL7XvxtLavC0A9Cwc87evwof9ubqTHEJ6VzIf+ezA1MOTpWpq/G/HPFKL3n3v8U/PmzeOXX35hzZo1BAUFMWvWLLKyspg2bRoAkydPZsGCBcr0s2bNIiUlhdmzZxMcHMzevXv5+OOPdTqBVga4BSkpKRw4cICXXnoJC4uyv/rZ2tpSWFjI0KFDSUlJ4eTJkxw+fJiwsDDGjh2rljYkJITNmzeze/duDhw4wNWrV3nxxRfV0hw9epSgoCBOnDjBxo0b2b59O4sXL1b+/9KlS1m7di0//vgjN27cYO7cuUycOJGTJ0+qbeett97ik08+ISgoiFatNDewlWFkoE8LVxfOh6pOSIuK4HxoJF61NZ8IedZx5XypgeszIRF41dH9idPfqelig6OdJZf8I5SvZWXnEXg7Fg/3R+8YWZgrLmPJuKea9XD9Vgy9OrljZWmKnh707uyOsZEhV29EaS+AYkb6+njUcOFseIlyAc5FRNK65r/7nnWxzb9jqGeAu1UtLiWrTuiKKOJSSggetvXKfd/0hr1Jzctid/RfGv9fDz0WthzL+vBT3MlK0Hq+NTHS18fD2YUzUerf39m7kXjX0M73Z6SvzzD35mwJuq6V7VWkppMNjraWXLyhiicrJ48bYXG0bPTo8ViaFdeVzPJnCFmam5CVk8eDwqJ/n2Et8bsBPm3UX+vSTvE6QF6+YrmTkmn09RV/P0yjC0b6+ni4uHA2UnXsKgLORkbQ2lV79dPKWFFeupzRZaSvj4edK2fjVVdfFAHnEsJp7VDrkbbh41yfBlYOXEosf7DUysiUwqIi7uXpOBZ7V87GhStfKwLOxt2hteOjxWJmYISRnj7puYp8GusrZgbmlvghsgjIe/CAtk51NG1Ca2o52OBkY6E2CJ15P4+AiDha1dft4IG2GOnr4+FQg7Mx4crXioCzsRF4Oz9aDGYGRhjp65OWq9p39IAvuw3k5+sXuZ2WrN1Ml8NIXx8PJxfO3i1V7+9G4l3j35fH5bgYOteqSwMbOwCaOTjR1rUWJyLKvyJKG2o6F/fBrpfog+XkERgai0fjR4/H0lxzu/JU52bs//lFfv9sCrPGdcHEWPtXojw8Fp8rdSw+p+Vj8eNgpK9PS4canClVV87ERODt9O/rSunPeMbdk/Tc+wSm6G5JIl2cr9S2s8HJykJtm5m5efhHx+FZR3fHw3L7k1GV60/2adAQ//h4VvQfxKUZs9gzbhLjWuhu0E7RPtbgTKx6W382Nhzvf9I+6uuTVqIdv5J4l961GytnD3d0qUsDa3tOx+ru+PUwljJtfWw43k7/MJbcHI3/72hqTs9aDdkU4q+FHJdP2UbGlmpX/lUsinLRA3rWduNORipr+4zhr9Evs/PpSTxVp7EOIlAw1DOgmY0rvkmqH9aLKOJCUiiedrUfaRsdHN2ob+HI5WTFd6HsfxWW7H8VkVf4gNb25Z+Xiv8vY8eO5fPPP2fhwoV4eXnh5+fHgQMHlDeejIyMJDZWtXxPnTp1OHjwIJcuXaJVq1a8+uqrzJ49m7fe0rxEkTbIGtyCkJAQioqKaNq0ablpjh49SkBAAHfu3KFOHcVJ5tq1a2nRogWXLl2iXbt2ANy/f5+1a9dSq5aikfj2228ZOHAgy5cvV67NY2xszKpVqzA3N6dFixYsWbKE119/nQ8++ID8/Hw+/vhjjhw5orzUwc3NjTNnzvDTTz/RvXt3ZZ6WLFlC3759dfKdANiam2FooE9ylvqvr8lZ2TRwstP4HkdLC5IyS6XPzMLRUvNlT4+Tva3ix4vUNPX8paZnK//v7+jpwavTeuIfdJc7UUnK1xcu383i1waxf83LFBQ84H5uAW9/tpPoCtaV/LfszM0w1NcnOVs9jqSsbNzsNZdLVWzz79gam2Oob0BKnvrllCm5mdSz0DzTp5VtPQbXasfk81+Xu91JDbrzoPABmx/DmtsP2Zkpvr+kHPXlX5Kys2loa6+Vz3jKrZHiEtObOhxJLeZgo6ivKenq+0NKetY/qitzJ/bgWnA0YdGaB4RsLE2ZPrQjO08EVC7DWpKUAo6ldncHe8jM0uN+bhEZ9+DBAz0c7NQH4x3s4I4OJ6Yq96/S9TM7m4Z22tm/9ID3evTgr+hogpN1N4BnZ2yuONbklqor9zNxs3Io511gaWTC2UGzMTYwoLCoiPev7FcbJC/JWN+AN1r1YnfkDTILdDOLE8DORBFL0v3SsWTR0Lr8WEp606sn8TmZnIlTxBKakUx0Vjqve/bknYv7yXmQx3T39tS0sMbZrOySGdrkaK2o98n3SrXh97KV//dfpyyTHPUYEnOyaGjzaHXlrbbdic/O5GxsuPK1WS07UFBYyOrHsOb2Q3amD+u9+v6VmJNVqXr/w5ULWBkbc/SZ6TwoLMRAX5/PL5zmz9tBlc1yhRxsFG1H2XYlG4d/0K7MmdyDazejCburOk4dOhtEXFIGSalZNKzryEvju1HX1Z4FX+7SXgCUOBZnlT0Wu9lr51j8uJRXV5Jysh6537KgXXFdKTFIDtCrTkO+6zEYM0MjErIzmXhwM6nlDOxpgy7OVx7+m1wqTVJmNk46PKdRtfca+pOVqPd1rW2Y2NKTX/0us+Kvi3i6uPB+t57kPXjA9puBlc12Gar2sdT3dz+LhjaP2D62Lm4fSwxeL7p0mI87PI3vyFfIL3xAYVERb/vu52KC9icUPaSqK6WOxf8glre8exCfo96ulDTSrSVZ+Xkc1PHyJOXGkpP9yP2Wt9p0V4vF0dQCSyMTZnl0YLnfaT65fILutRrwY4/hjD+0kQvx2i8bu+JzyNJ9yeTcLBpYln+1iKWhCUf6zsdI35DCokI+CtijHCS/k5lETHYas5v1ZYn/LnIK8pnk5kMNMxscTay0HsP/owdF2r9atyq8/PLLvPzyyxr/78SJE2Ve8/HxUa4I8TjIALegqOjvZw4GBQVRp04d5eA2QPPmzbG1tSUoKEg5wF23bl3l4DYodujCwkJu3bqlHOD29PTE3NxcLU1mZiZRUVFkZmaSnZ1dZuA6Ly+P1q3V10ds27b8ZRwAcnNzyc3NVXvtnyykX9317dqM159XfY9vfLy90tucN7MPbnUdefGdjWqvPzu+M1bmpsxetJn0jBy6tm/EktcG89K7fxAWmVTO1sQ/YW5gzPstx7I0cBvp+ZoveXO3qsWYup2Z6vvNY86d7o1p3pKTEXdIyNK8hnpl9PNpylvT+ij/nrd8Z6W3+frk3rjVcuD5Dzdp/H8LU2O+eG04d6KT+WXH+Up/nqicJb1608TBgTGbNZdXVcvKz2XI4V8wNzSmk3N93vbsS1RmGhcSI9TSGerp863PSPT04P3LOl43ppJeaO7DoHrNeebo7+QVKi4rLygqZNapbXzScSB+o+dRUFjI2bg7nIgJgX9xKWVFBrRtyntjVTfQfvmnnVrdfnU0q2UHBrs1Zdz+P5Rrh3o4uDCteRsG7lpbxbnTjkGN3BnapBmzD+8hOCWZ5o7OLOzSk/isLLbd0t4PqE91bsqbz6r6YPM/21Hpbc6f1hu3Oo48v+gPtdf/PKb6kTQ0KonktCy+e3cMtZxtiE54PPfh+H8zq5Wirozd90eZdXbPx0by9M7fsDc1Y7y7J9/3HMLQ3b/rdLkCUTE9PT0CEuL5/LxiScvApASaODgywcNTJwPclfVCi44Mrt+M8YfXK9tHgCnubWjtVJNnj28hOiud9s51Wdz+KcWAa4kZ1v8ls4pjGXdoA7mFmpeQGdOoFTvvBJb7//8Vszw6KGI5uFGZVz09Rd/k8N0QVgYprq4NTE3A26kWE5p46WSA+9/KKshj9MkfMDc0poOjG/Nb9Odudip/JYdTUFTI3L82sthzGGf7v01B4QMuJIVxOj5YGaMQ1YEMcAsaN26Mnp4eN2/erOqskFl8A5q9e/eqDZQDZQamNS2nUtLSpUvVlj4BeP/991m0aNEj5SUtO4eCB4U4WKjPVHCwMCfpnuZOapKG2doOGmZJPA5nLoUQeFt1icjDmxjZ2ZqTnKYaJLSzMSck/O+Xspj7bG86tXHj5fc2kZiimnVc08WGUQO8mTRnNXeiFDOKQiIS8WxemxH9vfj85yPaCgmA1OwcCgoLcTBX/54dLczLzCqqym3+nbS8bAoKH2BvrD4r0d7EkuTcsjfJqWXuQE0ze5Z5TVG+pl/c4Tjd5yPGnV2Ol1197Iwt2NFVddmPob4Br7gPZGy9Low4/alOYknNUXx/jmbqddLR3JzE7MoPSNeysqJz7brM2q/d2WgPnb4ayo3QOOXfRsV1xd7GnOR0Vf7tbSy4HfH3dWX+pF508XLj+Y82kZBatizNTY346vURZN/P481vdvHgweNZz/bvONpDUqmbRSangKVFEaYmiuVIDAyKytxQMjlV8V5dUe5fpeunlvavRT170dPNjXGbNxFXzk3QtCU1L1txrDEpVVdMLUm6X/5nFwERmYovPigtnobWjrzQrJPaALehnj7f+IygpoUNk078rtPZ2wCpuYpYHE1Lx2JB4v2Ky+XZph14obkPk45t4Gaa+qX711PjGLR/JVZGJhjpG5CSm832p6YQkBJXztb+nRMBoQSEl2gji28u6mBlTlKGKv8OVubcuqu75QW0SVkmpW7C6GRmQWJOxWUy06Mds1p2YMLBzdxMVcXb3qU2DmYWnBvzgvI1Q3193mnXk+nN29Jl60/aDaJY6v2H9V59/3Iys6hUvV/QqTs/XLnI7hDFTMFbKUnUsrLmRe/2Wh3gPnM5lMCQctqVtJLtijnB4X+/f702tRedvRsya/Efan0wTW6EKPbr2jVstTrArTwWW2g4Fuvgx2ddKq+uOD7C/vXcw7pyQL2uPJRTkE/EvTQi7qVxNTGWEyNnMrZJS773v6DVGB7SxfnKw38dLM1JLHFzdkdLc4JidXc8VLX32u1PJmZlEZKifnVWSEoK/RvqZhkJVftYav8ytSAxp+L6O7NZe2a18GHikY1q7aOJgSHzvXrwwqltHI9WzLq9mZZIc3tnZjbvoLMBblVdKXUsNn2EdqV5e2Z5dGTC4T/KtPUPtXOuTUMbB14+/afW8lyecmMxM//bfosqlk1qsaTmZpNf+IDbaeoTukLTk2nr/GjLhfxTqcXnkKX7kg4mFiTlln8T6CKKiCq+f9OtjDjcLJ2Y0agbfyWHAxCUHsuYUz9gaajof6XmZbO+y3PcSIvWSRxC6IKswS2wt7enX79+rFixgiwNHdS0tDSaNWtGVFQUUVGqXyEDAwNJS0ujeXPVjZ8iIyOJiYlR/u3r64u+vj7u7u7K165du0ZOTo5aGktLS+rUqUPz5s0xMTEhMjKSRo0aqT1Kzh5/FAsWLCA9PV3tUXLR+7+T/6CQG7HxdHRTfa6eHnR0q4Pf3ViN77kWFUtHt7pqr3VqWBe/KM3pdSnnfj7RcWnKx52oZJJSM2nbUrWOlrmZMc0bu3L9VkwFW1IMbndr34jZizYTW+pkydREcWflwlJrCD8oLERfBzfOyy8s5HpcPJ3qlSgXoFO9OlyN+Xffsy62+XcKih5w6140bR1UN5fSQ4+29o24nhZRJn1EViITzn3JFN9vlI/TiUFcSQljiu83xN9PZ3/sVSad/1otTeL9dNaHn2LO5ZU6iQOKv7+EeDrXUe37ekCn2nW5Elf5729UMw+Sc7I5Fh5W6W1pkn0/n7sJacrHnehkktIyaddcFY+FqTEt3GoQEFJxPPMn9aJ7m0a89MkWYpMyyvy/hakx37wxkvyCB8z/8k/y8v87s1W8WoBvqRUIzv2leB3A2AhaNFFPU1gIvldUaXQhv7CQ6/HxdCq9f9Wpy9XYyu1fi3r24qlGjZi4dQt3M8qWl7blFxZyPTWWTi4NlK/pAZ2c63M1+dFPIPT09DDWV81ReDi4Xd/Knikn15OWp7vL4R/KLyzkekosnVzqq/IFdKpRn6tJ5cfyXLOOvOLRmanH/6hw0Ppefi4pudnUt7Kjpb0rh+8GazH3kJ2bT1RSuvIRGpdMYnoWHZqo2gELU2Na1quBf3jFbeR/RX5hIdeT4+hU4uZXekAn13pcSSg/huc92vOKZyemHN5CQLJ6mWwPvUH/nasZ8Odvykdc1j1+vn6RyYe2lLPFyssvLOR6YjydamlqV/59eZgZGpW5crGwqFDrM9Sy7+dzNz5N+bhzt7gP5qGKx9zMmOYNXbl+u+J4Xpvai+7tGvHyh5uJTfz741STes4AJKVpd9BZeSyuq14mPnUrfyx+3PILCwlIjlO7QaQe0LlmPa4kVlBXWrbnFa9OTDlUtq6UR18PjA10N6dMF+crd1PTSbyXpbZNCxNjWtWqwbUo3R0Plf3J2mXb+8r0J/+KjcbNTn25lga2dkTfK38wsDIU7WOc2g0iFe1jPa5U0D4+37wDL7fszJRjm8q0j0b6+splykp6UFSEvpavcCrpYSydNMWSWHEsr7TsxJSjmyts68c28sQ/OZagVN3fN6jcNrJG/YpjadGeV1p1YsqRsvU+v7AQ/6Q43KzVZ3o0sLYnOks3/cqCogcEpcfSwdFN+ZoeenRwdONa6t1H3o6iL2lQ5vXMglxS87Kpa2FPc9uaHI+v+kmQT4LCIv3/3ONJJDO4BQArVqygc+fOtG/fniVLltCqVSsKCgo4fPgwP/zwA4GBgbRs2ZIJEybw1VdfUVBQwIsvvkj37t3VlgoxNTVlypQpfP7552RkZPDqq68yZswY5fIkoFhuZMaMGbz77ruEh4fz/vvv8/LLL6Ovr4+VlRXz589n7ty5FBYW0qVLF9LT0zl79izW1tZMmTJFU/Y10sZyJGvOXWHp8H5cj0kg4G4ck31aY2ZsxI4rilk+n4zoR3xGJl8eUax3vNb3Kmunj2ZqJ29OBt9hQEt3WtR04f1dqlnMNmYmuNpY42yl+NW1QfGit0mZWTqf6b1lzxWmjOpIVGwqsQnpPDu+M8mpmZy+qLrR4Vfvj+bUxRC2778KwGsz+9Cna1MWfLKT7Jw87G0VsxEys/PIyysgIjqFqNhUXn+hLyvWnCT9Xg7d2jemXav6vLG08suiaLLqryssG9CPgLgE/GPjmNq2NWZGRmwNUJTLsgH9iM/M5PNTinIx0tenkaNibTUjAwNcrCxp5uxEdl4eEWnpj7RNXdgYfob3PEZzM+MuN9KjGFe3C6YGxuyJUYwgLvQYQ+L9dH4IOUheYQFhmfFq78/MV9zg5OHrGfnZZJRavqSgqJCU3HtEZut2qZhf/S6zvE9//BPiuBYfx3RPb8wNjdhafFPI5X36E5eVybLiy0ON9PVpZK8qkxoWljRzdCI7P5+I9DTldvWA0U092HYzkAePsJyStvxx8CrThnYgKj6VmMQMnh/ZiaS0TE5eUdWV794cxYnLIWw94gfA61N60a9jU17/ahdZ9/OwL17LOys7j9z8AuXgtomxIe//uB8LM2MszIwBSMvIKXPSUllZ2RBZor9+NxaCboONNdR0gS9+hvhE+PQdxf+PGwobdsCyH2DkAMXA9YET8OMnqm1MGQMLloJHU2jZFNZuhZwcGP60VrNexsorl/m8X38CEuK5FhfHtNbemBsZsfWGon5+3q8/8ZmZLDtbYv9yKFHnLa1o5uREdp5q/1rSqxdD3Jvy3K5dZOblKWeI38vNU7vJobatCr7AsvZDCEiJxT8lmqlNOmBmaMTWO9cAWNZ+CPE59/g84DgALzTtREBqLJGZqRjrG9DDtRHD6rXk/cv7AcXg9nedRtLCzpWZp/9AX09POas6PS+H/ELdXSGw8uZFPvcZTEBKLNeSY5jm3l5R78MUN4r63Gcw8dn3WHbtBADPN+vInFbdmHvuT+5mpSvzmV2QR3ZBPgBP12lKSm42MVkZuNs6sbBNXw7fDVau061L609eYWa/DkQkphGdnM5LAzuRmJ7FMX/VjZx+fmkkx/xD+OO0orzMjI2o62Sr/P9aDta413IiPfs+camKwRNrcxNc7axxKl6Hub5zcbufkVVmze/K+vXGXyzvMoCA5Dj8EmOZ0aIt5oZGbLmtWMZiedcBxGdn8tnlUwC80LI9c1t3YfbJPdzNzMCpeGZbVr6iTNJy75e5iV5BYSGJOVmEZaRoNe9lYrn2F8t7PU1AYjx+CbHMaNVGEcvN4nal99PEZ2Xyme9pQFHvG9uVqPcWVjR3cCIrP5+IjDQAjoaH8lKbjkRn3uN2ShItHJ2Z4dn2sdzAeNP+K0wd1pGouDRiE9KZObozSamZnPpL1a58+84oTl4KYeshPwDmT+/NU52a8ubyPxV9sFLtSi1nG57q3IxzfmGk37tPo3pOzJ7Ug6tBUYTqYIm4VZcvs6x/fwLiio/F3sXH4uvFx+L+/YnLzOTzM5qPxTUeHovz84lISwPA3MiIera2ys+obW1DMycn0u7fJ1ZHA5AAv17/i+VdB+CfFMe1xFimP6wrwYq68kW3AcRlqdeVed5dmH1Cc10xMzTiZc+OHIkMISE7CztTM6Y0a42LuRV77+h2gEgX5ytrz1/hhe4diEhO425qOq/27kTCvSyO3AzVmAdtKdOf9CruTwYW1/u+in1MY39S34AalmX7k6v8LrN11HhebNuevbeD8XSpwXiPVrx97JDu4gi6yPJOg/BPieNaUgzTm7VTxBGqaB+XdxpEXPY9lvmdBOD55h2Z69mVOWd2cTezbPuYmZ+Hb3wEC7x7cf9BAdGZ6XRwqcuIBh58ePmozuIA+DXwIss7DyIgORa/pFhmNGuLuaExW0rEEp9zj8+uKmJ5oUUH5np2ZfaZ3dzNTMepOJasEm09gKWRMQPqufPRX8d0mn+1WIIusbzzQAKS4vBLfhiLEVtCitvIzgOJz77HZ1dPqWLx6sLs0+XH8vONC3zbbSgXE+5yPi6C7jXd6F27EeMObdBZHGvDzvGh13AC02IISLvLRDcfzAyM2Rl5BYCPvEYQfz+Db24q6vSMRl25kRZDVHYKxvoGdHVuwqDannwUsFu5zb6uLUjNyyI2J53GVi686fE0x+OCOJ+o2zovhDbJALcAFDdyvHLlCh999BGvvfYasbGxODk50aZNG3744Qf09PT4888/eeWVV+jWrRv6+vr079+fb7/9Vm07jRo1YsSIEQwYMICUlBQGDRrE999/r5amd+/eNG7cmG7dupGbm8v48ePVlg354IMPcHJyYunSpYSFhWFra4u3tzdvv/324/gq1Oy/HoyduRmv9vJRXJYXl8hz63Yob+TiamOlNijlFxXL61v3M7t3J+b26UxEchqvbNzF7QTVZXE93RuydEQ/5d9fjBkIwHfHz7PiuG4X4F+/8yKmpka88cJTWFqYEHAzmtc+2KY2i7RWDVtsrcyUfw/v76XI3wfj1Lb10Xf72X/8Bg8eFPL6R9t4YWI3Pl0wHDNTY6LjUvnou/34XtHNgMS+m8E4mJkxp4sPThbmBCYkMn3LDuVNImtaq5eLs6Ulu6dOVP49s31bZrZvy4XIKCb8sfWRtqkLR+P9sTO24NmGfXEwseL2vRjmXllFavGNJ11MbbU+6Kkre0Nu4WBmxrz2nXG0MCcoMZGpu7cpb+BU08pavUwsLNk3brLy7+e82/Gcdzt8o6MYv2Oz8vUudepRy9r6sQw+lLRu7yXMTIxYMK0vluYmXLsdzezPt6vXFWcbtboyqrcXAD++M0ZtW0t+PsDeM4G413fGo5ErANs/n6GWZti8XzXO+K6MG7dgyhzVrJ5PVyieD+tfxNIFkJgMsSUmzNR2VQxmf/IdrNsGNZzgg9ehS3tVmgG9IDUNvlmluClls0bw8zLdLlECsDc4GHszc+b6dMLRvHj/2rFdeePJmlZl6/zeiZOUfz/Xti3PtW2Lb1QUz2xVzDqd6OkFwB9j1Mvr9YMH2BaouzU590UF4mBizhyP7jiZWhCYFs/0UxuVNwuqaW6jFouZoTGLvZ+mhpkV9x8UEHYvidcu/Mm+KEUeXcys6FNLcZXUnn7PqX3WhOPryqzTrU17I4OwNzVnbqtuOJpaEJQaz9Tjm5Q3nqxprl7vJzT2xsTAkO+7jlTbztcBp/k6QDFI6WxmyTvefYqXOslk+50Avrt+RmcxlLT6yF+YGRuxcFwfrMxMuBoWw4s/bCevQFXvazvaYGupqvct6rqw8tXRyr9fH9EDgD8v3GDhesXgSQ+PhnwwUdXufzZN0e7/sP88P+7Xbru/585N7E3NmNu6C05mFgSlJDDl0Bblzc5qWVirzWCe6N4aEwNDfuw1TG07X109y1d+j+9mxZrsCbml2L/ad8bJ3JygpESm7NmqbFdqWarH4mJhyb6xqokQz7dux/OtFe3KuD8V6+u/f/oor7Xvwgfd+uBoZkZ8VhYbblzjm790fy+E33cr2pW3nlW0K/63opn7Sal2xcUWmxLtysi+XgB8v3Cs2rY++OEA+07dIL+gkHYt6zL2aW9MTYxISL7HiYu3Wb1DN/3JvbcUx+I5nVXH4mnbtiv7Sq4a+l97JquOxTPbtWVmO8WxeMJmxbG4pYsLG8aqjsPv9uwBwLbrN3jj4EGdxAGKuuJgasY8b0VdCUxJYHKJulLTQv34NbFpcV3pPUxtO19ePctXV89SWFRIIxsHRvXywM7UjLTc+1xLjGX0vg3cTtPdzYtBN+crv55RHA8XD+mDtakJVyJjeG6d+vFQF/beLu5PdijRn9xVoj9pqaE/OV5Df/Kuqj/pnxDPC/t28bpPF15t50NURjofnD7On8G6++Fhb0QQDibmzGvVFUczC4JSE5h6bHP5+1cTxf71Q/cRatv5yv80X/sr2sBXTv/JG6178FXnIdgamxKdlcHn106y/vZVncUBsCfipuJY7NlV0a6kJjDl2Cb1doWSsSja+h+7D1eP5doZvvJXteeD6zdDDz12hev2Jr8l7Qm/ib2JOXO9SrSRRzf/fRvZQ0Ms1xRt5MGo27xz4SAvenRkUbvehGWkMOvkDv5K0N3SHgdjrmNnbM6L7r1wNLHkVkYcsy6sIyVP0f+qYWZDYYkyMTMw5p2Wg3Axsyb3QT53MpN4++o2Dsaozq+cTC15vUV/HEwU/a/dd/34KfikzmIQQhf0ih7lDoNCPIJFixaxc+dO/Pz8yk0zdepU0tLS2Llz52PLlybNFn5ZpZ9fWUFL5iqfdxn5eRXmpPLObJuvfN7os+pdLiFvqMrF59BbFaT8bzv/lGrKboPvlldhTirvzsuvKZ93mPxFFeak8i6snad8XhjXpApzUjn6NVRLTbh9Wb3LJGyuqkwabf6wCnNSeSFj3lU+d9vwcRXmpPLCnlH9IO75avVtV659o2pT6q/+rApzUnnh095QPq//ffXut4S/qOq3+Iyv3m3k+Y2qNrLh8up7PA59TXUsrreqeteViOmquvIkna80+Lb61pU7r6jqSYPfl1ZhTirvzkTVcp31131SQcr/vvBJqnOt+mt1c5+hxyV88pvK5612L6zCnFSO/+AlVZ2F/6xJF56t6iyUsa7Dr1WdBa17MhdeEUIIIYQQQgghhBBCCPHEkwFuIYQQQgghhBBCCCGEENWSrMEttGbRokVqa2lr8ttvvz2WvAghhBBCCCGEEEIIUZUK0fv7RKLSZAa3EEIIIYQQQgghhBBCiGpJBriFEEIIIYQQQgghhBBCVEuyRIkQQgghhBBCCCGEEEJoWWGRLFHyOMgMbiGEEEIIIYQQQgghhBDVkgxwCyGEEEIIIYQQQgghhKiWZIkSIYQQQgghhBBCCCGE0LLCIplb/DjItyyEEEIIIYQQQgghhBCiWpIBbiGEEEIIIYQQQgghhBDVkixRIoQQQgghhBBCCCGEEFpWWKRX1Vn4vyAzuIUQQgghhBBCCCGEEEJUSzLALYQQQgghhBBCCCGEEKJakiVKhBBCCCGEEEIIIYQQQssKkSVKHge9oqKioqrOhBBCCCGEEEIIIYQQQjxJRp57saqzUMa2Tt9XdRa0TpYoEUIIIYQQQgghhBBCCFEtyRIlQgghhBBCCCGEEEIIoWWFRbJEyeMgA9zi/1Kz976s6ixUStAHc5XPWyyo3rHcWKqKpeni6h3LzfdVsbh99UUV5qRywubMUz6vznGAeiyt5lXv/cv/ixL715fVt1zC5qrKpDCuSRXmpPL0awQrn1fnMgH1cmn0afWuKyFvquqK+wfVN5Zb76niaPxJ9Y0D4PZbqliafFS9Ywl+RxVLy9eqdywBy5+8utLkw+obB0Dwu6pYnqTzlWYLq28sQUuezOPXk9Rvaby0epfL7QWqcmnw7fIqzEnl3HnltarOgvg/JwPcQgghhBBCCCGEEEIIoWUyg/vxkDW4hRBCCCGEEEIIIYQQQlRLMsAthBBCCCGEEEIIIYQQolqSJUqEEEIIIYQQQgghhBBCy2SJksdDZnALIYQQQgghhBBCCCGEqJZkgFsIIYQQQgghhBBCCCFEtSRLlAghhBBCCCGEEEIIIYSWyRIlj4fM4BZCCCGEEEIIIYQQQghRLckAtxBCCCGEEEIIIYQQQohqSZYoEUIIIYQQQgghhBBCCC0rRJYoeRxkBrcQQgghhBBCCCGEEEKIakkGuP9PnThxAj09PdLS0gD47bffsLW11dnn1a9fn6+++kpn2xdCCCGEEEIIIYQQQvz/kSVKnnDnz5+nS5cu9O/fn7179+rkM8LDw2nQoIHyb3t7e9q0acOnn35K69atdfKZVeGVXj6MbtsSK1MTrkbGsHjXUSJS0ip8zzPtPZnepQ2OlhbcjEvko73HCYiOV/6/saEBb/bvxoCW7hgZGHA2JIIlu4+RnJWtszhe7uPDqHYtsTIz4WpEDEt2HiUyueI4xnf0ZFo3RRy34hL5eNdxAu6q4nh/WG86NqqLs7Ul2bl5+EXG8sWB09xJTNVZHM+082RGJ9V3++H+4wTExJebvl/zxszu2YlattZEJKfx+ZHTnAoJV/7/y907MsDDnRrWVuQ/eMCN2AS+OnYW/+g4ncUAMKmVJzPbtsXJ3IKgpEQWHT+Of7zmz2xs78Bcn054uDhT29qGD04eZ/XVq2ppJrRqxYSWntSytgbgdkoy317w5WR4uE7jgCcrFoAX+/swsqOirvjdieHDrUeJTEqr8D1jO3sytWcbHK0sCI5JZOmO41yPVO2XDlbmzBvcDZ8mdbEwMSY8MYVfjlzkiH+IzuKY5OnJzDZtcbKwICjxb8rFobhcnJ2pbWPDByfKlsusdu3o16gxbvb23C8o4EpMDJ+eOc2dVN3V90vXYNVGuBEMicl6fPthEX26Vvyei1fhkxUQEg6uzvDCJBj+tHqa9Ttg1R+QlAJNG8I7s6FVM52FoaTtMpnQqhUTWpWoK8mPr65MbO3Jsx3aKGJJSGTJkeP4x5Z/LH7avTFzunaito014alpfHbiNCfDVPl0MDfnjR5d6FK/HtamJlyKimbxkeNEpKbpPJZn2noyw6cNTpYW3IxP5IMDFbcr/Zs1ZnYPRbsSnpLG50fV25WlQ55ihGcLtfecDgnn2Y07dBUCABO8VWVyMyGRJYcrLpP+7o2Z0624TFLSWFaqTMyNjJjfowt9GzfE1syMu+nprP3Lj41+/jqNA2BCG09mdCxRJoeO419RmTRtzJzuJcrk2GlOhoarpWnoYM/8Xl1oX7c2Bvr6hCYl8/K2PcRm3NNxNPBSP/V25YNtf9+ujOvsydQeinbl1sN2JUrxHdS0s+bguzM0vu+1NXs45H9b2yFovZ6UtHhAb8a1acXHB0+w5uJVjWm0aUKbUrEc/Jv9q1mp/euo+v71yeCydf5UqO7r/ENPyrnKM+09md65OE/xZfNUWr8WjXm1V3EfPyWN5YdOc+p2uPL/+zZrxNh2rWhR0xlbczOGf/87N+MSdZb/h56k49eT1G9RtpGWxW3kob9pI5tqaCNLlMvtBXM1vu/TY6f49cJlbWdfaVJLL57zLnHedeoY1yo67+rQiZbOLtS2tmHJqeOsvnZFLc3s9j7M6dBJ7bXQ1BT6/L5aZzH8PykskiVKHgeZwf2EW7lyJa+88gqnTp0iJiZGp5915MgRYmNjOXjwIJmZmTz99NPKGeLV3bNd2zKxoxeLdh1h7E8byc7L55cpIzA2NCj3PU97NOHNp7ux4rgvI39Yz624JH6ZMgJ7CzNlmgVPd6eHuxtz/tjL5FVbcLay4Jvxg3UWx4xubZnQyYvFO48w/vuN5OTl8/P0iuPo37IJbwzsxvdHfRn93XpuxSbx03T1OAKjE3h36yEGf7GG51bvQA/4ZfoI9PV0cyB/ukUT3nqqGytO+jLip/Xcik/i14kjsDc305i+dW1Xlo8cwNar1xn+03qO3Arhu3FDaOzkoEwTnpzKB/uOM+SHdUxYvZnotHRWThyBXTnb1IaBTZrwdrfufOPry+ANvxOUmMia4SNwMNP8mWZGhkSmp/PZmTMkZGVqTBN7L5PPzp5h6Mb1DNu4nvNRUfw0eCiN7R00pteWJykWgGm92vJMVy8+2HKECV8p6sqPz1dcV/p5NeH1od348aAvY79Yz62YJH58bgT2lqrv4KNn+lPf2Y5XV/3JiGXrOOIfwrLJA2lay0kncaiVy/rfCUpKZM2ICsrF8O/LpX3tOqy75sfIPzYyedtWjPT1WTtiJGaGuvvNPCcH3BvBe3MeLf3dWHjhLejQGnb8CpNHwXvL4MxFVZp9x+DTFfDSFNj2C7g3hJnzIVl34/SAbsokNjOTz86cYeiG9QzbUFxXhgylsYNu68qApk14u1c3vj3ry9Df1nMzIYnVYyo4Ftdy5cshA9jif50hv63n8O0QfhgxhMaOqnz+OGIwdWxteGH7Lob8tp7ojAzWjh2JmZFu52Q83bwJC/p2Y8UpX4b/sp6b8UmsfOZv2pURA9jqd51hv6zn6K0QVoxRb1cAToXcofMXPykf83bs02kcD8vkuzO+DFu9nqCEJFaN/ZsyGTqArdeuM3T1eo7cDuH7keplsqB3d7q51ee1PQfo/+safrt0lYVP9aRXIzfdxtKsCQv6dOO7074MW6nYv1aOqziWL4YPYMu16wz7dT1HgkNYMVq9TOrY2rBh8hjCklOZ+PsWBv+yjhVnLpBbUKDTWACm9yxuV7YeYcLXinblp+ceoV0Z0o0fD/ky5sv1BMck8VOJdiUu7R49Fv2k9lhx4BxZ9/M4fTNc6zHoqp4A9HFviGetGsRnaD7OaduA4li+O+3LsF+LYxlfcSxfDB/AluJYjlRQ5zt9+ZPyoes6/9CTcq7ytEcT3uzfjRUnfBn5Y3GeJqvnqSSvOq58PmoA265cZ8QP6zkaFMK344fQ2FlVLmbGRlyJjGb5oTM6y3dpT9Lx64nqtzRrwtu9i9vIVesJiv8HbeQqzW2kzzc/qT3e2nOQwqIiDt7S3eSVgY3deadrd76+eJ5Bf6xTlMmQkRWWSVRGOp+eO11umQDcSk6i3coflI/RW//QVQhC6IQMcD/BMjMz2bRpE7NmzWLgwIH89ttvj/zexMRE2rZty/Dhw8nNzX2k9zg4OFCjRg3atm3L559/Tnx8PBcuXFD+f3Z2NtOnT8fKyoq6devy888/q70/ICCAXr16YWZmhoODA8899xyZmaoD8IkTJ2jfvj0WFhbY2trSuXNnIiIiHjmmypjs482PJy9y7GYYwfFJvLXtAM5WFvRp1rDc90zp5M2Wv66z42ogoYkpLNp9hPv5BYzw9gDA0sSYEd4efHrgFBfuRBEYk8DbOw7hXa8mnrVr6CSOSZ29+en4RY4HhREcl8SCzYo4ejevII6u3my9dJ2dlwMJTUhh8c4j3M8rYERbD2WaLZcCuBweTUxaBkExCXxz+ByuttbUsrPWSRxTO3qz5cp1tvsFEpqUwvt7FN/tyNYeGtNP6tCaMyHhrDp3mbCkFL45fp7A2AQmtPdSptlz/Rbn70RyNy2dkMRkPjl4CitTE9xdHHUSA8AM7zZsun6drYE3CElJ4d2jR8gpKGB0C81x+MfH88mZU+wJvkXegwca0xy7E8aJ8DuEp6VxJy2N5efOkp2fT2tXV53FAU9WLAATu3nzy+GLnLgRxu3YJN7ZcAAnawt6eZRfVyZ392ab73X+vBRIWHwKH2w9Qk5+AcPaq74Dr/qubDztx/XIeKJT0vnlyEXu5eTSvLaLTuIoUy5HisvFo4JyOV1cLgWay2Xaju1sCwzkdnIyN5OSeP3QQWpZW+PhopsYALp1hDnPQt9uj5b+jz+hliu8+RI0rA8TRsBT3WHNFlWaNZth9CAYMQAa1YdFr4GpKWzX8ViELsrkWFg5daWGbuvK9HbebLp2nW0BgYQkp/DeQcU+P7ql5limtmnNqbBwfr14mdDkFL46fZ7A+AQmeXsBUN/Olta1avL+oWMExMVzJyWVhQePYmpoyOBmTXUay7SO3my+ep3t14rblb3F7YqX5lgmt2/N6ZBwVp5XtCtfn1C0KxPbeamly3vwgKSsbOUj4/6j9an+rent1ctk4QFFmYxqpTmOKW1bc7p0mcQlMKmNKg7vWq7sCAjkYuRdotMz2HQtgJsJiXi66qav8tC0Dt5s9rvOdn9FmSzcd4T7BQWM8iwnlvatOR0azkpfRSxfn1TEMrGtKpZ5PTpzKjScZcdOExSfSFRaOsduh5GSnaPTWEDRrvx85CLHb4QRHJvE2xsfoV3ppmhXdha3K0u2KcpzeHG7UlhURPK9bLVHr5aNOHgtmJy8fK3HoKt64mxlwXv9ezJ/5wHyCzUf57RtWgf1WBbuU8QyqpxYprTTsH/Fqu9f8Pjr/ENPyrnKlE7ebLlcfp7KxN2xuI9/triPf+w8QbEJPNPBS5lm17Ugvj9xgXNhkTrJsyZP0vHrieq3aGojCx6hjbxQ3EaeKttGlqzvSVnZ9G7SEN+IKKLS0nUWx7Nebdh0I4CtQTcISU3hneOHySnIZ3TzlhrT+yfEs/TsKfbcLv+8C+BBYSFJ2dnKR+p93beNQmiTDHA/wTZv3kzTpk1xd3dn4sSJrFq1iqKior99X1RUFF27dsXDw4OtW7diYmLyjz/brPjXw7y8POVry5cvp23btly9epUXX3yRWbNmcevWLQCysrLo168fdnZ2XLp0iS1btnDkyBFefvllAAoKChg2bBjdu3fH39+f8+fP89xzz6GnoxnCJdW2s8HJyoLzoapOUWZuHv534/CsU1Pje4wM9GlR04XzJTpSRUVwPjQSrzqKhrtFTReMDQ3UtnsnKZWYtAxlGq3HYW2Bb0ipOKLi8KxbfhzNa7pwPkQ9Dt/QSDzras6jmZEhw9u0IColnbh07V8uZ6Sv+G5LdlKLgPNhkXjV1pwnrzquZTq1Z0Mjyk1vpK/P2DYtybh/X2eXMBrp6+Ph7MLZKNWPNEXA2cgIrQ3g6uvpMaiJO2aGhlyJ1d0VHE9SLAC17IvrSnCJunI/j4DIODzra64rhgb6NKvtovaeoiK4EByJZ33Vd+AXHks/ryZYm5ugpwf9vZpgYmjIpdAorcdhpK+Ph4sLZyN1Vy4AVsaKNiL9/n2tbbOy/G6ATxv117q0U7wOkJevWO6kZBp9fcXfD9PowuMok8da72u4cDZC/Vh8LjyS1rU0x9K6livnItSPxafvRCjTGxsoZhqWnI1WhGLAqE1tzXVPG4z09Wnh6sK5O6ViuRNJ6/LaldqunL+jHsuZsLLtSvt6tTk373kOvDiFRU/3wtbMVOv5f8hIX58WNVw4F/4PyqSmq1p6UJSJV4n0V6Jj6dXYDRdLCwA61K1NfTs7zoTrbpJBRWVSbltfy1UtPSjK5GHsekD3Rg24k5LKynHDOT/nebZMHUefJuUPAGpL7YralXrltyvNa7vge7tUHyw4Es96mr+D5rWdaVbLme0Xr2s3AHRXT/SAZUP7s/L8ZUISk7Web03KjSU8Um3fL8mrdjn7l4Y6f37u8xyYpfs6/9CTcq5iZKAol5Kfp8xTOfuYZx1XtRgAzoRE6CR/j+pJOn49af2WFjU01/sK+y1/00aW5GBuTo+GDdh6TfvH4IcennediVKP42xUJN6V/IGgvq0dvtOe5+TkGXz51ABqWlpVMrfiocIivf/c40kka3A/wVauXMnEiRMB6N+/P+np6Zw8eZIePXqU+55bt27Rt29fhg8fzldfffWvBpDT0tL44IMPsLS0pH379srXBwwYwIsvvgjAm2++yZdffsnx48dxd3dnw4YN3L9/n7Vr12JhoTiB+u677xg8eDCffvopRkZGpKenM2jQIBo2VDTkzZo9hoVSAUdLcwCSM9XXmkvKysap+P9KszU3w9BAv8x7kjOzaeBop9iulTl5BQXcKzWzIykzG0crC21lX8nRyly5/dJ5evh/pZUbx71sGjjZqb02rmMrXuvfFXMTY8ISUpi5chv5Dwq1GIGCnbkZhvr6Zdb+S8pSfbelOVpalE2fmaUs24d6NG7A8lEDMDMyIvFeFtPXbSctRzeDdnZmijiSskvlKzubhvb2ldq2u4MjW8eOw8TQkOz8PGbt2U1ISkqltlmRJykWAEfr4jp/r+x+71BOXbGzKK4rGt7TwFm1X76+Zi+fTR7AmQ9fJP/BA+7nFTBn9S6ikrQ/y6PCcrGrXLk8pAe816MHf0VHE5z8eAYmHkVSCpQ+HDjYQ2aWHvdzi8i4Bw8e6OFgp/6jr4MdlDq/1Cpdlom7gyNbxxXXlbw8Zu3Wcb0v71icnY2bQznHYgsLksocu7NwslDUq7CUVKLTM5jfvQvvHjhCTn4+09p542pthbOl9tvFh5SxlG7rsrJxq6BdKR1LcmYWjhaqY8Tp0HAO3wzhblo6dexsmdezM7+MH87Y1X9Q+AgTDv5tHGXylZVNw/LKREMcJcsE4IPDx/mgfx/OvPwc+Q8eUFRUxDsHjnApKlrrMTxUXixJWRXsX+XE8rBMHCzMsTQx5jmfdnx18iyfHz9DV7f6fDdqMJN+38KlSN3F41BBu/KwzSmt3HYlU71dKWl4ew9C45K5Fh6rhVyXyo+O6snMzu0oKCxi7WNYc/uhcvevzH+/f4Gizh8qrvN1i+v8r+OGM+Y33dR5Vd6ejHMVZZ40HMNKn3c85GhpoeHcpmwf/3F6ko5fT2K/pXQs/6qNLGf/GtGyOVl5+TpdnkRVJlnq+apkmfjFx/L6kQOEpabgbGHBq+07sXnkOPpt+I2sfO1fESSELsgA9xPq1q1bXLx4kR07FDc1MTQ0ZOzYsaxcubLcAe6cnBy6du3KM888w1dfffWPP7NTp07o6+uTlZWFm5sbmzZtwqXEJeutWrVSPtfT06NGjRokJCQAEBQUhKenp3JwG6Bz584UFhZy69YtunXrxtSpU+nXrx99+/alT58+jBkzBtcKfjnOzc0ts7yKiYnJ385IH9SqKYuG9Fb+Pev3nY8U/3/NQK+mLBpWIo41O3X6eXuu3uTc7UicrCyY1rUNy58ZyMQfN5V7adp/0YXwKIb/+Dt25maMbtOSr0YNZMyvGx/LpcvaFJaawqD1v2NlYszTjZuw7Kl+jN+6WecDw7rwOGIZ4N2UhaNVdeWlX3dqbdulvfS0D9ZmJsz8YSupWTn08mjEsikDmfbdZm7H/ncGiB/Vkl69aeLgwJjNm6o6K//3wlJTGPR7ibrSrx/jt1Svel9QWMiLO3az9Om+XJnzIgWFhZwLj+RE6B0ewwVbWrfvRrDyeXBCMrfikzj6ynTa16uNb7j2r9rQlUltvPCqWYPnt/5JdHoG7erU4v2+vUi4l1VmRv5/2cP7ghwNDuW34sHUoPhEWtd2Zbx3K60OEA30bsrCUY+nXXnIxNCAAd7u/HT4wt8n/o9oUcOZye1bM+KX9VWdFa3YG1iizicmcyshiaMvT6dDvdqc12Kdf1LOVcSje5zHr8flSei3lDbSswW7bgRVuAzIf9XJiHDl85vJSVyNi+PM1JkMbOzO5kDdzUgXQptkgPsJtXLlSgoKCqhZU3VZWlFRESYmJnz33Xca32NiYkKfPn3Ys2cPr7/+OrVq1fpHn7lp0yaaN2+Og4MDtra2Zf7fyMhI7W89PT0KCx99hu/q1at59dVXOXDgAJs2beLdd9/l8OHDdOzYUWP6pUuXsnjxYrXX3n//fRYtWlTh5xy7GYr/XdXMF+PiG6c5WJqTmKn6pdTRwpygcpavSMvOoeBBIQ6lft11sDRXzjJIupeNsaEhVqYmajMjHC3NSbqn/ovsv3E8MJSAKFUcRgaGGrfvYGnOzdh/GIeVOUmlZhRl5uaRmZtHZHIa/lGxnFv4In1aNGLftVuVjqWk1OwcCgoLcbBQz5OjhXmZGRwPJWVmlU2vYcZHTn4BkanpRKamcy06jgMvT2WUtwc/n7mk1RgAUnMUcTial8qXuTmJWZUr//zCQiLS0wC4npBAKxcXprb25t2jRyq13fJU91hO3AglILJEnS+uK4r9vERdsTLnVrTmupKaVVxXrMqvK7UdbHima2uGf7qW0HjFYHZwTBLebrUY29mLD7ce1VpM8Dflkl35Y8yinr3o6ebGuM2biMt8PDcFe1SO9pBU6maRySlgaVGEqYliORIDg6IyN5RMTlW8V1d0WSZl6koNHdf78o7F5uZlZjs9VHq2IyhmdSeWSH8jPoEhv63H0tgYYwMDUnJy2DppHNfj4rUfRDFlLKXbur9pV0rH4qBhpldJd9PSScnKpp69rU4GuB/GUSZfFuZq33FJmuIoWSYmhgbM696Zl7bv5kToHQBuJSbRzMWJGR3a6GyAu7xYHP9FLA/LJDU7h/wHDwhJUv8xMTQphTZ1/lmf9+8cvxGKf4SGvqSGduXmP21XLM3LzOoG6OvZBDMjI3b/FaSNEMrmRwf1pG3dWjhYmHN89rPK/zfU1+fNvt2Y3KE1vb9dpeUoFMrdvyzNSfwHsWi6KqWkqOI6X9feVqsD3E/KuUq5edJwDCt93vGQpisyHTT08R+n6n78KulJ7LeUjsXB4p/Xe03p29auRUMHe+bs3Ku9TGugKhP1qyi01b9/6F5eLnfSUqlnY6u1bf4/e1KXBPmvkTW4n0AFBQWsXbuW5cuX4+fnp3xcu3aNmjVrsnHjRo3v09fXZ926dbRp04aePXsSE/PP1sCqU6cODRs21Di4/XeaNWvGtWvXyCoxGHb27Fn09fVxd3dXvta6dWsWLFjAuXPn8PDwYMOGDeVuc8GCBaSnp6s9FixY8Ld5yc7LJzIlXfkISUgm8V4WHd3qKNNYmBjTqnYNrkVp/o7yHxRyIyZe7T16etDRrQ5+xYPON2LiySt4oJamvqMdNW2tlWkqIzsvn8jkdOUjNCGZxIwsOjQsFUedGlyLLD+OwJh4OjZUj6NDwzpci6woj3rooVpPVZvyCxXfrU/J75bi7/au5jz5RcXi06Cu2mud3OqWm/4hfT09ncQAijiuJ8TTqY4qX3pApzp1uRqr3UuL9XQYB1T/WLJz84lKSlc+QuOL60pj9brSsm4NroVrrisFDwoJuhuv9h49PejQuI7yUnEzY8UJaOnLlB8UFipn5mhTfmEh1+N1Uy6LevbiqUaNmLh1C3czMiqZU+3zagG+l9VfO/eX4nUAYyNo0UQ9TWEh+F5RpdEFXZZJaXo8hnofF0+neurH4k7163A1WnMsV6Nj6VRP/VjcuX5djekz8/JIycmhnp0tLWu4cOR2qFbzX1J+YSE3YuPxqa8ei0+DOlwtr125G0vH0u1Kg4rbFRcrS2zNzdQGoLQpv7CQG3Fl4+hUr4IyiYnFp37ZMvErTm+kb4CxgUGZ41ZhYZFOjlsPlVsm9Sto66M1tPUNVPtXfmEhAbHxuDmo/4rVwMGOmHTtHseyc/OJSk5XPipsVyLKb1cCNbQrHRvX4VpE2e9gRPsWHL8RRmqWbq4600U9+TMgiCE/rWPYz78rH/EZmaw8f5lnN+zQSRxqsTTQsH+VU1f87patK50a1C03dihR57U8GPyknKtozFNsOXkq53u+FhVLR7dS5dKwrk7y96iq+/GrpCet3/KP28joWHw09Fs0HSdGe7YgIDaemwlJWs13aQ/PuzrXLlsmV+K0VybmRkbUs7Gp9GQlIR4nGeB+Au3Zs4fU1FRmzJiBh4eH2mPkyJGsXLmy3PcaGBiwfv16PD096dWrF3FxcY8lzxMmTMDU1JQpU6Zw/fp1jh8/ziuvvMKkSZNwcXHhzp07LFiwgPPnzxMREcGhQ4e4fft2hetwm5iYYG1trfb4NzfMBFh7/gov9OhAz6ZuNHZx4JOR/Ui4l8WRINUJ96qpI3mmg6fy7zXnrjC6TUuGejXHzcme9wf3xszYiB1XFHcwy8zNY/uV67z1dHfaN6hN85rOfDz8Ka5GxnDtrm6+93Vnr/B8rw70bKaIY+loRRxHA1VxrJwxkmd8SsRx+gqj2rVkqLcijoVDi+O4rIijtp0Nz3ZvR/OazrjaWOFV15UvnxlIbkEBp27d0Ukcv/leYbR3S4Z5NsfN0Z5Fg3pjZmTE9uK7w30yrB/zendWxX3hKl0a1WOajzcNHOx4uXtHWtR0Yf1FP0BxY8y5vTrjWasGNW2saOHqzEdD+uJibcmBwNs6iQFg5ZXLjPNoyYhmzWloZ88HvftgbmTE1kBFHJ8/1Z/XO3dRpjfS16eZkxPNnJww0jfAxcKKZk5Oar+sv965C+1q1aKWtTXuDo683rkLHWvXYddN3czoehJjAfj91BWe69uBHi3caOzqwEfP9CMxI4tj11V15ZcXRjKui6qurD15hZEdWzKkbXMaONvz7ihFXdl5UfEd3IlPJSIxlYWje+NR14XaDjZM7u6NT5N6HLuum7X6Vl65zLiWLRnRvDkN7UuUy43iculXQbkYGOBiWbZclvTqxbCmTZmzbx+ZeXk4mpvjaG6OiYHuLgrLyoag24oHwN1YxfOY4km9X/wMb36kSj9uqCLNsh8gLAI27IADJ2DKaFWaKWNgy17YeQBCw2HxF5CTA8Of1lkYgG7KRGNdqaP7urLq0hXGerZkuEdzGjrYs6Sf4li8NUARy7KB/ZjfTXUs/u3yVbo2qMeMdt642dvxaueOeNRwYd0VP2Wap90b06FOberY2NCnkRtrxo7g8O1QzoTrdimM1b5XGOPdkmGtituVAcXtyjVFLJ8O7ce8XqpY1l68SteG9ZjW0Rs3Bzte7tYRj5ou/H5JEYu5kRFv9O6KZ60a1LKxpmP9Onw/dggRKWmcDtXdzRlXXdRQJsZGbPNXxPHZoH681l0Vx5q/FGUyvb2iTF7p0hEPVxfWXVbEkZmXx4XIKN7s2ZX2dWtT28aaES2bM8yjOYeDdbfGKMDqC1cY07olw1sqYln8tKJMlLEM7sdrPUrEcvEqXd3qMb2Dokxe6aqI5fe//JRpVvr+xdPNmzDGy4O6djZMbOtJz8ZubLh8TaexgKJdeb5PcbtSw4GPy2lXxncu0a6cusLIDqp25b2R6u3KQ3UcbGjjVpvtFwJ0GoO260lazn1uJyarPfILH5CUmcWd0pfYaDuWh/tXq+L9qziWbcWxfDakH6/1LLF/XVLEoty/HsZSvH+VrvM+9evww5jiOh+muzr/0JNyrqKWJ0d73h+knqdPRvRjbp8S+5ivoo8/tZM3DRzteKmnoo+/4YKfMo2NmQlNazjRyEkxONzA0Y6mNZx0uk73k3T8eqL6LRevMNZLVS5L+pcqF01tpFv5beRDlsbG9G/ahC06vLlkSb/6XWZci5aMaKo47/qwZx/MDY3YWryUyPK+/Xndp1SZODrRzFFx3lXD0pJmjupl8nbn7nSoWZtaVtZ416jJTwOG8qCoiF3BNx9LTEJogyxR8gRauXIlffr0wcbGpsz/jRw5ks8++wx/f/9y329oaMjGjRsZO3YsvXr14sSJEzg7O+syy5ibm3Pw4EFmz55Nu3btMDc3Z+TIkXzxxRfK/7958yZr1qwhOTkZV1dXXnrpJZ5//nmd5uuhX0//hZmREYuH9MHa1IQrkTE8t3a72vrSde1tsDM3U/69/3owdhZmvNrbB0dLc4JiE3lu7Q61G6cs3X+SwqIivh43GGNDA86GhLNk9zGdxbHy1F+YGRuxaHgfrExNuBIRw/Or1eOo42CDbYk4DgQEY29pxst9fHC0Uixn8vzqHcqb0uQWFNCmQS0mdW6NjZkpSZnZXA6/y4QfNpGio1lE+28EY29uxis9fHCyVFx+OXO96rutaWNFUYnZZlfvxjJ/+37m9OzE3F6dCU9J4+U/dnE7UXGZ34PCIho42vGN52DszE1Jy7lPQHQ8E1ZvJiRRd+si7w0Oxt7MnLk+nXA0NycoKZGpO7crb35S09qKQlRxOFtasnfCJOXfz7Vty3Nt2+J7N4pntm4BwMHMnOX9+uNkbsG9vDxuJSUydcc2zkTqdnDoSYoFYPUxRV1ZOLoPVmYmXL0Tw6yf1etKbUcb7CxUdeWgXzB2lma82N8HR2vFciazft5BSnFdKSgs5KVfdjJnUBe+nTEUc2NjIpPTeHfjQc4EheskjjLlkpjI1B0lysXKSm1mprOlJXsnaiiXKFW5TPT0AuCPMWPUPuv1gwfYFhiokzhu3IIpc1SzRT9doXg+rH8RSxdAYjLEJqjS13aFHz+BT76DddughhN88Dp0Ud33mAG9IDUNvlmluClls0bw8zLdLlECuikTB/PiumJRoq5s131d2XczGAdzM+Z08cHJwpzAhESmb95Bcsl6X/JYHB3LvN37mdu1E69160x4ahqztu/idolLrp0sLXi7V/fiS4az2HEjkBVndb+m8P5ARbvyavfidiU+kWc3qNoV19Kx3I1l/g5FuzKvp6JdeWlziXalqJAmLo4M82yOlakJCfcyORsWydcnzpGvw7U5991UxDG7q6JMghISmbFJvUyKSpfJrv3M7aYqkxe3qZfJnD/3Mb97F5YPfhpbU1OiMzL44tRZNlwtvy+plViCgrG3KC4TC0WZzPijRJnYlN2/Xtu5nzk9OjGvR3GZbFGVCcDhW6G8v/8oz3dqx7tP9eROSgqvbNvN5bv/7KrFf2PVcUW78v4oVbvyws8a+mCl2hV7CzNe6qdoV25GJ/LCLzvK3BhweHsP4tPvcS5YtwOp2q4nVWlfyVge7l8bK9i/7pbYv8qp8+7OjgxvpV7nvzqp2zr/0JNyrrL/ejB25ma82qs4T3GJPLeu/HLxi4rl9a37md27E3P7dCYiOY1XNu7idoJqH+vp3pClI/op//5izEAAvjt+nhXHfXUSx5N0/Hqi+i1BGtrIzY/YRnbX3EYCDGzujp4e7A58PIPBe2/fwsHMjHkdOiuWIkpMZOqubSTlFMdhaa1eJhaW7Bs/Wfn3c97teM67Hb53oxi/YzMANSwt+brfQGzNTEnJyeGvmGhGbN5Ayv3qdS+q/ypZouTx0Csq0uEtnYX4j2r23pdVnYVKCfpgrvJ5iwXVO5YbS1WxNF1cvWO5+b4qFrevvqjCnFRO2Jx5yufVOQ5Qj6XVvOq9f/l/UWL/+rL6lkvYXFWZFMY1qcKcVJ5+DdUNxapzmYB6uTT6tHrXlZA3VXXF/YPqG8ut91RxNP6k+sYBcPstVSxNPqresQS/o4ql5WvVO5aA5U9eXWnyYfWNAyD4XVUsT9L5SrOF1TeWoCVP5vHrSeq3NF5avcvl9gJVuTT4dnkV5qRy7rzyWlVn4T+r57H/3ndzvFf13dfKI0uUCCGEEEIIIYQQQgghhKiWZIBb/K0XXngBS0tLjY8XXnihqrMnhBBCCCGEEEIIIcR/TlGR3n/u8SSSNbjF31qyZAnz58/X+H/W1taPOTdCCCGEEEIIIYQQQgihIAPc4m85Ozvr/CaTQgghhBBCCCGEEEI8SQp5MmdM/9fIEiVCCCGEEEIIIYQQQgghqiUZ4BZCCCGEEEIIIYQQQghRLckSJUIIIYQQQgghhBBCCKFlhU/oTR3/a2QGtxBCCCGEEEIIIYQQQohqSQa4hRBCCCGEEEIIIYQQQlRLskSJEEIIIYQQQgghhBBCaFmRLFHyWMgMbiGEEEIIIYQQQgghhBDVkgxwCyGEEEIIIYQQQgghhKiWZIkSIYQQQgghhBBCCCGE0LJCWaLksZAZ3EIIIYQQQgghhBBCCCGqJRngFkIIIYQQQgghhBBCCFEt6RUVFRVVdSaEEEIIIYQQQgghhBDiSdLx4IKqzkIZvv2WVnUWtE5mcAshhBBCCCGEEEIIIYSolmSAWwghhBBCCCGEEEIIIUS1ZFjVGRCiKjRd9GVVZ6FSbi6aq3zu88zyKsxJ5Z3f8JryefO3q3e5BH6sKpfmOxdVXUYqKXDYIuXzxls+rLqMaMHt0e8qn7ef+kUV5qTyLv42T/m80ebqWy4hY1Rl4vZl9S6TsLmqMimMa1KFOak8/RrByucNvq3e7cqdV1TtSos3q2+7cuNTVZvi9nU1ryuzVXWl4RfVO5bQeapYvF6pvvsXgN+3qn2syUfVN5bgd1RxNFpWvfevkNdV+5f7B9W3TABuvffk7V9P0vGr/s/LqjAnlRf+3OvK527fVO9+S9irqn5Lw00fVWFOKid07DtVnYX/rMIivarOwv8FmcEthBBCCCGEEEIIIYQQolqSAW4hhBBCCCGEEEIIIYQQ1ZIsUSKEEEIIIYQQQgghhBBaVlRU1Tn4/yAzuIUQQgghhBBCCCGEEEJUSzLALYQQQgghhBBCCCGEEKJakiVKhBBCCCGEEEIIIYQQQssK0avqLPxfkBncQgghhBBCCCGEEEIIIaolGeAWQgghhBBCCCGEEEIIUS3JALcQQgghhBBCCCGEEEJoWVGR3n/u8W+sWLGC+vXrY2pqSocOHbh48eIjve+PP/5AT0+PYcOG/avPfVQywC2EEEIIIYQQQgghhBCijE2bNjFv3jzef/99rly5gqenJ/369SMhIaHC94WHhzN//ny6du2q8zzKALcQQgghhBBCCCGEEEJoWWGR3n/u8U998cUXzJw5k2nTptG8eXN+/PFHzM3NWbVqVbnvefDgARMmTGDx4sW4ublV5it8JDLALYQQQgghhBBCCCGEEP8HcnNzycjIUHvk5uZqTJuXl8fly5fp06eP8jV9fX369OnD+fPny/2MJUuW4OzszIwZM7Sef00MH8uniCdOYmIiCxcuZO/evcTHx2NnZ4enpycLFy6kc+fOAFy9epVPPvmEU6dOkZKSQo0aNWjZsiXPP/88gwYNQk9P9avRmjVr+O6777hx4wYGBgZ4e3vz+uuvM2jQIACmTp3KmjVrys1PvXr1CA8P10msz7TzZEbnNjhaWnAzLpEP9x8nIDq+3PT9mjdmdq9O1LK1JiI5jc+PnObUbUXeDPX1md2rE90bN6C2nQ2ZubmcC4vkiyNnSLiXpZP8lzZzVCeG9GyJlYUJ/sExfLbqCHfj0spNP3lIe7q3a0y9mvbk5hUQcDuG7zeeIjI2VWP6L94YgY9XA9784k9O/RWioygUXu7jw+i2LbEyM+FqRAxL/jxKRHJahe8Z39GT6V0V5XkrLpGPdh8n4K6iPG3MTHi5jw+dGtXD1daa1KxsjgaG8s3hc2Tm5ukkhvEN2jG9cWccTSy5lR7HR/77CUiL1pi2j2sznmvSlbqW9hjq6ROZlcLqkHPsjvJXpgkctkjjez+/fohVIed0EYLShIZteNbdBydTS26mxbPk6kH8U2M0pn2qljsvNO1MPUt7DPX1ichMYeWtC/wZGaBM80rzbgys0xxXc2vyCx9wPTWOL68f51qK5m1q23PDOzGsuweW5qb4347m07VHiYpPKzf9lIHt6NmmMfVc7cnNLyAgJIZvN58mMk5VV4yNDJg9rjtPdXDHyNAA3+sRfLb2KCkZ2TqLY2IjVbkEPSyXcr7Dp2q5M6uZqlzC76WwKvgCOyMU5WKop8/clj3oUaMRdSxtuZefy7n4OyzzP0bC/UydxQAwydOTmW3a4mRhQVBiIouOH8c/Pk5j2sYODsz16YSHszO1bWz44MRxVl+9qpZmQqtWTGjlSS1rawBuJyfz7QVfTuqoLXno0jVYtRFuBENish7fflhEn7+5Yu/iVfhkBYSEg6szvDAJhj+tnmb9Dlj1BySlQNOG8M5saNVMZ2EoTWrpxXPebXEytyAoKZFFp45xrbxysXdgbodOtHR2oba1DUtOHWf1tStl0rlYWPJWp650r9cAMyNDwtPSeOPoQQISym97teXlvj6Mal/croTHsGTHUSL/rl3x8WRatzY4WllwKzaRj/9UtSul/Th9GF3dG/DKml0cCwzVQQQwqVVxXXlYJicqqCv2JeqKtQ0fnDzOar+rGtMCvNC2HW907srqq1f44NQJneS/pImensxsq6r3i48fxz+u/Ho/p1OJen/8OL+VqvcvtGtHv8aNcbO3J7eggCsxMXx6+jR3UjX3abRt1gAfRnRS7F9+d2L4eNNRIhPTyk3v3bAWU3q3pVldZ5xtLJn7yy6O+6vvN708GzG6cyua1XXG1sKMsZ/8zq3oRJ3FMKGNJzM6tsHJ0oKb8Yl8cOg4/jHl183+TRszp7uiXxyeksbnx05zMjRcLU1DB3vm9+pC+7q1MdDXJzQpmZe37SE2457O4gCY2NqTZ9sV718JiSw5WvH+NbtLJzxcFPvXh8eO89vlsnXln2xTm55p68kMnxLlcuA4ARWVS7PGzO5RolyOnuZUSLjGtIsH9GZcm1Z8fPAEay6Wf3zQlidlH3uSjl+Tmrfmec92OJlZEJSSwPtnj3ItUXMs45q2YkTjFrjbOwIQkBjPskun1NL3q9+YCc29aOnogp2pGQO2rSEwueJlDrQWSysvZpbst5w8VnEb2bETHsX9lg9OHWe1n3q/ZXYHH2Z36KT2WmhKCn1/X62zGEDRv5/ZtKOyf7/4yqEK+/cvNu9MPUu74v59Kitv+bIz4rpammcaeeNhVwM7E3MGHfyVoDTd97tE1Vm6dCmLFy9We+39999n0aJFZdImJSXx4MEDXFxc1F53cXHh5s2bGrd/5swZVq5ciZ+fn7ay/LdkBrf4V0aOHMnVq1dZs2YNwcHB7Nq1ix49epCcnAzAn3/+SceOHcnMzGTNmjUEBQVx4MABhg8fzrvvvkt6erpyW/Pnz+f5559n7Nix+Pv7c/HiRbp06cLQoUP57rvvAPj666+JjY1VPgBWr16t/PvSpUs6ifPpFk14q183VpzwZcRP67kVn8SvE0dgb2GmMX3rOq4sHzWArVeuM/zH9Ry5GcJ344bQ2NkBAFMjQ5q7OvP9qQuM/Gk9r2zaTQMHO74fP1Qn+S9t4uB2jO7Xms9WHWHGexvIuZ/PV2+NxNjIoNz3tG5Wm22H/Zi5cAOzl27F0ECfr94ahalJ2d/Hxj3tTRFFugxBaUa3tkz08WLxn0cY98NGcvLy+XnaCIwNy4+lf8smvDmgG98f9WXUivXcjE3i52mq8nSytsTJypJl+08z9Ou1vL31EF2a1OeDkU/pJIb+tVrwpkc/vr95glEnfuJmRjw/d5qIvbGFxvTp+Tn8FHyKZ07+yvBjP7A94ioftR5GZ+eGyjTd9n+u9njnyk4Ki4o4FBOkkxgeGlC7OW979uW7wNMMO/wrQenxrOo2HnsTc43p0/Lu80PQWcYcW83gQ7+w7c41Pmk3mC4uqkuXwu8ls+TqQQYd+plxx9cQnZXG6m7PYG+seZvaNHlAO8b29eKTNUeZvmQDObn5fPPaiArrinfTOmw55seMDzbyyrKtGBjo8+38kZgaq+rK3PE96OrlxoIVe3hh6WacbC349JXBOotjQB1FuXx74zRDD//KzbR4VldQLul59/k+6Cyjj65m0MFf2BauKJeuxeViamhEC9sarAhUbO+ls1tpYOXAT13G6CwGgIFNmvB2t+584+vL4PW/E5SUyJoRI3Aw03wsNjM0JDI9nc/OnCEhS/PAe2xmJp+dOcPQDesZtmE956Oi+GnIUBo7OOgyFHJywL0RvDfn0dLfjYUX3oIOrWHHrzB5FLy3DM6UuKfLvmPw6Qp4aQps+wXcG8LM+ZCs43PegY3deadrd76+eJ5Bf6xTlMuQkRWWS1RGOp+eO11uuVibmLB11DjyCwuZtns7fdf/xsdnTpJ+/74uQwFgRve2TOjsxeIdRxj/XXG7MuNv2pVWTXhjkKJdGf3Nem7FJvHTDM39hMldWlOk4yZyYOMmvN21O99c8GXwxt8JSkxkzbAK6opRcV05W35deaiViwvjPVoRlKi7wdOSBjZpwtvdFfV+yO+/czMxkd8qqPemhoZEpaez7MwZEjI1x9KhTh1+9/Nj1MaNTN66FUN9fdaMHImZoe7n/Ezt05Znunvx0aYjTFq+kZzcfL5/seL9y8zEiODoRJZuPlZ+GmMjroZF8/WfZ3SRbTUDmjVhQZ9ufHfal2Er13MzIYmV40Zgb15Ov7iWK18MH8CWa9cZ9ut6jgSHsGL0EBo7qY6zdWxt2DB5DGHJqUz8fQuDf1nHijMXyC0o0G0s7k14u0d3vj3ny9C1iv1r9ejyYzE1MiQqLZ1lp8rfv/7pNrXl6eZNWNC3GytO+TL8l/XcjE9i5TMVlEttV5aPGMBWv+sM+2U9R2+FsGKMerk81Me9IZ61ahCfodsfsR96UvaxJ+n4NcjNnXd9evD15XMM3L6WwORE1g4YjYOp5r5kR9c67AoNYvyeTYzYuZ7YrAzWDRiNi7mlMo25kRF/xd3lkwsndZr30gY2di9uI88z+GG/ZWjF/RZFG1l+vwXgVnIS7X/9QfkYs/UPXYUAwMA6zXjbqw/f3DjNkEMruZmWwG/dx+FQbv8+h+8DzzLqyG8MPKA47/q0/WC61lCdd5kbGvFXYhSf+R/Xad7/XxUV/fceCxYsID09Xe2xYMECrcR77949Jk2axC+//IKjo6NWtvkoZIBb/GNpaWmcPn2aTz/9lJ49e1KvXj3at2/PggULGDJkCFlZWcyYMYOBAweyd+9ennrqKdzc3GjWrBkzZszg2rVr2NjYAODr68vy5ctZtmwZ8+fPp1GjRjRr1oyPPvqIOXPmMG/ePKKiorCxsaFGjRrKB4Ctra3ybycnJ53EOtXHmy1XrrPdL5DQxBTe33OE+/kFjGztoTH9pA6tORMSzqpzlwlLSuGb4+cJjE1gQnsvADJz85ixbjsHbgRzJzmVa3fj+GDfcTxquuBqY6WTGEoa29+b33Ze4PTlUEKjkljyw34cbS3p1rZRue+Z++l29p26wZ3oZEIiE/nwxwO4OlnTtIH6r3eN6zkxfkBbPvrpoK7DAGByJ29+On6RY0FhBMcl8daWAzhbWdC7ecNy3zO1izdbLl1nx5VAQhNSWPznEe7nFTCijaI8Q+KTmbNhDyduhhGVks6FsCi+PnSWnk0bYKD/7+40XJGpDX3YEnGFHZF+hN5LZLHfHu4/yGdEvdYa019KCudo7E3CMpOIyk7l97ALBGfE4+1QV5kmKTdT7dHLtSkXk+5wN1u3I13Tm3Rg052rbAu/Rsi9JBZe3kfOg3xG1ffSmP5iYgSHY24Rei+ZyKxU1oRc4lZ6PG0d6yjT7I66wbmEO0RlpRGSkcTSa4exMjLF3dZZp7EAjHuqNat2XeDU1VBC7iax6JcDONpZ0t27/Loye/l29p4JJCwmmdtRSSz59SCujtY0q6+oKxZmxgzp5sFXG0/yV1AUNyMSWLLyIJ6Na+HR0FUncUxv0oFNYcXlkpHEe5f3kVOQz+gGXhrTX0iM4HB0iXK5rSiXNk6KcsnMz2XqqQ3suxvEnXsp+KVEs/jKAVra18TV3FonMQDM8G7DpuvX2Rp4g5CUFN49coScggJGe2g+FvvHx/PJ6VPsCb5FXsEDjWmOhYVxIvwO4Wlp3ElLY/m5s2Tn59O6hm7K4qFuHWHOs9C326Ol/+NPqOUKb74EDevDhBHwVHdYs0WVZs1mGD0IRgyARvVh0Wtgagrb9+kiApVnvdqw6UYAW4NuEJKawjvHDyv2r+YtNab3T4hn6dlT7Ll9i7wHmsvlhTbtic28xxtHD3ItPo67GRmcjoogMiNdY3ptmtTFm5+OXeR4oKJdWbD5AM7WFvRuUX67MqWrN1svXmfnX8Xtyg5FP2FEO/V9s6mrE1O6teG9LYd0GsMM7zZsulGirhwrristKqgrZ4rrSjllAorBiC/7DeDto4dJz9X9jw0A09so6v22G+r1flQ59T4gPp5PTp1iz63yY5m2fTvbAgO5nZzMzaQk3jh4kFrW1niUmpGkCxN6ePPLwYucCAjjdkwS7607gJONBT1blb9/nQ0MZ8Xec2VmbZe091IQPx+4wIVbkbrItpppHbzZ7Hed7f6BhCalsHDfEe4XFDDKU3OZTGnfmtOh4az0vUxocgpfnzxPYFwCE9t6KdPM69GZU6HhLDt2mqD4RKLS0jl2O4yU7BydxjK9bRs2+V9n2/UbhCSn8N6hI+Tkl9+uBMTF8+nJU+y9Wf7+9U+3qS3TOnqz+ep1tl9TlMv7e4vPV7w0f+7k9q05HRLOyvOK85WvTyjOVya281JL52xlwXv9ezJ/5wHyC8s/PmjTk7KPPUnHr2dbteWPm/5sCb5OSFoy75w+RE5BPmPcNccy5/hefg/0IzA5gdD0FN48dRA9PT0616qnTLPjdiDfXDnP2egInea9tBmt27DpenG/JSWFd4/9fb/lk7/ptwA8KCwkKTtb+Ui9r+Pjl3sHNoX5se2OPyEZSbz71z7F/tXAU2P6C4mRHFL279P47fYlbqYnqJ137Yy4zneBZzgbd0eneRf/HSYmJlhbW6s9TExMNKZ1dHTEwMCA+Hj1Wf3x8fHK8bmSQkNDCQ8PZ/DgwRgaGmJoaMjatWvZtWsXhoaGhIbq5ipGGeAW/5ilpSWWlpbs3LlT4xo9hw4dIjk5mTfeeKPcbTxcnmTjxo1YWlry/PPPl0nz2muvkZ+fz7Zt27SX+X/AyECfFjVdOBemOmEoKoLzYZF41dY8AOJVx1UtPcDZkIhy0wNYmZpQWFRExn3N6x1pS01nGxztLLl0XdWRyMrJIzA0Fo/GNR95O5bmioNeRqbqBNfE2JDFLw3k89+OkpKuu6UWHqptZ4OTtQXnQ1XfdWZuHv534/CqqzkWIwN9mtd0wTekVHmGRuJVt/zysTQ1ITM3jweF2p12Z6RnQHPbmvgmhqnyQxHnE8Pwsq/9SNvo6NiA+pYO/JWkuXPoYGJBN5fGbIvQ7eWkRnr6tLBz5Vy8qkNUBJyLD6e1Q61H2oaPc30aWDlwKVHzCbqRnj5j3bzJyLvPTR1fLlfTyQZHW0suBqrykpWTx43QOFr+g4FoSzNFXUnPUtSVZvVdMDI0UNtuRGwqsUkZ/2i7j8pIXx8PO1fOli6XBO2VC4CVkSmFRUXcy9PNoJeRvj4eLi6cjVTt50XA2cgIWrtq53vT19NjUBN3zAwNuRL7eJbAeVR+N8CnjfprXdopXgfIy1csd1Iyjb6+4u+HaXTBSF8fD2cXzkSVOKYCZ6Mi8a7EjwR9GjTEPz6eFf0HcWnGLPaMm8S4FppPPLWptr2iXfG9XaJduZ+Hf1QcnhW1K7VcOH9bvV3xDYnEs0S7YmpkyGfjn+bDncdIytRdG/mwTDTWlUr+cLO4Ry+Oh4dxNkr3g6igqvfnItRjORehvXoPYFV8IqfrKwRqOdjgZGOhNgideT+PgPA4PBs8eh+sKhnp69PC1YVzd9Tr/Lk7FfSLa7mqpQc4ExZB61qK9HpA90YNuJOSyspxwzk/53m2TB1HnyblD/prg5G+Ph41XDiraf+q+e/2L11s81E/t7xyaV1eudR25byGcilZjnrAsqH9WXn+MiGJybrIehlPyj72JB2/jPT18XCswdm7pdqV6Ai8XR7t2GVmaIiRvj5pubod9P07yjZSQ7+lsuVS39aO89Of58SUGXz51ABqWupu4trD/n3Z8647tHZ8tHPITs71cbOy52IF/XshSjI2NqZNmzYcPXpU+VphYSFHjx7Fx8enTPqmTZsSEBCAn5+f8jFkyBB69uyJn58fderUKfMebZA1uMU/ZmhoyG+//cbMmTP58ccf8fb2pnv37owbN45WrVoRHBwMgLu7u/I9ly5domfPnsq///jjDwYNGkRwcDANGzbE2Ni4zOfUrFkTa2tr5fYeNztzMwz19UkudTKalJVNA0c7je9xtLTQkD4LR0vNlwsZGxowv08X9gbcJEtHazw/5GCjWPai9AB0Snq28v/+jp4ezJnUg2u3ogm7q+rszpnUg4DbMZy+rJtf4kpztFJ8n6UHCpIzs8v9rm3NzTA00Nf4HjcnzeVpa27KrJ4d2HIxQOP/V4atiTmG+voklVq3ODk3CzfL8i/jsTQ04UT/1zDSN6CwqIgPru3lfIlB8pKG1vEiuyCPwzpensROGYv6OvLJ9zNpaFX+cg+WhiacGTwb4+JYFl3Zz9kE9VkDPV0b8WXHEZgZGJFw/x5TT60nNU+3HWQHG8U+VKauZGT9o7oy75ke+AVHExadXLxdC/LyC8jMVv8xKyXj0evgP2FnrCiX5Fz1ckm6n4lbReViZMLZQbMxNlCUy/tX9qsNkpdkrG/AG616sTvyBpkFujmG2ZkpjsVJ2aWOrdnZNLSzr9S23R0c2TpuHCaGhmTn5TFr925CUlIqtU1tS0qB0k2Ogz1kZulxP7eIjHvw4IEeDnbqP8I52MEdHZ63qMql1P5VyXKpa23DxJae/Op3mRV/XcTTxYX3u/Uk78EDtt8MrGy2y1Vhu2JVcbtSut1PvpdNgxLtypuDu3M1IobjgZqP1dpSYV2x//dlMqiJOx7OLgz9Y31ls/jIKorFrRKxlKQHvNujB39FRxOcrNsBPEdrxT6UfK9Uu3IvGwdr3S+7pQ0P+8VJWWX7xW4O5feLy6bPwtFCEbODhTmWJsY859OOr06e5fPjZ+jqVp/vRg1m0u9buBSp+Z4klY6leP9K1uL+pYttPtLnlnO+kpyVjVsF5yulyyU5U1UuADM7t6OgsIi1j2HN7YeelH3sSTp+2ZkWx5KjHktiTjYNbR8tlrfadyc+O+uxz9YuTVf9Fr+4WF4/fIA7qSk4WVjwaodObBo1jv7rfyMrP7+y2S7jYf++9HlX0v0s3Kwr7t+fG/yqsn+/8PKBcvv3QvuKirR/NfjjNm/ePKZMmULbtm1p3749X331FVlZWUybNg2AyZMnU6tWLZYuXYqpqSkepa5YsbW1BSjzujbJALf4V0aOHMnAgQM5ffo0vr6+7N+/n88++4xff/1VY/pWrVopF5dv3LgxBSXWPCvS0YKUubm5ZWaYm5iYlHvZxeNmqK/PV6MHgh4s2lv+2or/1lOdm/LmjL7Kv+d/tqPS25w/rTdudRx5frFqXbEu3g1p06IuUxasq/T2yzPIsymLhvVW/v3C2p06+6yHLEyM+XHKMEITkllx1Ffnn/eosgryGHH8R8wNjeno1IA3WvYjKjuVS0nhZdKOqNeaPXf9ySvU7TqW/1ZWQS5DDv2ChaExPi71WeDZl8isNC4mqjrAvgkRDDn0C/Ym5oxxa83XPiMZdXQVKbnamwXZz6cpC6ao7gg998udld7mG5N641bbgec+2lTpbT1uWfm5DDn8C+aGxnRyrs/bnn2JykzjQqL6iYmhnj7f+oxETw/ev6zjtTB0JCw1hUG//46ViTFPN27Csn79GL9l839ukPv/iZ6eHgEJ8Xx+XrGecGBSAk0cHJng4anVAe6BXk1ZNELVrsxavVNr2y6pZzM3OjSsw6ivH9/gsDa5WlqysHsPJu/YVuHl2dXR4t69aeLgwNhN2j9OD2jblHfHqfavV37cqfXPeBLoF1/ReTQ4lN+KB1KD4hNpXduV8d6tdDbALSrWooYzk9u3ZsQv1fO4VdKTuo/p8vilTbM82zO4YVPG7dlE7hPWhjx0MiJc+fxmchJ+cXGcmTaTgY3d2Rx4vfw3PmZZ+bkMPvSron/vUp93vPoQlZnKBZnFLR7R2LFjSUxMZOHChcTFxeHl5cWBAweUN56MjIxEX79qFwmRAW7xr5mamtK3b1/69u3Le++9x7PPPsv777/Pl19+CcCtW7fo2LEjoBhYbtSo7Nq1TZo04cyZM+Tl5ZWZxR0TE0NGRgZNmjT5V/n7J3eF1SQ1O4eCwkIcSs0IdrQwL/cS46TMLA3pLcqkN9TX58vRA6lpY83UNVt1Mnv7zOVQAkNUd4Q2Kr6Jkb2NOclpql987W3MCY74+xtGvTa1F51bN2TWkj9ITFHNOm7bog61nG059OvLauk/njOYazejeenDzZUNhWNBofhHxSr/Ni6+mYqjpTlJ91SxOFiaczNWcyxp2TkUPCgsM8PbwdKcpFIzqsyNjfh56nCycvN5Zf1uCgoLKx1DmfzkZlNQWIijqaXa6w4mFiTlln8TkyKKiMxSDL7dTI/DzdKJmY27lBngbuNQFzcrR167tEXDVrQrVRmL+ixkB1NLEu9XFAtE/o+9+46K8ugCOPwDKdKRIqCiKPYGIjbsJWo0do0lsSVGU0xiSzXFtE+NJtEkJjGxt8TYjTU27J0uKE0EkV6lKCh8fyxugQWN7mow9zlnz6HM7s7dmTsz++678+Yq9gYPy0rC3cqBVxv7aBzgzr9bSGxuBrG5GQSkx3Og7+uMqOvJ0sundFb/4/5RXIpS5YqJeq5kqeWKtQXhsfe/wvusF3vQyaMeU+ZuJDlDFX9aVi4mxkZYmptqnMVtZ635PLqSUaBoF3tTzXZxqGpZ5psD6oqBazkl7ZKZhLu1A6828dE4wG1kYMj3HYZSw8KGsb7r9Hb2NkBGvmIsdjAvNbaam5OS92ivW2FREdeyMgEISU6mpbMTE1p58dGhg4/0uLrkYAeppbbQT0sHS4tiqpoqtiOpUqW4zAUl0zIU99UXVbuU6l+P2C4publEpmuejRaZnk5f9wYP/ZjaHAmNIlhtXjGuaF65UfG8Unret7dSzSvt6rviamfL6Tmva5RZNPY5Ll6NZ+Kvm3USD9wnV3Ifrk2aV3fCwdyCnaNfVP7NyNCQtjVrMdbDk8Y/LqZIDycq6CMWdZ/26EGPevUYtXEjieVc0O1R+AZHERxTdt1ib2VOarbavGJlTnj847lo56O6ty5WP8sXFOvilNzy18Vly6vOuM3Iy6fw7l0iUzVzPio1ndauD7aV1sO417/stfSv1IfsX/p4zAd63nLer9jf5/1K6XaxVzsT2rt2TewtzDny9iTl/40MDXnvmS6Ma9eKnj+s0HEUCk9LH6vs45e6jFslsZhpxuJodv+5/pWWbXjNsx0v7P6Ty+lPfpzT17qltJsFt7mamUGdkrNVde3e+r70+y6Hqhak3Co/jvLX93KAWzy4qVOnMnXqVK3/8/X1rfC+q1at0n2FSpE9uIXONG3alNzcXHr37o2dnR3z58+/731GjRpFTk4OS5cuLfO/hQsXYmxszLBhwx6qPo96VdjCu0VcupFEh7qq/YEMDKB9PVcCridovU9AXAId6tbW+JuPe22N8vcObtext2Ximi1k5utn37S8W4VcT8pU3q7Gp5GakYN3M1X9zM1MaOruQkhExXvOzpzQg67e9Zn61Z8kpGRr/G/NznOMfX814z9Yo7wBLF7ry5dL9+kmloJCYtOzlLfI5DRSsnNp765qGwtTE1rWciYgVnsshXeLCL2RRPv6pdrT3ZWAWFX7WJiasOyloRTevcsba3eUe4G6R1VYfJfQzBu0d6yrqg8GtHesR0D69Qd+HEMDA0yqlP2scmgdL0IybnAlW7/7VQMUFhdxKSOBDtXVY1Hs7+af9uBnxhgaGGBiWPHnrg9S5p/Ku1XI9eRM5S36RhqpmTm0aarKFYuqJjRzdyY4Snvu3zPrxR50a12f17/exI1UzVwJi0mi8M5djcet7VwNFwfr+z7uwygsKiIkIwEfp0drF4NSr/m9g9tuVnaMP7qeTD1vGVNYVERIUhI+rqrXzQDwca2Nf4JuXzcDDDCpUkWnj/moPJvBmYuafzt1QfF3ABNjaNZQs0xREZzxU5XRh8KiIkKSk+hYq2y7+CU+fLtcSIinXjXNr6LXta1G/M2bD/2Y2uQVFBKblqW8RSUp5pV29UvNK67OBFY0r8SXnVfa1XclsGReWXbkPEMWrWXY4nXKG8D8v47ykY4vOHmvTbTmykO2yam4WPquW81zG9Yqb0FJiey4HMZzG9bq5eA2qOV9bc1YOtR+9Lz/tEcPetevz4ubNnE9O/v+d3gIebcLiUvNUt6iEtNIycqlbSO1/lXVhBZuzgRe/Xft+1+ewqIiLiUk0cFNrb8DHdwqWBfHa1kX162Nf3yC8jGDE5KoZ6/5aVxd+2rcyNJP29x73pDEJHzqlMqVOrXxv/Fw/Usfj/mgz6u1Xeq64l9eu1xPoL2WdrnXjjuCwxi4dC2Df12nvCVl57D89EUmbXj0b4T+41gqWR+r7OOXusKiIkJSE/FRu0CkAeBTow5+SeWPXVM82vKmVwfG791McKr+34s8iArnSB2uJ82NjaltY0Oynj7YUq3v3ZR/MwA6OLnhn/oP3kOi/T2k0I/iYoN/3e1pJD1a/GNpaWmMGDGCl156iZYtW2JlZcWFCxf4+uuvGTRoEJaWlixbtoyRI0fSv39/3nrrLRo0aEBOTg779ikOeFYpOYDQoUMH3n77bd555x0KCgoYPHgwhYWFrFu3jsWLF7No0aKH3oBeF9uRrDrtx7whfQi5kUxQfCLj27fCzNiYrf6KK3fNG9KH5Owcvj10EoC1Z/1ZM2EEEzt44Rtxlf7NG9GshhOf/KU4G9DI0JDFzz9HU5fqvLphO1UMDZRnFGfl36Lwru7PFFa3cZ8fE4a0Jy4xk4SULF4Z0ZHUzByOXYhUlvnhw+EcvRDJ5r8DAMW2JL19GvPeNzvIyy/ArmR/4ty8Am4X3iE9K0/rhSWT0m6WORiuS2tO+TGlezuupWZyPSOLt57xIflmLodCVfuAr3h5GAcvRbLhTCAAq074MXd4H0KuJxN8PZFxHVthZmLMNj9Fe1qYmrBs4lCqGhvx3p/7sDQ1wdJU8c2C9Nx8nb+RXxV1mrleQwjJuEFwRjzj3NtjVsWYbbGKr1DO9RpC8q1svgtVXMzhlQadCMm8QVxuBiaGVeji3IABri35PHC3xuNaGJnSp0ZTFoTo9uBJRVaEn+XrtgMJyUggKD2eCQ3aYWZkzJYYxWv/dZuBJOXf5JuQIwBMaexDSHoCsSWxdHWpz6A6LfjUby8AZlWMea1JJw7fCCf5Vg7VTMx4sb43TmZW7L2uv3147/njb39eGtCOuMQMbqRm8+pQH1Izcjjqp8qVJe8Ox/diJJsOBQDw7tge9OnQmFmLd5J3q0C5l3dOSa7k5hew81gI00Z1JTvnFrn5t5n1Yg+CIm4QoocD3KBolwVtBxKcXtIuDRXtsvmqol0WtFW0y8JgRbu82tiH4IwEYnMU7dLNpT6D67Tg04uKdjEyMORHn2E0q+bCK8f/wNDAQHkGSVZBPoV6+LYDwHK/iyzs05fg5CQCExOZ2MoLc2NjNl9S5O7CPn1JyslhwUnFthbGhobUt1fsQ2hcpQpOllY0cXQkr6BQecb2Ox074RtzlRs3b2JpbMLAxo1p7+rKhK36vbBxbh6ofyP6egKERYCNNdRwgm9/haQUmD9b8f9Rg2DDNljwMwzrpzhwvc8Xfpmneozxz8MHc6F5Y2jRGNZshvx8GPKsXkNhWcBFvunVl6DkRAKTEnnJ0wtzI2M2l3wl95tn+pKYk8OC02rtYlfSLoZVcLa0pImDI3mFqnZZEXCRzcNH87p3W3ZHhOPh5Mzo5i358LD+x7O1J/yY0qMdsSXzypu9fUjOzuXQJdW8svyVYRwKiWTDaUUOrT7ux/+e78OlknllbCfFOmHbBUXfTM3J03oWZULmTeIzdD9HLve7yMLeWnIltCRXepfkyintbeJkaaXRJrmFhWX2d80rLCTz1i2971u94uJFFvTtS3BSSSxepfK+r6J/LTyhPe+drUryvrCQa5mZAHzWowcDGzdmys6d5BQUKM+wvFlQwO07+t3Oa72vH6/0aUdscibxaVm88ZwPKVm5HAlS9a+lU4dxOCiSjccU/cvMxJjajrbK/9e0t6ZRTUey8m6RmKH40Mfa3BSXatY4llzLoY6T4gOi1OzcMnt+P6qVZ/2YP7APIQnJBN1IZHxbRX/fEqRok68H9CHpZg7f+CrWxavP+bNu7AheaueFb+RV+jdtRHMXJz7eo/qWzPIzF/huSH/Ox17nzLU4uri70b1BPcau1e830FZcuMiCfn0JTkwiKCGRCd5emBkbszlEEcuCfn1JupnDwuNq/cuh1LxSvWReKelf93tMfVl5xo/5g8q2y9ZAxfPOH6Rol28PK9plzTl/1o4bwcT2XhyNuEq/Zo1oXsOJT3Yr2iUz/1aZE3AKi+6SmpPL1dJfF9J1LE9JH3uaxq9lQRf4pls/glMSCUhJ4OUW3pgbG7MpvGSu79aPpNybfH3+OACverRlundH3j68m+s3s3E0U4xNuYUF5N1R7EltY1qVmpbWVC85m7qejWLcSsnLJSVff994WO5/kYXP9CU4SbFumVhq3bLwmb4k5VYwR1qUXbd80Kkrh65GEZ+djZOFJdPa+3C3uJi/wi/rLY4VV86yoJ1ifR+YdoOJjdoq4rgapIij3QAS826yMNgXgFeb+BCcrra+r1GfwW7N+eSi6mQ0G5Oq1DC3wclM8e3ielaKD4VSbuWU2e9biH8rOcAt/jFLS0vatWvHd999R1RUFIWFhbi6uvLKK6/w4YcfAjBkyBBOnTrF/PnzGTduHOnp6djY2ODt7a28wOQ9ixYtomXLlvz000989NFHVKlSBS8vL7Zv386AAQOeVJgA7L0Ujp2FGW9274CjpTlhiSm8sm4baSVfe6thY6Wxh7h/XAKztuxlWg8fpvfsSEx6JlP/2ElEsuJNoJO1JT0bK67aveO1sRrPNW7VJs7FPPinrg9j3V/nMTM15v1Jz2BpbkpQeDzT522loFB1lnJNJ1tsrMyUvw97xhOAnz4ZqfFYX/yyjz3H9Ltgr8jyYxcwMzHmsyG9sKpqit+1G0xeuVXjjGtXOxuqWahi2Rdc0p69OuBgpdjOZMrKbcoL8zStUR2P2oqraO+f9ZLG8/X6ejk3MnV7MGJf/CXsTCx4s0l3HEwtuZyVyJTT65QXBXQxt6EIVf8yMzLhE4/+OJlZc/vuHaJvpvLexa3si9dsh341m2OAAbuv6/7imOXZcz0UO1Nz3m7WFceqFoRlJvHy8d+VsdQwt6FYLRbzKibM8XoWZ3Mrbt29Q3R2KrPO7mBPycHru8VFuFvZM8RnGHYm5mQU5BOcfoPRR1YTmZ2q93jW7DlPVVNjPpyoyJXA8Hje/qZUrlS3wVYtV4b39ARg6QfPazzWZ8v2sfuEIq7vfvelqLiYeVMHYGJchTPBMXy99hD6sicuFHtTc6Y1V7RLaGYSLx3TbBf1D27MjEz4zOtZnM1K2uVmKjPP7mBPnKL+TmZW9KqpuIDwrj6TNZ7rhSNry+zTrSu7w8OxMzNnegcfHMzNCUtJYcK2rcoLONWwstKIo7qlJbtfVI2xk729meztzZm4OMZsVryhtTc355s+fXG0sOBmQQFXUlOYsHULJ2L1+1XNS1dg/DTVWRPzlyh+Hty3mLkfQEoaJKjthFPLRXEwe96PsHYLODvCF+9Ap7aqMv16QEYmfL9CcVHKJvXh1wX63aIEYHfEFezNzJjRriMOFiXtsnOL8mJUNSytNdvFwpI9o8cpf5/s1YbJXm04cz2O0dsU21kFJSfx6p6dvNOhE2+16UBcdhZfHD/CDj2+Ubxn+VHFvDJnWMm8EnODKSvKziu26vNKkGJemdq7ZF65kcKUFdvKXPDtcdkdUZIr7UtyJTWFCdsryBULS3a/oJYrrb2Z3NqbM9fjGLNF/1tcVWR3eDh25uZM81Hl/cStW5UX8XPRkve7xqpiecXbm1dK8v6FTYpYXvT0BOD35zXH6Xf37WNLqH4/PF11UNG/Ph7dCyszU/yjb/D6T6X6l4PmuqVZbSeWvT1C+fusod0A2Hn2Ep+sU3zo062FO5+/2EdZ5uuJ/QH4Zc9pftmr22uI7AlT9Pe3unbA0cKcsKQUXv5DtS52sdFsE//4BGZu38u0bj7M6KZYF7+xaScRKaoPRw5cieLTvYeY4tOGj3p352p6Om9u+YuL1/V7ZvueK+HYm5szraMPjhbmhCan8NJmVf/SNq/8NV6tf7X15pW23pyNjeOFjZse6DH1ZW9oOHbmJe1iqWiXSRvU2sW6VLtcT2DWtr1M6+7DjO4l7fKnZrs8KU9LH3uaxq9d0VcU84p3RxzNLQhLS2b8ns3Kub6mpeb74RebemJaxYhfnhmk8TiLLp5k0UXFFoPP1HFnYbd+yv/92GtgmTL6sDviCnZmZkxvr7Zu2aG2brEqu27ZPUZt3dK6DZNbK9YtY7Yq1i3OlpYs7tMfW7OqpOfnc+FGPMP+3EB6vv6+4bg7Lgw7UwumNe+KQ8n7rolH/9B8D1ms/r7LmM9b91Vb36cx88wOdseFKcv0qtGQr9upjr187zMUgMUhx/j+0nG9xSKELhkU6+sKf0L8izWe892TrsIjuTxnuvLnDmO+eYI1eXSnN8xU/tz0w8rdLqH/U7VL0+1znlxFHlHo4DnKnxts+vLJVUQHIkZ8pPy57YRvn2BNHt25VTOUP9f/s/K2S+Tzqjap913lbpPo6ao2KUp8uOtF/FsYOocrf677Q+WeV66+qZpXmr1XeeeVS/NVc0q9xZU8V95W5Yr7t5U7lqgZqlg836y8/Qsg4AdVH2v4VeWNJXy2Ko76Cyp3/4p8R9W/Gn1RedsE4MrHT1//eprGL7dfFzzBmjy6mMnvKH+u933lXrdEv6Vat7hv/OoJ1uTRRI2c/aSr8K/VbMecJ12FMi4NmvOkq6Bzsge3EEIIIYQQQgghhBBCiEpJDnALIYQQQgghhBBCCCGEqJRkD24hhBBCCCGEEEIIIYTQMdkY+vGQM7iFEEIIIYQQQgghhBBCVEpygFsIIYQQQgghhBBCCCFEpSRblAghhBBCCCGEEEIIIYSOFRcbPOkq/CfIGdxCCCGEEEIIIYQQQgghKiU5wC2EEEIIIYQQQgghhBCiUpItSoQQQgghhBBCCCGEEELHZIuSx0PO4BZCCCGEEEIIIYQQQghRKckBbiGEEEIIIYQQQgghhBCVkmxRIoQQQgghhBBCCCGEEDpW/KQr8B8hZ3ALIYQQQgghhBBCCCGEqJTkDG4hhBBCCCGEEEIIIYTQMbnI5OMhZ3ALIYQQQgghhBBCCCGEqJQMiouLZTsYIYQQQgghhBBCCCGE0KGGW7540lUoI3zYx0+6CjonW5QIIYQQQgghhBBCCCGErslpxY+FbFEihBBCCCGEEEIIIYQQolKSM7jFf1LTj7570lV4JKFfTlf+3Oalb59gTR7d+RUzlD83/qxyt8vlT1Xt4r7xqydYk0cTNXK28me3tfOeYE0eXczY95U/e75ZuftXwA+q/lVvw/+eYE0eTfSYD5U/159fudsk8j1Vm9T94ZsnWJNHd/XNmcqfixIbPsGaPDpD53Dlz00+qbx9LOxzVf9q+L/KGwdA+IeqWBrMrdyxRHygiqXl9ModS9B3qlgafVF5Y7nysVr/mld54wCIeF8t77+q3LGEz3468l495+stqtzvu6Knqd53PU3rlqdpPem2dOETrMmjiZky60lXQfzHyQFuIYQQQgghhBBCCCGE0LHiYoMnXYX/BNmiRAghhBBCCCGEEEIIIUSlJAe4hRBCCCGEEEIIIYQQQlRKskWJEEIIIYQQQgghhBBC6Fhx8ZOuwX+DnMEthBBCCCGEEEIIIYQQolKSA9xCCCGEEEIIIYQQQgghKiXZokQIIYQQQgghhBBCCCF0rLjY4ElX4T9BzuAWQgghhBBCCCGEEEIIUSnJAW4hhBBCCCGEEEIIIYQQlZJsUSKEEEIIIYQQQgghhBC6JluUPBZyBrcQQgghhBBCCCGEEEKISkkOcP8HrFq1CltbW+Xvc+bMwdPTU+/P261bN6ZNm1ZhGTc3NxYtWqT3ugghhBBCCCGEEEIIIZ4+skXJY2RgUPHXEj799FPmzJmj93rMmjWLN998U+/Ps3XrVoyNjfX+PI/L1J4dGOHdAquqpvjH3uDznYe4lpZZ4X1Gt/PgpU6tcbC04EpiCl/tOkJwfJLy/yO8W9DfoxFNXapjWdWUdl/+xM1bt/Uax5TBPgzu0hxL86oERcYzb80h4pLLj6NVw5qM7etNYzcnHG0tmfXDDo76R2mUsbM2583hnWnXvA5WZqb4h8ezYP3hCh/3UY1p48HLPorX9nJiCl/uPULwjaRyy/dp2oC3u/tQ09aaa2mZLDx4nGORMQAYGRrydg8futavS61qNuTcvs2p6Fi+PXiC5JxcvcUA8GL91rzSuD2OVS0Jy0ziM7+/CUq/obVs75qNeL1pR+pYVsPI0JCYmxksv3KG7ddCFHEYGDKjRVe6udTH1dKWm4W3OZV0la8Dj5B8K0evcQCMbejFlGbtcDSzICwjmU/PHSAwLUFr2VH1PRharzmNbB0BCE5PZIH/UY3yMWPf13rf/108zK+h53QfQCmv9evAUJ8WWJmZEnD1Bv/beIjYlMxyy3u512R8T2+a1K5OdRtLpv+2kyNBmrnSw6M+Izq2pEnt6thamDFy3jquxKfoNY6xDVrzSpN2OJpZEpaRxJyLfxNUTruMdPdkaN0WNLR1ACAkPZEFgb4a5R2qWvCuZ3c6O9fF2qQq55Jj+ezi38TczNBrHC+28mBSu9Y4WlgQlpzC5wePEJRQfs4/26gB0zr7UMvGmpiMTL72Pc7R6Bjl/+3NzXm3Wyc6udXBuqop5+Pi+ezgEa5lZOo1DoCxLTyZ7OWNo7kFYakpzDl2mMCkRK1lG9jZM72dDy2qO1HL2obPjx1hZaBfmXJOFpa879OZrnXqYmZsRExmJu8e2k9wcvmv0aM4HwgrfodL4ZCSZsAPXxbTq3PF9znnD/OWQGQMuFSHV8fCkGc1y6zfBiv+gNR0aOwOs9+Glk30EoKGMW09eKljyZySlMJXuzXn69L6NGvAWz1K5pT0TL75+zjHImKU/3+mSX1GtmlJsxrVsTU3Y8hP67icqN9cv+eF1h683K41jiWxfPF3xbnSt3EDpnX1oaaNNTHpmSw8cpyjUTEaZdzt7ZjVvRNta9eiiqEhUalpTN26i4Tsm/qNxask7y0tuJycwucPEkuXkrxPz2SBr2YsER9M13q/+YePsezsRV1Xv4zX+3ZgWAfFWjIg5gZfbjpEbGpmhfcZ2dGDCT1a42BlQfiNFOZuPUJIrOo1qGVvw8yBXWhVrwYmRlU4efkac7ccIT0nTy8xjPH24OUOav1rX8Xrr75NGvB2N0WuxKRnsvCQav0FMHdgb4Z6NNO4z/HIGCb9vk0v9Ven7F8WJf3rwH36VyMt/UttXjE3NmZWt04808AdWzMzrmdlseZCAL8HBOk/ltYevNy+VN5X1C738v5euxwuJ+97lMr7LZL3D2psSw9e8Vab648cIaiiub6DD82dqlPL2oYvjh5hpb+/RpkXWrbkhRYe1LS2BiAiPY0fzp7haEyM3mK452lYt9yj6/WkubEx73TtxDMN3bGtqsj71RcfT96PbebJFI82ivdeaSl8evIQgSna22VU4xYMbdiMRnaKNX5wShILzh0vU366d0dGN26BtakpFxJv8NHxA8RkZ+o7lKdecfGTrsF/g5zB/RglJCQob4sWLcLa2lrjb7NmzVKWLS4u5s6dO3qph6WlJfb29np5bICCggIA7OzssLKy0tvzPE4vd/bmxfaefLbjIKN++Z38gkJ+HT8UE6Mq5d6nb/OGvPdsF346cobhP63ncmIqv04Yip2FmbJMVWMjTkRc49dj5x9HGIx7tg0je3kyd80hJn65gfzbhfwws+I4zEyNCY9L4et1h8sts2DqQGo42jDr+x28+Nk6EtKyWTJrOFVN9PMZ2rPNGvJ+7y4sOXqGoUvXcyUplWUvDsXO3Exr+Va1XPhmWD82+4cwZOl6Dl6J5MdRA2ngqMiDqsZGNHWuzk/HzjLs1/W8ufEv6tpX46fRg/RS/3v6uzbhQ89efH/pOAP/Xs7lzGRWdR2Fvam51vJZBfn8FHqS4QdX0X/fb2y5Gsj8tgPo7FxPEYeRMc2qOfNj6AkG/r2c109upq6VPb92fl6vcQA8V6cxH3n3YHHQCfrvXkloRjJreo7Evqr2WNo712ZnTCijD2xg6L41JORms7bXSJzMLJVl2mz6QeP2zqndFBUXszf2it7jmdDLmzFdPflq40HGfvM7+bcL+en1B8iV+BTm/ll+rpiZGOMfHc/iHSf0Ue0y+tduwodePfk+5AQD9q4gLDOZ1d3L72PtnWrz17VLjDm4nmF/K9plTffRGu3yS5dh1La0ZcqxzTy3dznxudms7TEGsyr6+0CzX+OGfNijCz+cPMOgVeu5nJzKyucryPmaLnw3sB+bgkIYuGo9ByIi+XnoQBo4qOa+X4YOwNXWhle37mTgqvXEZ2ezZuQwzIz1+9l//waNmN25K4vPnea5P9YSlprC6oHDsDfTHouZkRFx2VnMP3Wc5FztH1RZm5qyefgoCouKmPjXVp5Zv4r/nThK1q1beosjPx8a1YePpz1Y+esJ8Or70K4VbFsG44bDxwvghNpnVXsOw/wl8MZ42PIbNHKHV2ZBmn4/O+HZ5g15r28XlvieYdgv67mSmMpv4zTna3Weri4sHN6PLX4hDP15PYfCIvlh9EAaVFf1LzMTY/xi4/nm78eT6/f0a9KQD3p24ccTZxi8QpEry0dVnCvfDu7HpoAQBi9fz8HwSJYMV82PAK62NmwY+zzRaRm8uH4TA5atZcnJs9zW0zpVPZYP1WIJS0plxcj75P2gfmwODGHQivUcjIjkp2Gaed/h+6Uat/d37aeouJj9VyL1GgvAxB7ejOniyRebDvLCIsW88surFc8rfTwb8s7gLvyy/wwjv1nPlRup/DJlKHaWitfAzMSIpa8OpZhiXvlpM+O/34hxFUN+mDSI+5xX81CebdqQD57pwpJjZxjy23ouJ6WyfMx91l9D+7E5IITBv63n0JVIljyv2b8AjkVepeO3S5W3Gdv26L7ypdybV348cYbBK9cTlvwP+tdK7f3rg55d6VLPjZm79tF32WpWnffnk97d6VG/nn5jadKQD3p14cfjZxi8/AHzfkg/NgWGMHhZSd6P0JL340ryft0mBvy2liUnJO8fVP+GDfmwS1e+P3OGARvWEZaSwuohQ8uf642NiM3K4usTJ8qd6xNu5vD1yRMM+n09g39fz+m4OJYOGEQDO/29r4enZ90C+llPftijJO//2kefZatZecGfT5/pTk895/1z7o34qEM3Fl88Tf8tawlNT2ZN/+Hlv/eq4crOyMuM/msjQ7dvICH3Jmv7D8fJXLXGf9WjLRObt2L28QMM3rae/DuFrOk/HNMq5c9TQvybyAHux8jZ2Vl5s7GxwcDAQPn75cuXsbKyYu/evbRu3RpTU1PWrVuHoaEhFy5c0HicRYsWUadOHYqKigDYuXMnDRo0oGrVqnTv3p3Vq1djYGBAZmam1npo26JkxYoVNGvWDFNTU1xcXJg6daryf5mZmUyaNAlHR0esra3p0aMHgYGBZR5v2bJl1K1bl6pVqwJltyhJTk5mwIABmJmZUbduXdavX1+mbvd7rsDAQLp3746VlRXW1ta0bt26zOujD+N8vFjqe47Dl6MJT0rl/c37qG5lQc8m7uXeZ0JHLzZdCGGbXyhRKel8tvMgtwrvMLR1c2WZtaf9WXbsPIFx2s+m1LXRz7RixV9nORYQReT1VD5dtg8HW0u6etUv9z6ngmP4ZdspfP20LwJrO9nSsn4N5q89RGhMEtcSM5i39iCmJkb0addYL3FMaO/FJr8QtgaEEpWazqe7FK/tsFbNtZYf264VJyJjWHHqItGp6Xx/5DShCcm80NYTgJzbBby8biv7QsO5mpZBYHwiX+w9QvMaTrhY6+9DmpcatWNjdABbrgYRmZ3KRxf2kH/nDsPremgtfzYllr/jrxB1M43Y3ExWRZznclYy3g6uijgKbzP+6O/siQvj6s10AtJuMMdvPy3sXHAxt9ZbHACTmrblj4hANkUFE5mVxuwz+8i/W8jz7i21lp924i/WhfsTmpFMVHY6753ZiwEGdHRxU5ZJuZWrcXvGtQGnE68Rl5Ol11gAXujmxW/7z+EbHE3EjVQ+XrsPRxsLurcsP+dPhsawZPepMmdtq9t9Poxf953l7JVYfVS7jJcbt2VjVACbo0v62Lm95N+5wwh37X1s+qmdrIvwIywzmejsNN4/twcDAwN8nN0AqGtlh5dDLT4+v4+g9ASu3kzn4/N7Ma1ixAC3pnqL46U2XmwMDGFLcCiRael8vP8g+YV3GNFCe85PaN2KY9ExLDt3kai0dBYdP01oUjJjvTwBcKtmS6uaNfj078MEJyZxNT2DT/YfoqqREQOa6GfcumeSZ2s2Xgpmc9glIjPSmX3kAPl3ChnRtIXW8kHJScw9eYxdEVcouHtXa5lXW7clIecm7x7aT2BSItezszked43YbP3lSpf2MG0SPNPlwcr/sQNqusB7b4C7G7wwFHp3hdWbVGVW/wkjnoOh/aC+G8yZCVWrwlY9H+sa7+PFposhbPNXzNdz/iqZr720969x7UvmlJMlc8rh04QlJDOmnaeyzM7AMH7yPcup6MeT6/dMbOvFnwEhbA1SzI+f7D3IrTt3GO6hPZbxbVpxPCqG5WcVubL42GlCE5N5sbWnssyMbh05FhXDgiPHCUtKIS4zi8MR0aTn5es1lpfaaub9J/sOKubIluXE4t2K49ExLCuJZVFJLGPVYknNzdO49WzozplrccRl6n9eebGrF7/9fQ7fkGgiElKZvWEfjtYW9GhR/rwyrpsXW06HsONcKNFJ6Xyx6SD5BXcY3E7xGnjWrUENO2s+3vA3EQlpRCSk8dGG/TRzdaJtg9o6j2Fiey/+9A9ha2DJ+mt3yfrLs5xcaduK45ExLD+tyJXFvor114ttPDXKFdy9q9Eu2Xr+NiOU078KH6B/qc8rpfqXV00XtgWHci72OvFZ2WwMDOZycgoeLs56jWViu1J5v+c+ed+2JO/PlOT90ZK891bFosz7w5L3D+Nlr9ZsDAlhc+glItPT+eiQIo4RzbTHEZSUxLwTx9gVXv5cf/hqNL4xV4nJzORqZibfnDpJXmEhrVxc9BYHPD3rFtD9ehIUeb81JJSzcdeJz1blfUs95/2kFt78ERbMpishRGamMfuYol2eb6w9lmmH97AuNIDQtBSiMtN57+h+DAwM6FhTNVe81MKLH/zOcOBaFJfTU5lxZA9O5pb0div/WIEQ/yZygPtf5v3332fevHmEhYUxcOBAevXqxcqVKzXKrFy5kgkTJmBoaMjVq1cZPnw4gwcPJjAwkClTpjB79ux/9Jw///wzb7zxBpMnTyY4OJidO3dSv75qEBsxYgTJycns3buXixcv4uXlRc+ePUlPT1eWiYyMZMuWLWzdupWAgACtzzNhwgTi4uI4cuQImzdv5qeffiI5OVmjzP2e64UXXqBWrVqcP3+eixcv8v777+t9G5Ra1WxwtLLgdJTqTWrO7QKCrifi6VpD632MqxjStIYTZ9TuU1wMp6Ni8XTV7yKkPDUdbXCwteRcqKpOufkFXIpOpKX7w9fJ2EhxtuPtQtUZHcXFUHjnLp4Naj58hct7PkNDmtVw0jhoUAycjo7Fs5b2ODxdXcocZDgZda3c8gBWpqYUFRfr7U2WsaEhzau5cCrpqvJvxcCppKu0cqj1QI/hU92NelZ2nEsp/wCKlbEijpsF+jsjwtjQkOZ2zpxMjFH+rRg4mRCDl+OD9QGzKsYYGxqSeVv7GyeHquZ0r+nOxkj9f92vpr0NjjYWGgehc24VEByTiEdd7Tn/b6RoF5ey7ZJ4lVYO/6BdDAzJuq3oPyaGijM4bt9Vy3cUBye8HV11VXUNxoaGNHd24uQ1zZw/FRNLq5rac7hVTRdOXdPMi+NXrynLm5SciaJ+Jtq9OFrX0l8bGxsa0ry6EyfiNGM5GReLl/PDj8O96roTlJTEkr7Pcf7l19g1aiyjmml/4/mkBFyCDq01/9apjeLvAAWFiu1O1MsYGip+v1dGH4yrGNLMxUljjlfO1+XMER6uLpwuNaeciLz2xOb3e4wNFbGciimVK1dj8SwnVzxrumiUBzgRrcoVA6Cre12upmewfNQQTr89hU3jR9GrYfkHZXXB2NCQZs5OnLr6D/M+pmzelxe7vbk53dzrsjkwRGf1Lk9NexscrS04E15qXrmWiIeb9jHHqIohTWo5adynuBjORsTiUadkLDMyorgYCu6oDiLdLrxLUXExXjqer5T9q3SbXI2lVXnrr1ounL5atn+Vzq22dWpxasYU9r0+njnP9sDWrKpO616asn+VzpWK+leN+/cvv/gEejSoh5OlBQDtatfCrVo1TsRc030QJSpql3LXxTVdNMqDlryvr5b306awaYLk/YO6N9efjFO1ezFwMvaazg5GGxoY8FzDRpgZGeGXoH1rQ114mtYt+lhPgiLve9ZX5X37e3l/Vb9539zRiZPxpfrY9Vi8nB5s7DczMip576VY47ta2VDdwlLjMW8WFBCQnPDAjykqUPwvvD2FZA/uf5nPP/+cZ555Rvn7pEmTePXVV/n2228xNTXFz8+P4OBgduzYAcDSpUtp1KgRCxYsAKBRo0aEhITw1VdfPfBzfvnll8ycOZO3335b+bc2bdoAcOLECc6dO0dycjKmpqYALFy4kO3bt7N582YmT54MKLYlWbNmDY6OjlqfIzw8nL1793Lu3DnlYy9fvpwmTVQbaz7Ic8XGxvLOO+/QuLHiDLsGDRo8cJwPy8FS8TWf1FJ7Gabl5OFgpf0rQLbmZhhVMdR6n3oO1fRT0fuwt1bUNS27VJ2yc7G3sXjox41JTCchNZs3hndi7uqD5N8uZEzv1jjZWWFv+/CPW55q5mYYGRqSlqsZR2puHnXLeW0dLC3Kls/JVbZtaSZVqjCrVyd2B18mt2TLHV2rZmKOkaEhqbc09/hOvZVLPevyv2poaWzKqQFvYVKlCkXFxXxycR8n1Q6SqzMxrMJ7LXvwV+wlcu7oJw6AaqYlseRrxpJyKxd3mwf72uT7Xt1Iys/hZEKM1v8Pq9eC3MIC9j+G7Ukc7uXKTc0+k34zT5lHlYGyXbT0MfcK+pi69zy7k5Sfw4lERR+Lyk4jPjeLdzy6M/vcXvLvFvBSo7bUsLCmuto2JrpUbs7n5VHPvpyct7AgtcwYkYujhaL9otMziM/KZlbXTny07yD5hYVMbOOFi7UV1S11P27dU81MEUtqXqk2ycvDvZrdQz9ubWsbXmzhwbKAiyy5cA4PJyc+7dKdgrt32Xo59FGrrROp6VB6iLa3g5xcA27dLib7Jty9a4B9Nc0Vt301uFr+Z3iP7N58Xbp/peXmUdex/Dml7Pxe/pzyuNzLlbJ9v4JcsdSeK/disbcwx9LUhMkd2rDo6EkWHj5BZ3c3fhw2gLHrN3E+Nl6/seSVbRf3fxiLYzntMrRFU3ILCh/L9iT31otpWtaF9uWsJatZlPTNUnNR2s086lZXvAZBMQnkFxQyfUAnvt99EgMDePu5ThhVMcTBWrdjmXIsLh1DbvlrW21tkpaTi4OFKubjUTEcuBzJ9cwsXKvZMqN7R34bPYSRK/+gSE+blpaXKw/Vv9Ri+eLAEb7o24sTUydTePcuxcXFzN53kPNx+skT0HHeW5ST90dO0LmeGz8OH8DYdZL396Oa68uuW9ztHn6uB2hk78DmkaMwNTIir7CA13b9RaTaSWe69jStW/SxngT4/OARvuzTi5NvqPL+w30HOX9dj3lf1Uz7e6/8XNxtH6xd3m/XlaTcXOUBbUdzi5LH0Iw3JT9P+T8h/u3kAPe/jLe3t8bvgwcP5o033mDbtm2MGjWKVatW0b17d9zc3AC4cuWK8oDxPW3btn3g50tOTubGjRv07NlT6/8DAwPJyckps2d3fn4+UVGqr+HXqVOn3IPbAGFhYRgZGdG6terUrMaNG2Nra/uPnmvGjBlMmjSJtWvX0qtXL0aMGIG7u/azCW7fvs3t25pn35qamioPnpfnOY/GzBmoej1eXbu9wvL/Vn3bN+aDcb2Uv09ftF0vz3P3bhHvLtnJxxN7c/jHN7hzt4jzobGcDLqql/0f9c3I0JBFI/qDAczZXf5eyk9KbuFtBvy9DHMjE3yc3Jjt2Yu4nAzOljqL28jAkB98hoKBAZ9c2PuEavtgXmvWngFuTRj19wZuF2n/KuPz9Vuy/Wpouf9/FP28G/PRKFXOv/nLdp0/R2X0atMOPFenKWMOraOg5HW/U1zEa8e2MK99fwJGzOBOUREnE6/ieyMSxTlflcOdoiJe3/YXc599Br9pr3OnqIhTMbH4RlXOccvAwIDg5CQWnlbs9xyamkxDewdeaO7xrznALSonw5KEOBQRxarziguehSWn0KqmC6NbtdTbga7HYZhHM3ZeCiv3K/SPop9XYz55XjWvvPHbdp0/B0BGbj6zVu/io+E9GdO5leI6Ff5XCI1LoriSXNFqz6Vw5c/hyWlcSUrl0Jsv0bZOLc7ExD3Bmv1zY1t74lnDmSmbdxCflU0b15p8+kwPkm/mljkL9N9MmffhUaw6V5L3SSm0quXCaC/J+ycpOiOd59avw8rUhGcbNGRB7z6M3vynXg9y68PTtG65l/eTN+8gPjubtq41mfNMD5Jz/r15/5pnWwa4N2LUXxu5XUlzQQht5AD3v4yFheanYyYmJowbN46VK1cydOhQNmzYwOLFi3X2fGblXBzinpycHFxcXPD19S3zP/WD06Xr/TAe5LnmzJnDmDFj2L17N3v37uXTTz/ljz/+YMiQIWXuM3fuXD777DONv3366afMmTOnwnocDosiSG1PbJOSLTgcLM1JzVF9Smpvac7lhBStj5GZl8+du0VlzuaytzQvc9aXvhwLiCIkWnVV5HsXMbK3NictSy0OawvCY5PL3P+fuHwtmRfmrMPCzARjoypk3sxn5UejCYvR/VWwM/LyuVNUhL2F5mvrYFH+a5uak1u2vJYz8IwMDflueH9q2FgzYc1mvZ29DZBRkMedoiIcqmrmjkNVC1JKnXGrrhi4lqO44lpYZhLu1g682sRH4wD3vYPbNS1sePHIer2evQ2QcbskFjPNWByrWpCSX34sAK80bctrzdvzwoE/uJypPZ/aVK+Fu409U4/v0Fmd1fkGRxEcUzbn7a3MSc1W1d/OypzweO11/DdStss/7GMAkxq349WmHRh7eEOZdgnJSOS5vcuxMjbF2LAK6bfz2Np7PMHp2q/a/qjKzXlz8zJn1dyjfiaasryFBSlq5S8lJTNw1XosTUwwqVKF9Px8No8dRUii7setezLyFbE4lDoTxsHcnJS8itukIim5uUSmp2n8LTI9nb7u+v+W04NysIPUUheLTEsHS4tiqpoqtiOpUqW4zAUl0zIU99WXe/N16f5lb2FO6s3y55Sy83vZOeVxu5crZfu+uUbfV5eaoz1X7sWSkZdP4d27RKZq9q+otHRa19L9NmT3KGMxL9suKRXM9VrzXkt571o1cbe3Y9r23bqrtBrfS1EEL9Qyr1hqziv2luZcuaF9XsnILembpc7wVsxNqphOX4ml/1crsbWoyt27xdy8dZvDn03meppu97JVjsWl+/591l+l28Reyxm36q5nZpGem0cdO1u9HeAuL1fsHyJX7pU3NarCjK4deWPrX/hGKb71dCUllSZOjrzcrrXeDnTpNO9z75P3qem0dpW8vx/VXF923ZKS+/BzPUBhURHXsjIBCElOpqWTExNaefHRoYOP9LjleZrWLfpYT5oaVWFml468vvUvfKPV8r66I5Pa6jHvb+Vrf+9l9gDvvVp685pnW17YtYnL6anKv99rT0czzbZ1NDMnNO3RjhUIKC6uhGfQVEKyB3clMGnSJA4ePMhPP/3EnTt3GDp0qPJ/jRo1KnORxfPnzz/wY1tZWeHm5sahQ4e0/t/Ly4vExESMjIyoX7++xs3BweGBn6dx48bcuXOHixcvKv925coVjQthPuhzNWzYkOnTp/P3338zdOjQMnuU3/PBBx+QlZWlcfvggw/uW9e8gkJi07OUt8jkNFJu5tLeXbW/rIWpCS1rORMQp33Ps8K7RYTeSKJ9PdV9DAygfT1XAh7TBSXzbhVyPTlTeYu+kUZqZg5tmqouJGFR1YRm9ZwJitJNnXLzC8i8mY9rdVuauDlx1L/8i+09rMKiIi7dSKKD+mtLyWt7XXscAXEJdKirebEln3q1NcrfO7hdx96WiWu3kJmv36t4FxYVEZKRgI+Tm/JvBkAHJzf8U68/8OMYYoBJFdVnlfcObrtZVWOc7wYyC/R7MSAoiSU9UXkhQlDE4uNcB7+U8s/ymdK0HW+28GH8oT8rPDg6sr4HQWkJhGXoZ3GVd7uQuNQs5S0qMY2UrFzaNlLL+aomtHBzJvCq/vY51DVFu5TtYz7Obvinlt8uk5u0583mHZlw5I8K2+Vm4W3Sb+fhZlWNFnYuHLgeXm7ZR1FYVERIYhI+dTRz3sfNFf947TnvH5+ATx3NnO/oVltr+ZyCAtLz86lTzZYWzk4cjND9uHVPYVERIclJdKylqpsB4ONaG7/Ehx+HLyTEU6+a5tdr69pWI/7mzYd+TF3zbAZnLmr+7dQFxd8BTIyhWUPNMkVFcMZPVUYfCu8WcSmhnPm6nDklMC6B9vVKzSnutR/b/F6ewiJFLB3cNHOlg5srAeXkSkB8Ah3cSsVSV5UrhUVFBCckUa/U1+rr2lXjRna2bgNQU1hUxKXEsrH41Kk47ztoyXttsY/waEZwQhKXk1PL/E8XtM4r2bm0a6i5lmxRx5nAGO3zyp27RYRdT9K4j4EBtGvgSuC1sjFl5t7i5q3btK3vip2lOb4h0TqNqdz+VdcV//LWX9cTaF96/VW3drm5BeBkZYmtuRkpOY92ILAiD9W/bpTNFfX+ZWxYRbl9nLqiomLlGdH6UGHel9cu8VrWxdry3r5U3ttX40aW5P393JvrfVzLzvX+CbqdJwwMDJTXFdGHp2ndoo/1pDLvS21ofLdY/3kfkpKET81S7VKzNn5J5b9XmeLRhje9OjB+zxaCUzVP6Ii7mUVybg4+Neso/2ZpbIJndZcKH1OIfxM5wF0JNGnShPbt2/Pee+8xevRojbOup0yZwuXLl3nvvfcIDw/nzz//ZNWqVYBiwnsQc+bM4ZtvvuH7778nIiICPz8/fvjhBwB69epFhw4dGDx4MH///TcxMTGcOnWK2bNnlzmwXpFGjRrRt29fpkyZwtmzZ7l48SKTJk3SiOV+z5Wfn8/UqVPx9fXl2rVrnDx5kvPnz2vs463O1NQUa2trjdv9ticpz5pTfkzp1o7ujevRwMmeecP6kHwzl0NhqgMhKyYOY0w7D+Xvq076Mdy7BYNaNaWeox2fDuyJmYkx2y6qrpblYGlOY2dHatvZAtDQyYHGzo7YmD1cPe/n9wP+vPRcO7p41sO9pgNzJvUlNTOHo36qfeh+mjWcET08lb+bmRrT0NWRhq6KLWhqONjQ0NURJzsrZZme3g3walSLmo42dPF058dZwzjqF8XZS/q5uMaqM36M8GrBYI+m1HOwY85zPTEzNmZryZXI5g3uw4yeHZXl1571p1P9Okzs4EVd+2pM7dqeZjWcWH8uAFAc3F484jma13Dina17qWJggIOFOQ4W5hgb6m+YXHHlLCPrtWKoWwvcrez5wvtZzI2M2XxVcSHFhe0GMKtFN2X5V5v40NGpLq4Wtrhb2fNyo3YMdmvOjmuKC+UYGRjyY8dhtLBzYfqZHRgaGOBQ1QKHqhZ6jQNgWeg5RjfwYFi95rhb2/NVuz6YG5mwKUoRyzc+z/Fuq66qWJq1Y4ZnZ949vZfrOVk4VrXAsaoF5kaaF421NDahX51GbIwI1Gv9S1vv68crfdrRtXk96rvY8+XYPqRk5XIkSJXzS6cOY2QXVc6bmRjTqKYjjWoqcqWmvTWNajriXE2VK9bmpjSq6Ug9Z8WbxjpO1WhU07HcPVgf1fLL5xhV35OhdVvgbm3PF21K+lh0SR/rMIB3PLopy09p0p7pLbvw3tndXM/NUvYf9XZ51rUx7arXxtXCll41G7Cm+2gOXA9X7tOtDyvO+zHSowVDmjfF3d6Oz/socn5zsCLnF/Tvw6wuqpxfddGfznXr8HIbL+rZVeOtju1p7uzEWr8AVRyNGtDOtRauNjb0ql+P1SOHciAiihMx+v066bKAi4xq1oKhjZviXs2OL7v3UrRJqCKPv3mmL+906KQsb2xoSBMHR5o4OGJsWAVnS0uaODhSx8ZW9foEXMTTyYXXvdtSx8aWgQ0bM7p5S9YG+estjtw8CItQ3ACuJyh+vlHyfunbX+E9tcuBjBqkKLPgZ4i+Bhu2wT5fGD9CVWb887BpN2zfB1Ex8Nm3kJ8PQ57VWxgArD7lx4jWLRjkqZhTPn2uZL72K5lThvZhei9V/1pzRjGnTPDxoq5DNd7orphTNpwNUJaxMTOlsbMj9R0VuV7XoRqNnR31vk/3ynN+PO/ZgiEtFLny2bOKXNkSpIjl6wF9mNlNFcvq8/50rleHl9p6Uc++Gm92bk9zFyfWXVTFsvzMBZ5t2pDnPZtTu5oNL7b2oHuDemy4qN9xecU5P0aqxfJ531KxPNeHmV3VYrmgFotdNd7spIhlrVosAJYmJvRt3JBNj+HikurWHfVj8jPt6NasHg1c7PnqhT6kZOdyOFg1r/z22jBGdVLNK2t8/RjWvgUD2zSlbnU7Phqu6Jvbz6rWkoPaNqVlHWdq2dvQv3VjFk7oz9qjfsSklPo6hA6sPOPH814tGNyyZP3Vr2T9Faioz/xBfZjRQy1XzvnT2b0OE9sr+tfULu1pXsOJdecDADA3Nubdnp3xqOlMTRtr2ru58tPIgVxLz+R4lP4u0AYl/av0vGJyn/5Vt/z+lVNQwNnYON7r3pm2tWtRy8aaoS2aMrh5Uw6E63ef95Vn/Xi+1T/I+3MludKuVN5fCFCWKZP33pL3/8Ryv4uMat6CoU0Uc/0XPXthbmzM5lBFHAt79+WdjqXmekdHmjgq5nonCyuaOGrO9e907ESbmjWpaW1NI3sH3unYifa1XNl5OUyvsTwt6xbQ/XryXt6/360z7VxL8r55U4Y0a8rfes77ZcEXGN24JcMaNsPd1o6vOj+DubExm66UtEv3Z3m3bWdl+Vc92jKjTUfePbqP6zezcDQzx9HMXGONvyLYjze92tOrjjuN7Bz4tvuzJOXl8HeM/q9V8dR70heUlItMin+Tl19+mVOnTvHSSy9p/L1u3bps3ryZmTNnsnjxYjp06MDs2bN57bXXHvhg7vjx47l16xbfffcds2bNwsHBgeHDhwOKg+R79uxh9uzZTJw4kZSUFJydnenSpQtOTk7/KIaVK1cyadIkunbtipOTE19++SUff/yx8v/3e64qVaqQlpbGuHHjSEpKwsHBgaFDh5bZhkQflh+/gJmJMZ8N6oVVVVP8Ym8wefVWjavWu9rZUM1CdcB+X0g4dhZmvNmzAw4l25lMWb1N48IWI9u25I0eHZS/r33leQA+3LKf7f66339szd7zmJka8+H4Z7A0NyUwIp63vtWMo2Z1G2ytVHE0cXNi6XvPK3+fMbobALtOXOKzFfsBcLC1ZPqobthZm5Oamcue06Es23lG5/W/Z++lcOzMzXizWwccLc0JS0zhlfWq17aGjZXG3pP+1xOYtXUv07r7ML1HR2LSM5n6x04iUhRfjXOysqRnY8Ve7jteHavxXONWbeLctQc/o/qf2B0Xhp2pBdOad8WhqgVhmUlMPPoHabcVZy25mNtonAlkXsWYz1v3xdnMilt37xB9M42ZZ3awO06xsHUys+KZmg0Vj93nFY3nGnN4bZl9unVp17XL2FU1Z7pHZxzNLAjLSGb84Y2k3lK0SU0La4rVZtIXG3phWsWIX7pqbi+0KPAEi4JOKH8f4NYEAwzYGaPfxXtpqw4qcv7j0b2wMjPFP/oGr/9UKucdNHO+WW0nlr2tOlo3a2g3AHaevcQn6/4GoFsLdz5/sY+yzNcT+wPwy57T/LJX9zmzOzZM0S4tuyj6WEYSE45sVF54soa5tUYfe6GBol1+6jxM43EWBx9ncfBxAKqbWTLbq1fJVic5bL0azI8hJ9CnPZfDsTc3Y1qnDjhamBOanMJLf24jreQCTjWsrTTi8I9PYMZfe5ne2YeZXToSk5HJa1t3EqH2dWtHSws+7NG15KvPuWy7FMqSk2f1GgfA7ogr2JuZMaNdRxwszAlLSWHCzi2kllzUp4alZptUt7Bkz+hxyt8ne7VhslcbzlyPY/S2PwEISk7i1T07eadDJ95q04G47Cy+OH6EHeGX9RbHpSswfprqg/T5SxQ/D+5bzNwPICUNEtS+dFHLBX6ZB/N+hLVbwNkRvngHOqldNqRfD8jIhO9XKC5K2aQ+/LpAv1uUAOwNCaeauRlv9VDM12GJKUxeq5pTXGw0+1dAXALvbN7L2z19mN6rI9fSMnnz951EJKv6V/dG7swdqsr1b59X5PqPR06z5Ij+5sc9YYr58a0uilwJS0rh5Y1qsWjJlZk79jKtqw8zuily5Y3NqvkR4EB4FJ/uPcQUnzZ89Ex3rqan8+aWv7h4Xb9ndN2L5e3OJbEkp/ByqbwvLp33O/cyvYsPM7sqYnl9i2beA/Rv2ggDA/grVH/5oc3Kw4p55ZPnS+aVqzd4banmvFKr1LyyPyCcapZmvN63Aw7W5lyJT+G1pdtIV9t+wa26HW/374SNeVXi07P57cA51h7100sMe0NL+lfXkvVXUgqTNlTQv64nMGubYv01o7ti/fXGn6r+dbe4iIZODgz2aIpVVVOSb+ZwMjqWxb6nKNTzvrB7LmvpXxsfsH910d6/pu3Yw6yunfhmwLPYVq1KfHY23x47yQb/IP3GEqZ4z/FWV7W8/6P8Mcw/PoGZ2/cyrVtJ3qdn8samUnl/RS3ve0ve/1O7w8OxMzNnegcfHMzNCUtNYcL2rcoLT9awttI467e6pSW7X1C9B5ns7c1kb2/OXI9jzOZNANibmfNNn744mltws6CAK6kpTNi2hROx+v1g/mlZt4B+1pNv79SS98dPsiFAv3m/K+qKYo3v3RHHkj42fs9mZbvUtLTWyJUXm3ko3nv1HqTxOIsunGLRxVMA/BJ4DjNjY+Z26Y21iSnnE+MZv2eL7NMtKg2D4spyBZL/uC+++IJNmzYRFHT/gfKrr77il19+IS6ucl2Y5XFq+tF3T7oKjyT0y+nKn9u89O0TrMmjO79ihvLnxp9V7na5/KmqXdw3flVByX+3qJGzlT+7rZ33BGvy6GLGvq/82fPNyt2/An5Q9a96G/73BGvyaKLHfKj8uf78yt0mke+p2qTuD988wZo8uqtvzlT+XJTY8AnW5NEZOqu2y2nySeXtY2Gfq/pXw/9V3jgAwj9UxdJgbuWOJeIDVSwtp1fuWIK+U8XS6IvKG8uVj9X617zKGwdAxPtqef9V5Y4lfPbTkffqOV9vUeV+3xU9TfW+62latzxN60m3pQufYE0eTcyUWU+6Cv9addfNfdJVKOPqi/ffvreykTO4/+VycnKIiYnhxx9/5Msvv9Ra5qeffqJNmzbY29tz8uRJFixYwNSpUx9zTYUQQgghhBBCCCGEEPfIRSYfDznA/S83depUfv/9dwYPHlxme5J7IiIi+PLLL0lPT6d27drMnDnzgS6mKIQQQgghhBBCCCGEEJWZHOD+l1u1apXyopHl+e677/juu8r9tRwhhBBCCCGEEEIIIYT4p+QAtxBCCCGEEEIIIYQQQuiaXPnwsTB80hUQQgghhBBCCCGEEEIIIR6GHOAWQgghhBBCCCGEEEIIUSnJFiVCCCGEEEIIIYQQQgihcwZPugL/CXIGtxBCCCGEEEIIIYQQQohKSQ5wCyGEEEIIIYQQQgghhKiUZIsSIYQQQgghhBBCCCGE0LXiJ12B/wY5g1sIIYQQQgghhBBCCCFEpSQHuIUQQgghhBBCCCGEEEJUSrJFiRBCCCGEEEIIIYQQQuiabFHyWMgZ3EIIIYQQQgghhBBCCCEqJTnALYQQQgghhBBCCCGEEKJSMiguLpaT5YUQQgghhBBCCCGEEEKH3FZ+/aSrUEbMxHefdBV0Ts7gFkIIIYQQQgghhBBCCFEpyQFuIYQQQgghhBBCCCGEEJWS0ZOugBBPQtOPvnvSVXgkoV9OV/5c7/tvnmBNHl30WzOVP3tMq9ztErhI1S4tZ1TeWIK+VcVR/+vKGwdA5LtqubL42ydYk0cX/fYM5c8eb1Xedgn8XtUmjb6ovHEAXPlYFUuz9yp3LJfmq2Jp8knljiXsc1UsRYkNn2BNHo2hc7jy59avVO42ufibqk28J1XusfjCMtVY7Lakcq/BYt5QrcFazKy8fSz4G1X/eppypfGcyh3L5TmqWJq/W3ljCflabfx6uZKPX8tV41eblyp3LOdXqGJ5mvK+Ms+R6vOj0CQbQz8ecga3EEIIIYQQQgghhBBCiEpJDnALIYQQQgghhBBCCCGEqJRkixIhhBBCCCGEEEIIIYTQNdmi5LGQM7iFEEIIIYQQQgghhBBCVEpyBrcQQgghhBBCCCGEEELoWrHBk67Bf4KcwS2EEEIIIYQQQgghhBCiUpID3EIIIYQQQgghhBBCCCEqJdmiRAghhBBCCCGEEEIIIXTMQC4y+VjIGdxCCCGEEEIIIYQQQgghKiU5wC2EEEIIIYQQQgghhBCiUpID3EIIIYQQQgghhBBCCKFrxf/C20NYsmQJbm5uVK1alXbt2nHu3Llyy/7222907tyZatWqUa1aNXr16lVheV2QA9z/YatWrcLW1vaxPJebmxuLFi16LM8lhBBCCCGEEEIIIYR4dBs3bmTGjBl8+umn+Pn54eHhQZ8+fUhOTtZa3tfXl9GjR3PkyBFOnz6Nq6srvXv3Jj4+Xm91lItMPuUmTJjA6tWrATA2NqZ27dqMGzeODz/88KEez83NjWnTpjFt2jQd1rKsOXPmsH37dgICAvT6PP/E1J4dGOHdAquqpvjH3uDznYe4lpZZ4X1Gt/PgpU6tcbC04EpiCl/tOkJwfJLy/yO8W9DfoxFNXapjWdWUdl/+xM1bt/UWw9iWnrzi5Y2juQVhqSnMOXqYoKRErWUb2Nkzvb0Pzas7Ucvahi+OHWFlgJ9GmbfbdeDtdj4af4tKT+eZdSv1FoO615/twND2LbAyMyXg6g2+2nSI2NTMCu8zspMH43u0xsHKgvAbKczbcoSQWFWb1LK3YeagLnjWq4GJURVOhl1j3pYjpOfk6TeWvh0YphbLl5sfIJaOHkzoropl7jbNWOytzJkxoAsdGtbGwtSEmJR0fjt4joNBkXqJ4cVWHkxq2xpHCwvCklP4/OARghKTyi3/bKMGTOvkQy0ba2IyMvn66HGORseo6m9uzrtdO9Gpbh2sTU05HxfPZ4eOcC0jUy/1Vze2pQevtFbLFd8jFedKBx+aV6+uyJWjR1gZ4F/uY7/q3YZ3O3Zmpb8fXxzz1VMEml7v14GhHdRy5c9DxKZkllvey70mE3p608S1OtVtLJn2206OBEdplOnZsj4jOrWkiWt1bC3MeH7+Oq7Ep+gthjHeHrzcoTWOlhZcTkrhi31HCL5Rfv/q26QBb3fzoaatNTHpmSw8dJxjkTHK/88d2JuhHs007nM8MoZJv2/TVwgapj7TgeFtFW3iH3ODz7cdIvZ+c0oHDyZ2UeT8lYQU/rfjCMHXtb8Gv7w0mM6N6vLm6p0cDo3SWkYXxrT14KWOinnuclIKX+3WnOdK69OsAW/1ULTLtfRMvvn7OMciYpT/f6ZJfUa2aUmzGtWxNTdjyE/ruJyov34FcD4QVvwOl8IhJc2AH74splfniu9zzh/mLYHIGHCpDq+OhSHPapZZvw1W/AGp6dDYHWa/DS2b6C2MMl4d2IEhnVtgaW5KYOQN5q4/RFxyZrnlWzWoybg+3jSpUx1HW0tmLtmJb4Bm37n423St91206Rhr/76oy+orTRnkw5DOzbE0r0pgZDzz1t0/jrF9vWlSx0kRx487OFoqDjNTY94c1pmunu7YWJpxIzWLjYf82XI0SC8xAIxt7smUViXzSloKnx47TGBy+fPKjLY+tHBUrME+P36EFUGaa7ATYydRy9qmzH3XBAfwybFDeolB3Rt9NNctX2y5/7plVEcPJnQrGcPurVviFONFjWrW7P/oZa33m7l6F38HReg6BODpyZMxbTx4+d5YnJjCl3vvMxY3bcDb98bitEwWHlSNxUaGhrzdw4euDepSq5oNObdvcyo6lm8PniD5Zq5e6l/aG70158gvtj1A/+rgwcSumnPkvf4FsHLKcNq4u2rc588zQXy+Vb/5MmWQD0O6qI1ha+/TxxrWZGwfb5q4qY1h/uWMYa3UxrCD+h3Dpgz2YXBJHEGR8cxb8wBx9PWmcUkcs34oG4edtTlvDu9Mu+Z1FG0dHs+C9YcrfFxdeFryHvQzR15YNkPrfRdvOsba/Rd0WX1RiXz77be88sorTJw4EYBffvmF3bt3s2LFCt5///0y5devX6/x+7Jly9iyZQuHDh1i3LhxeqmjnMH9H9C3b18SEhKIiIhg5syZzJkzhwULFjzpalUqL3f25sX2nny24yCjfvmd/IJCfh0/FBOjKuXep2/zhrz3bBd+OnKG4T+t53JiKr9OGIqdhZmyTFVjI05EXOPXY+f1HkP/Bo34sHNXvj97mgF/rCUsNYXVg4Zhb2amtbyZkRGxWVl8ffI4ybk55T7ulbRU2i77WXl7fvMf+gpBw8Se3ozu4smXmw7y4neKNvn51YrbpE+rhswa3IWl+84wauF6rsSn8vOrQ7GzVLwGZiZG/PLaUIqLi3llyWbGL96IsZEhP7wyCAMDPcbSw5sxnT35YtNBXlikiOWXKfeJxbMh7wzqwi/7zzDy2/VcuZHKL5NVsQB8NaYvbtWr8daKHQxdsJaDQZEsGNefxjUddR5Dv8YN+bB7F344eYZBq9dzOSWVlc8Pxc5ce/9qVcOF7wb0Y1NwCANXredARCQ/DxlIAwd7ZZlfhgzA1daGV7fuZODq9cRnZ7Pm+WGYGev3s9n+DRqW5MoZBvy+jrCUFFYPHlp+rhjfy5UTFeYKQEsnJ0Y3b0lYin4P2Kmb2KskV/48yIvfluTKaxX3LzMTY67EpzB30+Hyy5ga4x8dz6KdJ/RRbQ3PNm3IB890YcmxMwz5bT2Xk1JZPqaC/lXLhW+G9mNzQAiDf1vPoSuRLHl+IA0c7TXKHYu8SsdvlypvM7bt0XssAC939eaFjp58tu0go38smVNevs+c0rIh7z7XhZ8OnWHE9+u5kpDK0pc155R7xnVqRfFjuFr7s80b8l7fLizxPcOwX9ZzJTGV38ZprxOAp6sLC4f3Y4tfCEN/Xs+hsEh+GD2QBtVV7WJmYoxfbDzf/K3/fnVPfj40qg8fT3uw8tcT4NX3oV0r2LYMxg2HjxfACbVvXe45DPOXwBvjYctv0MgdXpkFaRl6CaGM8X29GdXTk/+tO8j4/yn62I/T7pP3psaEX09h/oby8773zKUatzkr91NUVMxhP/18cDq+bxtG9fRk7rpDTPjfBm7dLuSH6fePIyIuhfnry49j+vNd6dDcjU+W72XEx6v4/aAf74zpQRePevoIg+fqN+KjTl1ZfP40/f9cS2hqCmsG3GcNlp3F/NPlr8EGblpPm5U/K28v7NgEwJ7IK3qJQd1L3UvWLZsP8sJiRf9aOvkB1i0Du/DL32d4/rv1hN9IZanauiUx8ybd5izVuC3Zd4rcWwUcvxyjlzieljx5tllD3u+jGIuHLl3PlaRUlr1Y/ljcytWFb4b3Y7NfCEN+Wc/By5H8OEo1Flc1NqKpS3V+OnaWYUvX8+bGv6hrX42fRg/SS/1Le6mbYo78fOtBxvxQ0r/uN0d6NOTdAV34+eAZRiwuf47cdDaYrp8vVd6+2X1cr7GMf7YNo3p5MnftISZ8VTKGzbj/Giziegrz11Uwho0sGcOW7WXER6v4/YAf77ygvzFs3LNtGNnLk7lrDjHxyw3k3y7kh5kPkCtxKXxdQRwLpg6khqMNs77fwYufrSMhLZsls4ZT1UR/a/2nJe9Bf3Nknxm/aNw+uxfLRf180PifUGzwr7vdvn2b7Oxsjdvt29pPtiwoKODixYv06tVL+TdDQ0N69erF6dOnH+glyMvLo7CwEDs7O528pNrIAe7/AFNTU5ydnalTpw6vvfYavXr1YufOnWXKRUVFMWjQIJycnLC0tKRNmzYcPHhQ+f9u3bpx7do1pk+fjoGBAQZqR/xOnDhB586dMTMzw9XVlbfeeovc3PI/4c/MzGTSpEk4OjpibW1Njx49CAwMBBRbp3z22WcEBgYqn2fVqlUUFxczZ84cateujampKTVq1OCtt97S4StVvnE+Xiz1Pcfhy9GEJ6Xy/uZ9VLeyoGcT93LvM6GjF5suhLDNL5SolHQ+23mQW4V3GNq6ubLM2tP+LDt2nsC4BL3H8HKr1mwMCWZz2CUi09P56PAB8u8UMqJpC63lg5KTmHfyGLsirlBw9265j3u3qIjUvDzlLeNWvr5C0PBCFy9++/scviHRRCSk8tH6fTjaWNCjRfltMrabF1tPh7DjXCjRSel8uekgtwruMLidok0869aghp01H2/4m8iENCIT0vh4/X6aujrRtkFtvcXyYhcvfjtwDt9Lilhmb9iHo7UFPZqXH8u4rl5sORPCjvOKWL7YfJD8wjsMbqvqX55uLvx+PICQ2CTi07P47eA5bubfpmktJ53H8JK3FxuDQtgSEkpkWjof71fUZ0SL5lrLT/BuxbGrMSw7d5Go9HQWnThNaFIyY708AXCrZkurmjX49O/DBCcmcTU9g0/+PkRVIyMGNGms8/qre9mrNRsvhbA59F6uHCT/zh1GNNMeS1BSEvNOHGNXeMW5Ym5szHd9+vHhoQNk3b6lr+qX8ULXklwJjibiRiofrS3JlZbl96+TYTEs2X2Kw0Hln/m763wYS/ed5eyVWH1UW8PE9l786R/C1sBQolLT+XS3Yjwd5qm9Tca1bcXxyBiWn75IdGo6i31PE5qQzIttPDXKFdy9S2punvKWrcdv0Kgb28mLpYfPcSQ0mvDEVD74cx/VrS3o2az8Nhnf2YvN50LYfiGUqOR0PttWMqe00XwNGrs4Mr5Laz7e9Le+w2C8jxebLoawzV8xz835q6ROXuW0S/tWnIiMYcVJRbt8f/g0YQnJjGnnqSyzMzCMn3zPcipa//3qni7tYdokeKbLg5X/YwfUdIH33gB3N3hhKPTuCqs3qcqs/hNGPAdD+0F9N5gzE6pWha2P5zMUxvT0YvnucxwNjCYyPpVPV+zD0daCbq3K72OnQmL4efspjviXn/dp2Xkat26e7ly4Ekd8apY+wmB0r1Ys33WWowFRRF5P5ZMV+3C0taRbq/rl3udeHL7+5R9U8Khfg12nLnHxynUS0rLZdiyYiOspNKvrrI8wmOTZmj8uBbPp8iUiM9KZ7atYgz3fpPw12NxTx/grsvx5Jf1WPil5ecpbT7d6xGRlcObGdb3EoO7FLl78evAcRy5FE56Qyoe/P8C6pYti3bK9ZN3y+RbFOmFIybqlqLiYtJt5GrceLeqzPzCc/IJCvcTxtOTJhA5ebPILYWuAYiz+dFfJHNlK+1g8tl3JWHyqZCw+opgjX2jrCUDO7QJeXruVfZfCuZqWQeD1RL7Yc4TmNZxwsbHSSwwa9evkxa+HVHPkhxvvP0eO6+zF5rOKOTI6OZ3PtypegyGl5shbBYWk5eQpb7m3C/QaS5kxbHnJGOZ1nzFs20OMYXEpNKunnzFs9DOtWPHXWY6VxPHpsn042FrStaI4gmP4ZdspfMs5wFvbyZaW9Wswf+0hQmOSuJaYwby1BzE1MaJPO/2t9Z+WvAf9zZGlY+n6GGIRj9/cuXOxsbHRuM2dO1dr2dTUVO7evYuTk+ZxBCcnJxITtX8brbT33nuPGjVqaBwk1zU5wP0fZGZmRkFB2ck8JyeHfv36cejQIfz9/enbty8DBgwgNlbxJnPr1q3UqlWLzz//nISEBBISFAdlo6Ki6Nu3L8OGDSMoKIiNGzdy4sQJpk6dWm4dRowYQXJyMnv37uXixYt4eXnRs2dP0tPTGTlyJDNnzqRZs2bK5xk5ciRbtmzhu+++Y+nSpURERLB9+3ZatND+xkCXalWzwdHKgtNRqjfbObcLCLqeiKdrDa33Ma5iSNMaTpxRu09xMZyOisXT1UXvdS5TH0NDmld34mScWn2Ak3GxtHJ5tPq42Vbj9EtT8B3/Mt/17kcNS/0vfGva2+BoY8HZcLU2uVVA8LVEWrppbxOjKoY0qeXEmXDNNjkTHktLN8VrYGJkRHExFNxRvZm8XXiXouJiWtXT/riPHIudDY7WFhr1yrlVQHBsIh7/MJaz4bF4uKnaMyAmgT6eDbE2N8XAAPp6NsTUyIjzUXE6jcHY0JDmzk6cjNHsX6euxdKqhvb+1aqGC6diNA9gHb96TVnepIrizIPbd+9oPGbB3bu0rqmftgC1XIm9pvG8J2Ov0cr50XLls249OBITrZGH+qbMlSsPniv/NsaGhjRzceLU1VL962osrWppbxPPWi6cvqr5Op+IvoZnqfJt69Ti1Iwp7Ht9PHOe7YGtWVWd17+0WvdyPkKzTYLiEvGoXcGcUtOJ0xGlxq/IWDxqq2KqamzE16Of5cvth0nV87ZKxlUU7XJa2zxXTrt4uLpwutSB6xOR157IvPgoAi5Bh9aaf+vURvF3gIJCxXYn6mUMDRW/3yujTzUdbHCwteBsmFofyy8gJDqRljqcy+yszOnUoi47ToTo7DHVKeKw5JxaHLklcbRwf7Q+Exh5gy4e7jjaWgLQupErtZ2qcebStfvc858zNjSkuaMTJ6+XWoNdj8XrEecV9ecY3LApf4bppy3U1apo3VKn/HVL01pOGuPevTWYRx3tr0HTWtVpUrM6W8/ps39V/jwxrmJIsxpOGh8KFhfD6ejyx2JPV5cyHyKejCw7R6qzqmpKUXGx3j8Ivte/TmubIyvqXzWdOBNZqn9FlO1f/Vs15vinr7Jtxlim9e1IVT1+K1A5hoXqaQzzLDWGOetnDKvpqD2OS9GJtHyEOIyNFK/97UK1tX4xFN65i2eDmg9f4Qo8LXkP+p0j1dlZl8RyXP/zi3i8PvjgA7KysjRuH3zwgV6ea968efzxxx9s27aNqlX1935L9uD+DykuLubQoUPs37+fN998s8z/PTw88PDwUP7+xRdfsG3bNnbu3MnUqVOxs7OjSpUqWFlZ4eys+nR47ty5vPDCC8p9uRs0aMD3339P165d+fnnn8t04BMnTnDu3DmSk5MxNTUFYOHChWzfvp3NmzczefJkLC0tMTIy0nie2NhYnJ2d6dWrl3I/8bZt2+ryJdLKwdIcoMzBgrScPByszLXex9bcDKMqhlrvU8+hmn4qWoFqZmYYGRqSmqd5Vn1qXh7u1R7+KyIBiQm8c2AfVzPScbSw4K12PmwcPoq+61eRW6ifs20A5euedrPU63szDwdr7W1SzULRJtruU9dJ0SZBMQnkFxQybWAnfth1EgMDePu5ThhVMcTR2kIPkaCsr7Z62ZfTvyqMpbqqf72zejdfj+vHiS9fp/DuXW4V3GHayp3E6fjT92rmiv6VlqdZn9TcPOrZae/vDhYWpJYpn4ujhSLm6PQM4rOymdWlEx/tP0h+YSETvb1wsbaiuqV+2gLUc6VU3fLycH+Er1M917ARzas7MeiP9fcvrEMV9a/ycuXfRtm/So+nueWPpw6WFqTmlh5/c3GwUMV8PCqGA5cjuZ6ZhWs1W2Z078hvo4cwcuUfFOlxf49749fDzCllXoObedR1VL0G7w3oiv+1GxwJjdZxrSuoU+nXOVezTuocLC20xJ2rnGcri9R0KN317O0gJ9eAW7eLyb4Jd+8aYF9Nsx/ZV4Orj+HzLXsbxeuZnq35WqffzFP+Txee82lK7u1CvX39+l5d00rHkZ2Lvc2jzQMLfj/C7HG92LtwMnfuKD7I/mrNAfwjdH/ho2pVta/BUh5xDaaud736WJuasjlM/5+g2D/EvFLuuiVHc92ibkjb5kQlphEYo59vOT4teVLeHJmam0fdCubIsuXLH4tNjKowq1cndgdf1vsZz8o1vpb5rrw58kH71+6AK9zIyCYlO4eGLo5Mf7YTbo7VmLZ2l46jUKhwDHvE9xULNpSMYd+ojWGrD+AfrvsxTJnzpeJIe8SxOCYxnYTUbN4Y3om5qw+Sf7uQMb1b42Rnhb2tftb6T0veg37nSHX3YjniJ9uTPJLHsHXgP2Vqaqo8Hnc/Dg4OVKlShaQkzWs7JCUlaRyz02bhwoXMmzePgwcP0rJly4eu74OQA9z/Abt27cLS0pLCwkKKiooYM2YMc+bMYdOmTRrlcnJymDNnDrt37yYhIYE7d+6Qn5+vPIO7PIGBgQQFBWlsIl9cXExRURFXr16lSZMmZcrn5ORgb6+5F2p+fj5RUeV/7WfEiBEsWrSIevXq0bdvX/r168eAAQMwMtLejW/fvl1mD6EHSeLnPBozZ2BP5e+vrt1eYfn/sqPXYpQ/X05LJSAxkRMTX6F/g0b8Gaq7T3n7tW7Mx8+r2mTqr9t19tjqMnLzeWfVLmaP6MmYzq0oKi5mn98VQuOSdHbAq59XYz4ZoYrljWXbdfK42rzxbAeszUx55efNZOTm06N5fRaM78/EH/8kIiFNb8+rC3eKinh9+1/M7fsMfm+/zp2iIk7FxOIbdVWv+6Hrg4ulJZ907ca4bVsq3MJEF/p5N+bjkWq5snS7Xp+vMttzKVz5c3hyGleSUjn05ku0rVOLMzG6+5ZDf8/GzBmqapPXVm7X2WOr696kHu3cXRm++PF+iCKevGfbNebDF1V97O0ftj+W5x3UsRl7z4ZpfOvpUfRt15gPx6q+tjrt++06eVxtRvbwpEU9F6b/sJ2EtGy8GtTi3Rd6kpKZq3E2XGUxskkLfK9dJTlP9xcA7O/VmE+GP551yz2mRlXo59WIpQfO6uwxn5Y8edyMDA1ZNKI/GMCc3eXv2fuw+rdqzKdqc+TrepojATafDVb+HJGYRkp2LiumDMfVzoa49Ec/+aNvu8Z8OE5tDFu8/ZEfszwje3rSwt2F6d+XjGENa/Hui7oZw/q2b8wHanFMX7T9EWur3d27Rby7ZCcfT+zN4R/f4M7dIs6HxnIySHdr/acp7x/nHKluYMfm7DtTeccwoRsmJia0bt2aQ4cOMXjwYACKioo4dOhQhTs3fP3113z11Vfs378fb29vvddTDnD/B3Tv3p2ff/4ZExMTatSoUe4B4VmzZnHgwAEWLlxI/fr1MTMzY/jw4Vq3M1GXk5PDlClTtO6HXbt22X2Lc3JycHFxwdfXt8z/bG1ty30eV1dXrly5wsGDBzlw4ACvv/46CxYs4OjRoxgbG5cpP3fuXD777DONv3366afMmTOnwngOh0URpLYntknJ6+VgaU5qjuqNg72lOZcTtF8oLjMvnzt3i8qcCWFvaa73r41rk5Gfz52iIhzMNT/NdTA3J0WHb4ZuFtzmamYGdSpox4fhGxJF8LWybWJvZU5qtlqbWJlzJV57m2TkKtqk9FnRisdQtcnpK7E89+VKbC2qcreomJv5tzn0+WSu6+isZ99LUQTHqsVSRS2WmzqIpeTslVr2Nozp3Ioh89cQlaQ4mB1+IxWvejUZ2dGTLzfr7orxGXmK/mVvrlkfBwvzMmfR3pOam4tDmfIWpKiVv5SUzMDV67E0McGkShXS8/PZ/OIoQhKTSj+czqhypVTdzM1JqeC6AhVpXt0JB3MLdo5+Ufk3I0ND2tasxVgPTxr/uFhnH6D4BkcRHPOAuXL98V3o8lEo+1fp8dSi/PE0tdTZ2gD2Ws7qVnc9M4v03Dzq2Nnq9AD3kdAogtXmFGP1OeVmqTnlRsVzSpnXQC3n29V3xdXOltNzXtcos2jsc1y8Gs/EXzfrJJ4ydSr9Oluo6lRaqpazte21nNX9b+dgB6mlLhaZlg6WFsVUNVVsR1KlSnGZC0qmZSjuq2tHA6IIjlbL+5Kv3NtZm5OapepjdlbmhMfpJu89G9TEzcWO93/drZPHAzgWEEXIVdU+jvcukmVvbU6aehzWFoTHJT/085gaG/HG0E7MWrKTk8FXAYi8nkrD2o682Mdb5we4M25pX4M56mgNVtPKio61avPqvrLX19GFI5eiCCpvDVZq3XL5n65bLM3LnHUL8IxHQ8yMjfnrQpguQgCenjwprbw50uE+c2TZ8mXHYiNDQ74b0Z8aNtZMWL1ZL2dvHwmNIihWS/8qPUdamXOlnDmyov5V3nwEKNfjrg62OjnAfSwwipDPHvMYFqQ2hrnqZgw7FhBFSPT947C3tiA89uHjALh8LZkX5qzDwswEY6MqZN7MZ+VHowmL0c1a/2nK+8c1R6q7F8sHS/XzLQdRucyYMYPx48fj7e1N27ZtWbRoETM+xukAAQAASURBVLm5uUycOBGAcePGUbNmTeU+3vPnz+eTTz5hw4YNuLm5KffqtrS0xNLSUi91lD24/wMsLCyoX78+tWvXLvfgNsDJkyeZMGECQ4YMoUWLFjg7OxMTE6NRxsTEhLulzkD08vIiNDSU+vXrl7mZmJiUeR4vLy8SExMxMjIqU97BwaHc5wHF/uEDBgzg+++/x9fXl9OnTxMcHFymHDz8nkJ5BYXEpmcpb5HJaaTczKW9u6uyjIWpCS1rORMQd0PrYxTeLSL0RhLt66nuY2AA7eu5EvAYLihZpj5FRYQkJ+HjqvrAwQDwca2Nf4Lu6mNubExtGxuSH/JAYHnybhcSl5qlvEUlppGSlUu7Bppt0qKOM0Ex2tvkzt0iwq4nadzHwADaNXQlSMvXXzNzb3Ez/zZtG7hiZ2mO7yXdfOW/TCxJijNIysRS25nAfxpLA1flV3nNSq4+XvrA6d2iIgx1fAp0YVERIYlJ+NRRqw/gU8cV/xva+5f/jQR86mh+ANbRrbbW8jkFBaTn51Onmi0tnJ04GFn+Nz0eVYW5kvhwuXIqLpa+61bz3Ia1yltQUiI7Lofx3Ia1Ot0Oo9xcaajWv6pWnCv/NoVFRVxKSKKDm2b/6lDXFf/r2tsk4HoC7etq9i+furUJKKc8gJOVJbbmZqTk6Hj8KigkNi1LeVPmfP1Sc4qrM4GxFcwp8Um0r18q5+u7EljyBn3ZkfMMWbSWYYvXKW8A8/86ykd6uOBk4V1Fu2id58p5nQPjEmhfr1S7uNd+IvPio/BsBmcuav7t1AXF3wFMjKFZQ80yRUVwxk9VRpfybhdyPSVLeYu+kUZqZi5tG2vmffN6zgRF6ybvB3dqRmhMEhHXU3XyeFASR3Km8qaII4c2TVR95l4cwVEP32eMqhhibFSF4lJjb1FRMYZ6+IZQYVERISlJ+NQqNa/Uqo3fQ84r6kY0bk5afh6HY/SzNVHe7ULi0rKUtwrXLdfKX7eEalm3tG/gSuC1sq/B0LbNOHIpmoxc3V24/GnJk9IK7xZx6UYSHeo++FgcEJdAh9JzpLvmHHnv4HYde1smrtlCZr5+Lo5dXv9q30DLHFlR/4pP0phXlXOklv51T+Ma1QE0TgB4pFhuPeYxrEjLGKaDozvlxtFUM45m9ZwJeoQ41OXmF5B5Mx/X6rY0cXPiaAUXc/wnnqa8f1xzpLpBnZoTGpOo1zHsP6P4X3j7h0aOHMnChQv55JNP8PT0JCAggH379ikvPBkbG6u8Th/Azz//TEFBAcOHD8fFxUV5W7hw4T9/8gckZ3ALpQYNGrB161YGDBiAgYEBH3/8MUVFRRpl3NzcOHbsGKNGjcLU1BQHBwfee+892rdvz9SpU5k0aRIWFhaEhoZy4MABfvzxxzLP06tXLzp06MDgwYP5+uuvadiwITdu3GD37t0MGTIEb29v3NzcuHr1KgEBAdSqVQsrKyt+//137t69S7t27TA3N2fdunWYmZlRp04drfH8kz2F7mfNKT+mdGvHtbRMrmdk8VZPH5Jv5nIoTDX5rpg4jIOhkWw4GwjAqpN+zB3Wh5AbyQRfT2ScTyvMTIzZdlG1P6KDpTkOlhbUtrMFoKGTA7m3C0jIyiYrX7cXcVnuf5GFz/QlOCmRwKREJnp6YW5kzOaSrUQWPtOXpNwcFpw6ASguWFTfzr7k5yo4WVjSxMGRvMJCrmVlAvBBp64cuhpFfHY2ThaWTGvvw93iYv4Kv6zTumuz/pgfr/Rux7WUTOLTs3ijnw8pWbkcDla1ya+vD+NwUCR/nFC0yVpfP74Y04dLccmExCbyYldFm2w/q2qTQW2bEp2UTkZOPh5uLrw7tBvrjvpxLTmjTB10Zd0xPyY/047Y1JJY+vqQkp3L4RBVLL+9OoxDIapY1hz148vRfQiNSyZYPZZziliuJmVwLSWDT0b05Ju/jpGZe4sezd3p0LAOU5dv13kMKy74saBfH4ITkwlKSGSCdyvMjI3ZHKyoz4J+fUjKyWHhsZMArLrgz4bRI3i5jRdHoq7yXJNGNHd2Yvb+g8rHfLZRA9Lz8rmRfZNGjvZ81LMbByKiOBGj36+PL/e7yMLefQlOTiIwMZGJrbwwNzZmc6giloW9+5KUU0GuWFpp5EpuYSHhaZpbwuQVFpJ561aZv+vD+qN+vNKnJFfSsnijf0muBKnlyhsluXJc0b/MTIyp7Wir/H9Ne2sa1XQkK+8WiRk3AbA2N8WlmjWOJfv8uZXsc5manav1jLxHsfKMH/MH9SEkIZmgG4mMb6voX1sDFW0yf1Afkm7m8O1hRf9ac86fteNGMLG9F0cjrtKvWSOa13Dik92K/mVubMzULu3ZfzmC1Jw8XKvZ8E6vzlxLz+R4lO4v0FTa2hN+TOmhyPnrGVm82duH5OxcDl1StcnyVxQ5v+G0ok1WH/fjf8/34dJ1xZwytpPiNdh2QfEapObkaT1bLyHzJvEZ2XqJY/UpP+YOUZvnOpTMc36KOs0b2oek7By+O1jSLmf8WfPSCCb4eHE0/Cr9WjSiWQ0nPt2pynsbM1NcbKypbqXoV/f2kE3NydXbmd65eRCrtm3p9QQIiwAba6jhBN/+CkkpMH+24v+jBsGGbbDgZxjWT3Hgep8v/DJP9Rjjn4cP5kLzxtCiMazZDPn5MORZvYRQxoZDfrzcvx2xyZncSM3itUE+pGTm4qt20ODnGcM44h/Jn0dK8t7UGNfqtsr/13CwpqGrI9m5t0hMv6n8u0VVE3q1bsh3m47pPY7fD/rzcv92xCVlEJ+azWuDfUjJzMHXX7Wv6U8zh+PrF8mfRwK0xlHT0YaGro5k5d4iKf0mubcKuHgljrdHdOF24R3l1/v7dWjKd3/66iWOZQEX+aZnX4KTEwlITuRlD8UabFPJRSG/6alYg319RjWvNLg3r1SpgpOlJU0dHMlVW4OB4kD58CbN2XI5lLt6vHZAaeuO+TGlV8m6JS2Lqc9qX7ccDo7k95Ml65Zjfnw1SrEGC45NZGwXzXXLPa72NrSuV4vXl23TexxPS56sOu3HvJKxOCg+kfHtS+ZI/5KxeEgfkrNz+PaQYixee9afNRNGMLGDF74RV+nfXDEWf/KXYiw2MjRk8fPP0dSlOq9u2E4VQwPlt2+y8m9ReLdIe0V0ZO0JPyb3aMe1knXxVC1z5LJXhnHoUiS/nyrpX8f9+KpkjgyJS+TFTiX9q2SOdLWzoV+rxhy/fJXMvFs0dHHgvQFdOR99nfBE/R28+/2gPy8/pzaGDSkZw9T2Zv5pVskYdjgA0DKGOWgZwy7H8fbzamNYo1r082nKdxt99RPHAX9euhdHSjavDvEhNTOHo6XiOOIXyaZy4qhRKg6Ant4NyLiZT1L6TdxrOjBzTDeO+kVxVg8Xy7znacl70M8cqRGLd0MW/Xn0scQiKoepU6eWuyVJ6R0aSp8s+zjIAW6h9O233/LSSy/h4+OjPHCdna35pvjzzz9nypQpuLu7c/v2bYqLi2nZsiVHjx5l9uzZdO7cmeLiYtzd3Rk5cqTW5zEwMGDPnj3Mnj2biRMnkpKSgrOzM126dFF++jNs2DC2bt1K9+7dyczMZOXKldja2jJv3jxmzJjB3bt3adGiBX/99VeZvbz1YfnxC5iZGPPZoF5YVTXFL/YGk1dv1diLytXOhmoWZsrf94WEY2dhxps9O+BQsp3JlNXbNC7INbJtS97o0UH5+9pXngfgwy372e4fqtMYdkdcwc7MjOntO+JgYU5YSgoTdmwhNV9RnxpW1hpnkla3sGT3mHHK3ye3bsPk1m04cz2OMVv/BMDZ0pLFffpja1aV9Px8LtyIZ9ifG0jP190ZN+VZeUjRJp+M7IWVmSn+0Td4falmm9RysMHWUtUm+/3DqWZhxuvPdsDBWrEFyOtLt5GudtDErbodbz3XCRvzqtxIz2bZgXOs9fXTbyyHS2IZURLL1Ru89mvZWNT71/6AcKpZmvF6X1Usr/2qiuVOURFv/Ladac914oeXB2FuYkJsWiYf/b6fE2ExOo9hz+Vw7M3MmNapA44W5oQmp/DSpm3KC0/WsLbS6F/+NxKYsWsv0zv7MLNzR2IyMnlt204iUlUHfB0tLPiwe1fsLcxJycll26VQlpzS3X6c5dkdEY6dmTnT2/vgYG5OWGoKE7ZvVV54soaVVdlceWGs8vfJrb2Z3NpbkStbNpV5/Mdt5cGS/jVKLVd+rjhXmtV2YvlbI5S/vzO0GwA7zl7ik/WKs4G7NXfnixf7KMt8PbE/AD/vPc0ve8/oNIa9oeHYmZvxVtcOOFqaE5aUwqQNqvHUpXT/up7ArG17mdbdhxndOxKTnskbf+4kIkXRv+4WF9HQyYHBHk2xqmpK8s0cTkbHstj3FIV63icdYPlRRZvMGVYyp8TcYMqKsnOKrfqcEqSYU6b27oCDlWI7kykrtpW5ENfjtDcknGrmZrzVQzHPhSWmMHmtWrvYaLZLQFwC72zey9s9fZjeqyPX0jJ58/edRCSr8r57I3fmDlX1q2+fV/SrH4+cZskR3farey5dgfHTVKfuzl+i+Hlw32LmfgApaZCg9m3fWi6Kg9nzfoS1W8DZEb54BzqpXfe6Xw/IyITvVyguStmkPvy6QD9blGizep+ij80e2wsrc1MCIm7w5uJSee+omfdN6zjx6zuqvJ85shsAf526xJyVqm8B9G7TCANg/zn9f5i9et95qpoa8+G4Z0riiOetRVrisFKLw82Jpe88r/x9xr04Tl7is5X7Afhw6W7eGNaJLyb1w9qiKolp2fy87QRbfIP0EseuyJI1WLuOOJbMK+N3qdZgNa2sNc4od7KwZM9I1RpsSqs2TGnVhjPxcYza/qfy751c61DLypo/w3R33ZMHseKIon99Oly1bnm11LrF1V5zDNsfoBjD3uijWLdcjk/h1d/KjmFD2jYnKesmp8L1/2Hj05Iney+VvOfoXjJHJqbwyjrVWFzDxkqjf/nHJTBry16m9fBhek/FHDn1D9VY7GRtSc/G7gDseG2sxnONW7WJczHX9RrPCt+yc+Sry8v2L433XYGKNb76HPnqclX/Krx7l/YNais+HDYxJjHrJgeCI1l6SL/rytV7z1PVxJgPx6uNYd/dp4+5ObH0XbUxbFQ3oGQMW1FqDHvl8Yxha/aex8xUEYeluSmBEfG89a1mHDWra47FTdycWPqeWhyjFXHsOqGKw8HWkumjuim2DMnMZc/pUJbt1M9cf8/TkvegvzkSoHdbRSz7HlMsQuiCQXHp7+cJ8R/Q9KPvnnQVHknol9OVP9f7/psnWJNHF/3WTOXPHtMqd7sELlK1S8sZlTeWoG9VcdT/uvLGARD5rlquLP72Cdbk0UW/PUP5s8dblbddAr9XtUmjLypvHABXPlbF0uy9yh3LpfmqWJp8UrljCftcFUtRYsMnWJNHY+isuhBq61cqd5tc/E3VJt6TKvdYfGGZaix2W1K512Axb6jWYC1mVt4+FvyNqn89TbnSeE7ljuXyHFUszd+tvLGEfK02fr1cycev5arxq81LlTuW8ytUsTxNeV+Z50j1+VFocvtJf9tyPKyY12c96SronOzBLYQQQgghhBBCCCGEEKJSkgPcQgghhBBCCCGEEEIIISol2YNbCCGEEEIIIYQQQgghdK3Y4P5lxCOTM7iFEEIIIYQQQgghhBBCVEpyBrcQQgghhBBCCCGEEELomEHxk67Bf4OcwS2EEEIIIYQQQgghhBCiUpID3EIIIYQQQgghhBBCCCEqJdmiRAghhBBCCCGEEEIIIXRNtih5LOQMbiGEEEIIIYQQQgghhBCVkhzgFkIIIYQQQgghhBBCCFEpyQFuIYQQQgghhBBCCCGEEJWSHOAWQgghhBBCCCGEEEIIUSnJAW4hhBBCCCGEEEIIIYQQlZLRk66AEEIIIYQQQgghhBBCPG0Mip90Df4b5AxuIYQQQgghhBBCCCGEEJWSQXFxsXyWIIQQQgghhBBCCCGEEDpU7/tvnnQVyoh+a+aTroLOyRYlQgghhBBCCCGEEEIIoWvFBk+6Bv8JskWJEEIIIYQQQgghhBBCiEpJzuAW/0lNPvnuSVfhkYR9Pl35s9eUyh2L31JVLPUWf/sEa/Loot+eofy53ob/PcGaPJroMR8qf278WeXuX5c/VfWvthMqd/86t0rVv9xWfv0Ea/JoYia+q/y5wbzK3b8i3n86x6+G/6vc7RL+oapdWr9SeWO5+JsqjqLEhk+wJo/O0Dlc+bPb6vlPsCaPLmb8e8qfuw5Y8ARr8uiO/vWO8ue6P/77vj79oK5OVX3Nuu76uU+wJo/u6gsfKH9u9EXlHb8ArnysGsMazK28sUR8oDbXV+L1PWiu8Z+msdht7bwnWJNHFzP2feXPLf/65AnW5NEEDfj8SVdB/MfJAW4hhBBCCCGEEEIIIYTQNbny4WMhW5QIIYQQQgghhBBCCCGEqJTkALcQQgghhBBCCCGEEEKISkm2KBFCCCGEEEIIIYQQQghdky1KHgs5g1sIIYQQQgghhBBCCCFEpSQHuIUQQgghhBBCCCGEEEJUSrJFiRBCCCGEEEIIIYQQQuiYgWxR8ljIGdxCCCGEEEIIIYQQQgghKiU5wC2EEEIIIYQQQgghhBCiUpItSoQQQgghhBBCCCGEEELXZIuSx0LO4BZCCCGEEEIIIYQQQghRKckB7v+AmJgYDAwMCAgIeNJVUXJzc2PRokUVljEwMGD79u2PpT5CCCGEEEIIIYQQQuhU8b/w9hSSLUqeoAkTJrB69WoAjI2NqV27NuPGjePDDz/EyOjhmmbChAlkZmY+FQeGExISqFat2pOuBmPaevBSx9Y4WFpwOSmFr3YfITg+qdzyfZo14K0ePtS0teZaeibf/H2cYxExyv8/06Q+I9u0pFmN6tiamzHkp3VcTkx5DJEovDqgA0M6t8DKzJTAqBv8b8Mh4pIzyy3v1aAm43p706R2dRxtLZnx0058A6PKlKvrbMdbQzvh1bAWRoaGRCek8c4vu0jMuKmXOMa29OCV1t44mlsQlprCHN8jBCUlai3bwM6e6R18aF69OrWsbfji6BFWBviX+9iverfh3Y6dWenvxxfHfPVS/3vGNmjNK03a4WhmSVhGEnMu/k1QWoLWsiPdPRlatwUNbR0ACElPZEGgr0Z5h6oWvOvZnc7OdbE2qcq55Fg+u/g3MTcz9BoHwJg2HrzsU5IriSl8ufcIwTcqyJWmDXi7e0mupGWy8OBxjkXGAGBkaMjbPXzoWr8utarZkHP7NqeiY/n24AmSc3L1HgvA5CE+DO7aHEvzqgRFxDN/zSHikjLLLT++fxu6t25AHRc7bhfeITjyBj/8eZzYRNVrb2JchbdHdaV3u0YYG1XhTMg1vl5ziPTsPL3FMbZxK6Y0b4ujmQVhGcl8euYgganac2VUw5YMdW9Go2qOAASnJbLg4rFyy3/VoTcvNPbk87OHWBF6UW8xALzg5cGkdq1xtLDgcnIKnx84QlBC+f2rb6MGTOviQy0ba2LSM1nge5yj0THK/5sbGzOrWyeeaeCOrZkZ17OyWHMhgN8DgvQaBzw94xfAC609eLldaxxL5sgv/r5PuzRuwLSuPtQsaZeFR45zNCpGo4y7vR2zuneibe1aVDE0JCo1jalbd5GQrZ/5RN2rAxVzpKW5KYGRN5i7vuI5slWDmozr402TOoo5cuaSnfgGaM6RF3+brvW+izYdY+3fus2b84Gw4ne4FA4paQb88GUxvTpXfJ9z/jBvCUTGgEt1eHUsDHlWs8z6bbDiD0hNh8buMPttaNlEp1XXamyjVkxp3k4xfqUn8+m5gwSmap8jRzXwUIxftmrjl/8xjfILO/ZjeP0WGvc7Gh/N+IOb9BeEmpde6MhzvVtiaWFKcNgNvv3pb+ITMsstP+hZTwY964mzkzUAMbFprP7jFGcvXlWWmflGb1p71MHBzoL8W4WEhMWzdPUxYq+n6yWGsS08mdxKbfw6dpjA5ArGr3Y+tHB0opa1DZ8fP8LKQD+NMsfHTaKWtU2Z+64NCuCTY4f0EsM9Yxt6MVm5BktmzoW/CSxnDTbK3YOh9VrQ0EaxBgtOT2Rh4FGN8g5VzXnPszudXe6tweKYc+ExrcG8PXi5g9pYvK/iNVjfJg14u5tiDRaTnsnCQ6o1WGmf9evJqNYt+d9+X1afK3/+0RXlfG9ZMt8/yLxSer5Xm1ciPtA+Bs8/fIxlZ/W3dnma1vhP01g8tqEXU5q1U62Lzx0oP+/rezC0XnNVLOmJLPDXzHtzI2Pea9WN3q4NqGZqRlxOFqsuX2B9RIBe4xjp1pYJ7h1xMLUkPDuJuSG7CcmM11q2p3MTJjXogquFHcYGVbiWm8aa6FPsuh6oLGNnYsH0pr3p4OiOlXFV/NKuMTdkN7G5+plLhNAHOYP7Cevbty8JCQlEREQwc+ZM5syZw4IFC8qUKygoeKz1unv3LkVFRY/1OUtzdnbG1NT0idbh2eYNea9vF5b4nmHYL+u5kpjKb+OGYmdhprW8p6sLC4f3Y4tfCEN/Xs+hsEh+GD2QBtXtlWXMTIzxi43nm79PPK4wlMb38WZ0D0/+t/4g4+f9Tv7tQpa8NRQToyrl3qeqiTHh11OY9/vhcsvUcrBh+TvPE5OYweRvNjHy87X8tvsst+/c0UcY9G/QkA87d+X7s2cY8Ps6wlJSWD14KPZm2tvFzNiI2Kwsvj55guTcnAofu6WTE6ObtyQsRf8fOvSv3YQPvXryfcgJBuxdQVhmMqu7j8Le1Fxr+fZOtfnr2iXGHFzPsL/XkJCbzZruo3Eys1SW+aXLMGpb2jLl2Gae27uc+Nxs1vYYg1kVY73G8myzhrzfuwtLjp5h6NL1XElKZdmLQ7Ez194mrWq58M2wfmz2D2HI0vUcvBLJj6MG0sBRkStVjY1o6lydn46dZdiv63lz41/Uta/GT6MH6TWOe8b1a8PIZzyZt/oQL32+gfzbhXw/cygmxuXnildjVzYdDuDlL37nzQWbqVLFkB9mDaOqieoDy+mju9HZsx4fLNnFq3P/xNHWgvlvDtBbHM/VbcxHbbuzOOAk/XeuJjQ9hTW9n8e+ajl9zLk2O6+GMXrfHwzdvY6E3Jus7f08TuaWZcr2qd2AVo4uJObq/6Bjv8YN+bBHF348cYbBK9cTlpzKipEV9K+aLnw3qB+bA0MYtHI9ByMi+WnYQBo4qMbiD3p2pUs9N2bu2kffZatZdd6fT3p3p0f9enqN5WkZvwD6NWnIBz1L2mXFei4np7J8VMXt8u3gfmwKCGHw8vUcDI9kyXBV3gO42tqwYezzRKdl8OL6TQxYtpYlJ/U3n6gb39ebUT09+d+6g4z/3+/kFxTy47SK50gzU8UcOX9D+XNk75lLNW5zVu6nqKiYw36ROo8hPx8a1YePpz1Y+esJ8Or70K4VbFsG44bDxwvgxDlVmT2HYf4SeGM8bPkNGrnDK7MgTc/HVJ5za8xHbXqwOPAk/f9aRWhGMmt6VTR+uSrGr/2/M3TPWhLybrL2mbLjl+/1aNps/FF5e/PYTv0GUmL0sLYMfc6Lb346wKuz1nPrVgELPx9R4bySknqTpauP8sq0NUyevha/oGt8NXsIbrVVORMemci8xXsZ9/oKZn26CQMDAxZ+PgJDQwOdx9C/fiNmd+rK4vOneW7jWsLSUlg9cFj545eREXFZWcw/fbzc8WvQn+tps+Jn5e3F7YoDXLujrui8/ur612nCbK+eLA4+wXN7VhCWkcTq7iPLXYO1c6rDzphQRh/awNC/15CQd5M1PUZprMGWdhlObStbJh/dwnN7VhCfm8W6nqP1vwZr2pAPnunCkmNnGPLbei4npbJ8zH3WYEP7sTkghMG/refQlUiWPK85Ft/Tq5E7HjWdScqueP7RlX5NGvKh2rwSlvQP5vsV2uf7Dt8v1bi9v2s/RcXF7L+i+zH4nqdpjf80jcXP1WnMR949WBx0gv67Vypi6Tmy4nVxTCijD2xg6D5Fu6ztNVKjXT7y7knXGvWYfnIXvXYuY8Xl83zWtje9atXXWxx9ajTnnaZ9+SXcl5HHfuFKdiK/tBuHnYmF1vJZhfn8FnGMsSd+Y9jRJeyI8+dzj8H4OKrquLjNGGqZV+PtcxsYefRnbuRn8mv7CXrvX0LokhzgfsJMTU1xdnamTp06vPbaa/Tq1YudO3cyYcIEBg8ezFdffUWNGjVo1KgRAMHBwfTo0QMzMzPs7e2ZPHkyOTmKBcecOXNYvXo1O3bswMDAAAMDA3x9fZXPFR0dTffu3TE3N8fDw4PTp08r/7dq1SpsbW3ZuXMnTZs2xdTUlNjYWDIyMhg3bhzVqlXD3NycZ599loiIiDL327VrF40aNcLc3Jzhw4eTl5fH6tWrcXNzo1q1arz11lvcvXtXI/abN28yevRoLCwsqFmzJkuWLNH4v/oWJfe2Wdm6dWu5MejDeB8vNl0MYZt/KFEp6cz56yC3Cu8w1Ku51vLj2rfiRGQMK05eJDo1ne8PnyYsIZkx7TyVZXYGhvGT71lORcfqte7ajOnpxbI95zgaGE1EfCqfrNyHo60F3Tzdy73PqUsx/LTjFEcCyp61fc8bgztyMiSGxVuPcyUuheupWRwLiibjZr4+wuBlr9ZsvBTC5tBLRKan89Hhg+TfucOIZtrbJSgpiXknjrEr/AoFpfqhOnNjY77r048PDx0g6/YtvdRd3cuN27IxKoDN0UFEZqfy0bm9ijjcPbSWn35qJ+si/AjLTCY6O433z+3BwMAAH2c3AOpa2eHlUIuPz+8jKD2BqzfT+fj8XkyrGDHAraleY5nQ3otNfiFsDQglKjWdT3cpcmVYK+1tMrZdSa6cKsmVI6cJTUjmhbaeAOTcLuDldVvZFxrO1bQMAuMT+WLvEZrXcMLF2kqvsQCM6t2KFTvPcsw/isjrqcz5bR8O1Szp6lX+YvXtb7ay+0Qo0TfSiIhL5fNl+3FxsKaJmxMAFmYmDOzSnEW/H+VCWByXryXz+fL9eDSoSXN3F73EMamZN3+EB7EpMoTIrDRmn9pP/p1Cnm/QQmv5acd2se5yAKHpyURlpfPeyX0YGBjQ0aWORjknc0vmtO/F28d2cecxfBj6UlsvNgaGsCU4lMi0dD7Zd5D8wjsMb6m9f433bsXx6BiWnbtIVFo6i46fJjQxmbGtPZVlvGq6sC04lHOx14nPymZjYDCXk1PwcHHWayxPy/gFMLGtF38GhLA1SJH3n+w9yK07dxjuUU67tGnF8agYlp9VtMviY4p2eVGtXWZ068ixqBgWHDlOWFIKcZlZHI6IJj1PP/OJujE9vVi+WzFHRsan8umKkjmyVQVzZEgMP28/xRH/8ufItOw8jVs3T3cuXIkjPjVL5zF0aQ/TJsEzXR6s/B87oKYLvPcGuLvBC0Ohd1dYrXYS3eo/YcRzMLQf1HeDOTOhalXYukfn1dcwqWkb/ogIZFNksGL8Or2f/LuFPF+/nPHr+C7WXfEnNCOZqOx03ju1FwMM6OisOX4VFN0h5Vau8pZdcFu/gZQYMbA1a/88w8mzkUTHpPC/7/Zgb2dJp/YNyr3PqfNRnL14lfiETK7fyGDZ2hPk3yqgaaMayjJ/7Q8i6NJ1EpOziYhKZtm6Ezg5WuNcvexZ0Y9qkmdrNl4KZnPYJSIz0pl95AD5dwoZ0UR7mwQlJzH31DF2RZQ/fqXfyic1L0956+FWj5jMDM7GX9d5/dVNatyWjZGBbI4OJjI7jdnn9pF/9w4j3FtqLa9cg2UkE52dzvtnFWuwjuprMMeafHRuP0HpCUTfTOejc/swrWLEQD2vwSa29+JP/xC2BpaswXaXrME8y3m/0rYVxyNjWH5asQZb7KtYg73YxlOjXHUrCz7u251Z2/dRWFT+/KNLWuf7Ow8w35fMK4uOlZ3vU3PzNG49G7pz5loccZm6H4PveZrW+E/TWDypaVtFLFElsZzZp4ilnLyfduIv1oWrxXKmJBYXN2WZ1o412RIdzJmkWK7nZvF7RCBhGcl4OOhnbQ8wrp4PW2IvsiPOn+icFL4I+ov8u4UMru2ltfyFtBgOJ4ZxNSeV63kZrL96hoibSbSyqw1AHQt7POxc+TLoLy5l3SAmN40vg3ZRtYoRz9bU3s7inzEo/vfdnkZygPtfxszMTHm29qFDh7hy5QoHDhxg165d5Obm0qdPH6pVq8b58+fZtGkTBw8eZOrUqQDMmjWL559/XnlWeEJCAj4+PsrHnj17NrNmzSIgIICGDRsyevRo7qidEZWXl8f8+fNZtmwZly5donr16kyYMIELFy6wc+dOTp8+TXFxMf369aOwsFDjft9//z1//PEH+/btw9fXlyFDhrBnzx727NnD2rVrWbp0KZs3b9aIdcGCBXh4eODv78/777/P22+/zYEDByp8fe4Xgy4ZVzGkmYsTp6NUB6KLi+F0VCyetbRPWB6uLpwudeD6ROQ1PF31N8E9qJoONjjaWHA2TFW/nFsFhFxNpGW9GhXcs2IGBtCpRV2uJWWw5K0hHFwwhdXvj6KbR/kHBB6FsaEhzas7cTL2mvJvxcDJ2Gu0cn601/mzbj04EhPNyTj9f/hgbGhIczsXTibGKP9WDJxMvEorh5oP9BhmVYwxNjBUHswyMVScBXb7rioniv/P3n3HVV39Dxx/gczLXoIb90JRnKC5zZ17lDtn3zJzZablaJiZpm3LypErZ5or996AoiICArL3kA3C74+L93IZanKvhr/38/G4Pi6Xcz+ew5n33PM5B8h++JCWDtW0FfViDPX1aVzZUeNLm3zgwr3S60qzapWKfclzLjCk1PAAFsbG5OXnk5Kp2wFwZQcr7K3NuXxbHb+0jGxuBUbR5F9MRJubKu9ASU5T5k9DZ0cMDSpoXDckMpHIuJR/dd2nZaivj4udE+ciglWv5QPnIkNwq/h0dd60giGG+vokFZow1QO+7tCHn29exj8pXruRLoGhvj6NnRw5H6xZvs4H36d5lZL/bs0rV9IID3AmKIRmhcJ7hkfSpW4tHM2Vq13aVK+Ks40NZ4ND0JWXpf2CgnypVEK+BN3X+DsX1qxK8Xw5ey9ElY96QMfaNQlKSOTXEQO5MH0K28eOoFs93fQnhVWxt8LeukgfmZHNzXtl6yOLsrVQ0L5JTf46e1Nr1ywL71vg3kLztfatlK8DZOcotzspHEZfX/nzozC6oG6/itSViGDcHP5FH6mvT1K25hc+bZ2qc3XYOxwbMJFP276KtbGJNqNeokqOVtjZmnPNW52etPRsfO9G0rjB05UvfX09urzSABMTQ27diSgxjImxIb26uRARlURMXIpW4v7Io/brbKhmnT8Xdh+3MrZfhf+PAfUbsd1Xt/VDOQZz4myUeqsX5RgsGLd/OQZ7VL6MKjxuDFZVa3EvStUWBxVvi5uXNgarWokLQcXb4sJjMD1gef+e/HrhGgGxuu/roVB/XzQtj+vvS+hXivb3hdkpFHSqXZMd13VXxl62Mf7L0hY/qvfF8iXyGdKSpf7S/VpsON2q1lWt6nZ3rE5NSxvOFBp/a5OBXgUaWlXiYpz6i/V88rkUF4irzdO1NW3sa+FsZs+1eGW+qspXXuHylU923kOa29Yo8RpC/BfJHtz/Efn5+Rw7dozDhw8zbdo0YmNjMTMzY+3atRgZGQHwyy+/kJmZyYYNGzAzU34g/+677+jXrx/Lli3D0dERU1NTsrKycHIqvgJt9uzZ9OnTB4DFixfTuHFjAgICaNCgAQA5OTn88MMPuLoqv1n29/dn7969nDt3TjVRvmnTJqpVq8aePXsYOnSo6n0//vgjtWsrP4AOGTKEjRs3Eh0djbm5OY0aNaJz586cOHGC4cOHq+LTrl07PvjgAwDq1avHuXPn+Prrr+nevXupf6cnpUGbrBWmGFTQJz5Nc2/c+LR0ajqUvDe4vbkZcalFwqemYW9e8m1Pz5OdpTIORff6jU9Jx97q2eNna6HAzMSI8T1b8cNf51i96ywejZ35amo/Jq/cjqd/yXuBPSsbU1MM9PWJS9dMR1x6OrVtbZ/5un3r1celoiP9t24qaxSfio2xQpmOTM39pOMy06htWfwW0ZLMbdaZ6IxU1Qe0wJR4wtOSmePamfmXD5LxMJs367emspklFU2LbzGhLTYKZZ4UrStxaenUtC+9rhQL/5i6YlShArO7tWe/zx3SdLxlk11BfUhI1oxfQkoadlYl3/pXlJ4ezHyjE953w7kXHl9wXTOyc3JJTdecoE9ISX/q6/4bqjKWoZmO2Iw0als9XV35oGVHotNTORcZrHrtrSZtyM3L43cd77n9yKPyFVdCW1zb7jFtcbHymIaDmbp8fXLkBJ/07MbZdyaT8/Ah+fn5zD90lCuh2m2zCntZ2i8oPV/i0tKp9S/z5VG9tzNTYG5sxGT3Vqw6dY6vjp/lldrOfDe4H6M3befKfd3ljareF+kjEx6kq36nDX09GpGWlaOT7UmeRVwCFG2m7WwhNU2PzKx8Uh7Aw4d62NloLvWxs4EgHX6XUlofGZuZTm2rp+sjP2jRkeiMVI0v+U6FB3Ho/l1CHyRRw8KGOW4dWNdtKIMO/EFevu6WM9naKNv4hCTN9CQmpal+V5paNez5fvlIjIwMyMjIZsFnewgJ1ZxwHNC7GVPGdURhakRIWDyzPtpObq52765RtV8ZRcYt6enUtn729quwV2vVwdLYmB13dPjtCYXLV5H26N+MwZoXjMEiC8Zgycox2PvNOvHh5UNk5GbzZoPnOAYr+vkjLZ1ajxmDFetTU9OwL9RHTmrXity8fDY8hz23H1H1K+la6O9LGU8OatKItOwcnW5P8lKN8V+itlg9Li6alrSnT4tbJ2VaCo2LF10+wtK2Pbk05B1y8h6Sl5/PvIuHuBwTqs3oq9gYKTDQr0B8lmY64rPSqGnuUOr7zA2MOdp9Nob6BuTl5/GZz9+qSfKg1Dgi0pOY3rA7S27sJSM3h9G13HEytcLeWPd3zgqhLTLB/YL9/fffmJubk5OTQ15eHm+88QaLFi3i7bffpkmTJqrJbQBfX19cXV1Vk9ugnCTOy8vDz88PR0fHx/5fTZuqb72pVEn5rXZMTIxqctjIyEgjjK+vLwYGBrRp00b1mp2dHfXr18fX11f1mkKhUE1uAzg6OuLs7Iy5ubnGazExMRrxcXd3L/bzqlWrypSGwrKyssjK0pxIMjY2fuH7ej8vvVo3YP7Irqqf3/1uj07+Hz095R6PJ68HsumYchB8NywW19qVGNKhqdYnuHWhkrk5H3fsxJjdOx+7BcB/ydRG7vSt0Yg3jv1BdsFto7n5ebx1eidftO2D99CZ5OblcS4qiJMRASjX4pRPBvr6rBraB/Rg0f7S97l9Vj3cGzBvbDfVzzO+3lPma74/uiu1qtox+bNtZb7Wi/JWkzb0q9WAEQe3klVQL1zsHBnfqAV99m54wbEru9EtmtGsshNTdvxFeHIKrapVYWH3LsQ8SON8yPPfQupZlcf2qzT6Bf3JMf9A1l1R9ie+MbE0r1KJ15s31eoEd682DfhwlLqPnP7tHq1d+3H6t2vMwUu+ZOeW77z6r3vLpQ39ajZkxOEtZBXaWmFfsHr86pcUh29iDGcGT6WtY3XOR2nv7o1uHRsy6+1XVT9/sGTnM1/rfngCE6evx0xhTMd29fhwRm/enbdVY5L7yMnbXPEKxs7WnBEDW7Fobj/eeX8z2Tnlq5wNa9SEUyFBxKQ9n8Okn9XURm3pV6Mhrx/dpDEGm3p6F8va9Ob60BkFY7BgToQHolfOhmCNnSoypnVzBv3y/L40fV4GuzZm7y3f/3R/+TKN8V90W6xNbzVuSz/nhoz4Z7NGWsY2aEEz+8pMOLGD8NRkWjtWY0nr7kSnP+DcfygtabnZDD31IwoDI9rY12J2456EpSdyNT6Y3Pw8ZlzdwmLXAZzr+SG5eQ+5FHePM9F3VZ/1RRnly9/xeZAJ7hesc+fO/PjjjxgZGVG5cmUMDNRZUngiWxsMDdUHBDxqqAofJGlqavpMDVjh6z66dkmvaePQyielobClS5eyePFijdcWLlzIokWLnur/SkrPIPdhHnZmmisA7MwUxD1IL/E9Ja1AtSthVffzcOp6IDeD1Cc8GxaULVtLBXEp6g8OdpYK/EKf/UCypNQMch4+5F6k5mqioKgEmtV+utu9/o3EjAxy8/KwV2j+ne0VCmKf8QORS0VH7BVm7H19lOo1A319WlepymjXZjT4brXWVxMkZqUr02GiWc/tTcyIzXx8OiY2aMPURu6MPr6ZO0maeXczMYq+B3/FwtAYQ/0KJGSls+vVsfgkRGk1/oUlpivzpGhdsTdTlFr241LTiocvoa4Y6Ovz9ZA+VLayZNyGHTpZvX3GK5Bbgeq/z6MD5WytFMQnq/PC1tKMu/djir2/qNmjutDetRZTlm4jJlF9KFN8chpGhgaYK4w1VnHbWmr+P9qiKmOmmn9nB1MzYjMe//9NcmnFW03aMPLwn9xJVJex1o5VsTM14/ywqarXDPT1md+qM282akn7HWu0mwjU5cu+hLY4Nu0xbXGx8mimCm9sUIGZHdvx9q59nAxUro7yi42joaMDE9q00NkE98vSfkHp+WL/DPnyqN4npiv7k4A4zf4kMD6BFlW125+c8g7E5566jzQyLNRHFq73FgrulqGPLKxZ3So4V7Llg5/3a+V62mBvC3FFDouMTwBzs3xMjJXbkVSokF/sQMn4ROV7daW0PtLBRPHk9qtxa95q0paR/2zTaL9KEpqaTHxmOs6W1lqdVDl3OQDfu4XGYAUHSdpam5GQqI6/jbUZAfce36/k5uYRHpkEwN3AaBrUrcSQ11qw4vt/VGHS0rNJS88mPDKJ234R/L1lGq+41+XY6TtaS5Oq/TItMm5RKIhNL3sfVsXCgnZVq/PWQd0fNKcuX0XaIxMzYjMef5jipIateauxO6OObSk+BkuIos/B3wrGYPokZGWwu8dYfBIiS7la2anGYEU/fzxhDFasTy20Erpl9SrYmSk4MX2i6vcG+vrM7d6BMW2a0/Xb37ScCiVVv6Ioob//F2mxNzMrMXzLqlWobWfLe3t02wa/VGP8ct4WF6YeFxdNy1OMixu15i2Xtow8slUjX4wrGDCnWUemnNrFiXDlaug7SbE0snFkcqM2OpngTsxOJzfvIXbGmumwMzYjLqv0g9/zySc0PQEAv5Qoapk7MKFOB67GBwPgmxzJsNM/Ym6gLF+J2elsaj+ZW0n//cVqQjwie3C/YGZmZtSpU4fq1atrTG6XpGHDhly/fp20Qh+Cz507h76+vuoQSiMjo2KHOT6rhg0bkpuby6VLl1SvxcfH4+fnR6NGZT/M4uLFi8V+btiwYZmv+8i8efNITk7WeMybN++p35/zMI9bkdG0raXe10xPD9rWqoZ3WMkD1euhkbStVV3jNY/a1fEO1d3AtjTpWTmExiarHvci44lNTqN1A3V6zEyMcKnpxI17Je/l+DRyH+ZxOzgaZ0fNT7rVK9oQmaDd/R8BcvLyuBkTjUc19d9ZD/CoVh2vqGf7O58PvU/PP9bTd/NG1eNGdBR/3fGl7+aNOpkcysnL42ZCJB6OzqrX9AAPJ2e84kofSExu2JZpLu0Yd2LrYwe0D3KySMhKx9nChia2lTgSdleLsdeUk5fHrYho3AvXFR5fV7xDI3GvWaSu1KquEf7R5HYNO2vGb9xJUoZuDs5Lz8whLCZJ9bgXEU9cUiqtGqnjZ2ZiROPaTvgEPr6MzR7VhU4t6vC/L7cTUWT/U9/gaHJyH2pct7qTDZXsLZ943WeRk5fHzfgoPAodEKkHeFSqgWdM6XV+iktrprl6MPbIdnziNcvYrsBb9NzzO73/Wqd6RKU94Oeblxnzz/ZSrlj2dNyKisbdWbN8edSohld4yX83r4hI3J01y1c75+p4F4Q31K+AUYUKxep2Xl6+ahWxLrws7RcU5Etk8Xxxd66m+jsX5R1ePF88alZX5WNOXh4+kdHUKrJdS01bGyJStNufpGflEBabrHoo630JfWStsvWRhQ1o35jbwdH4h8Vp5Xra0KwxXCyy29D5q8rXAYwMoXE9zTB5eXDRUx1GF0pvv5zxjC29j5zSuDXTmpbcfpXESWGBjbEpMU+Y3Pi3MjJyCI9MUj2C78cTn5CKm6u6/CtMjWhYr1Kp+2mXRl9PPWFeEj30ChablB7mWTxqv9oVbb+qVsfzGduvwoY0dCE+I53jwffKfK0nUY7BolQHRMKjMVgNPB8zBpvSqA3vuLRj7PFtTzEGyygYgzlxJNRfi7HXVGpbXLMaXqWNwcIiaVt0DFZTPQb7y8eX19ZsZMDPf6ge0Smp/HrhGhM379ZtWv5tfx8eiXuN0vv7woa6NsYnMpo7Mbptg1+2MX55bosLe1TvPUqq949LS6M2TGviwdhjfxbLF0N9fYwqVCC/6HgyP09nK59z8x/imxxJG/taqtf00KONfS2uJz794bx6enqqvbcLS83NIjE7nepmtjSyrsyJaO19USqErskK7nJk5MiRLFy4kLFjx7Jo0SJiY2OZNm0ao0ePVm1P4uzszOHDh/Hz88POzg4rq2c/Qb1u3br079+fSZMmsWbNGiwsLPjggw+oUqUK/fv3L3N6zp07x5dffsmAAQM4cuQI27dvZ/9+7X2jro3tSNaf92TpwB7cjIjBJyyKMe7NMTUyZLencm/ALwb1IDolla+PngNgw0UvNrw5lHEebpy6G0TvJvVpXNmRhXuPqq5pZWpMJStLKloov3V9tEdxXGqazld6bz7mycTebbgfk0REXDJv9fcgNimNk97qQyp+mjGYE14BbDt5HQBTY0OqOVirfl/F3pJ6VR1IScskKlH5LfGGf67yxaQ+ePqHcdUvFI/GznRoWovJK3Qz4fWr5zW+erUnPjHRXI+KYnxzNxSGhuy4rcyXr17tSXRqKsvPnwWUg486tnYFzyvgaG5BQ3sH0nNyCElOIi0nh7vxmisG03NySMrMLPa6VtNx5zJfuffDJyGS6/ERjK/fGoWBITvu3VCmw70f0ekPWH79JABTGrblvaYdmHH+L8LSklWrKdJzs0nPVR782qtaAxKy0olIS6G+tQMft+jOkbC7Ggcp6cK6i558MUBZV26ERzG2bXNMDQ3ZVXAK2RcDehDzIJWVx5R1ZeMlLzaMG8p4dzdO3g2ij4uyrny8T1lXDPT1WT20L40qVWTqlj1U0NNTrdBJzsgkRwt3hDzO1n+8eLNfG0KjEomIS2HqIA/iElM5VWjf3O/fH8LJawFsP+YNwPuju9DDvQGzV+8lPTNbtW9vano2WTm5pGVks/f0Td4b0ZGU1EzSMrKYPaoLN/wjuKmDCW6AtbeusqJ9b3zio/COjWRC45YoDAzZ7u8DwIpXehOdnsqX104DMLVJa2Y0b8/0U38TlpqCQ8Eql7QcZRlLysrUOHASIDcvj9iMNO6lJOgkDQC/Xfbky749uBkZw43IKMa1VLbFO28oy9eXfXsQ/SCVFaeU5Wv9VS82vTGUN1u7cTIgiD6N6uNSyZEFh5TlKzU7m0v3Q5nb+RUyc3OJSE6hdfWqDHBpxNLjp3SWDnh52i+A3y97sqxfQb5ERDG2tbLeq/KlX0G+nCzIlyte/DGqIF8C1fny0UF1H/nrxat8PbAPV0LDuBgSSodaznSuW4vRf+imPyls8zFPJvQpoY/0UveRP85U9pF/nijUR1a0Vv2+sr0l9aoV9JEJ6pVUZiZGdGtRj6+3n9ZpGtLSofBOLmGR4OsPVpZQ2RFW/gzRsbBsvvL3I/rD5t2w/EcY3Fs5cX3oJPz0hfoaY4fBvKXg0gCaNIANOyAjAwb20mlSWHv7Civa91G2X3GRTGhY0H4FFLRf7fsQnf6ALz0L2i+XNsxo1p7pp/cRlpqMQ0EfmVbQRyoMDJnu2o5DIXeJzUiluoUN81p2IjglkdPhuu0jAbbvvcaY4e6ERSQSFZ3Mm6PaE5+QytmL6snPlZ8O48wFf3bvV27RM2nMK1y6FkRMbAoKUyO6dmxIsybVmbNQWR8qOVrR5ZUGXPEKJiklHQc7C0YOaUNWVi4Xr2o/TWu9r7GiW09uxERxPTqKN13dlOOWgkMhV3TrSVRaKssvlNB+VaiAk5m5Rvv1iB4wtIELO+/c5qEO90LXSMudy6xw78uN+Ciux0fwZoNWKCqox2Ar3PsSlfGA5d7KPmFKo7bMaPoK753bW+oYrHf1BsRnphORnkIDawc+btGNf8LuckbHY7DfL3qyrH/xtnjXdWVbvKy/si1eebzg88plLzaOGcr4tm6c8g+id+P6uFR25OP9yrY4KSOz2KKCnLyHxKWmEVT0dg4tU/X3Ucq0jGtVpF8pqb8fWUJ/X6hfATA3MqJng3p8cVy3bfAjL9MY/2Vqi9fevsyKdn3xiY8slBYjtgcW1HuPvkRnPOBLL2W9n9q4DTNcX2H62ZLTkpqTzcWo+8xr0ZnMh7mEpSXTtmJ1BtVy4dNr2t9W8ZEN987zabOB3E6KwCcpjFG13DGtYMSe+54AfNZsENGZKXxzR1kPJtR5hVtJEYSmJ2CkX4FXKtajb1VXPvPZp7pm90qNScxOIzIjmboWjsx16cWJKF8uxAaWGAfxLz2fru3/PZngLkcUCgWHDx9m+vTptGrVCoVCweDBg1m5cqUqzKRJkzh58iQtW7YkNTWVEydO4Ozs/Mz/5++//8706dPp27cv2dnZdOjQgQMHDhTbguRZzJo1i6tXr7J48WIsLS1ZuXIlPXr0KPN1tengzbvYKEx5t4s79uYKfKNimbxxt+pwvEpWFhqr47xDI5mz4yDTu3owo1s7QuKTmLZlL/4x6kmGzvVrs3SQOp0rhykPzfzuxAW+P6G5ql3b1h++iqmRIQtGdcNCYYx3QATvfLNLYy/QqvZWWJubqn5uVMORX2YNVf08a1gnAPaev8Wi9crbY094B/L5pmOM79mKOcM7ExKdwJw1+/AO1M6qt6L2+9/F1lTBjLYe2CsU+MbFMm7PLtWhNJUtNPOlopk5+0eOVv08uUVLJrdoycWwUN7YqftJk9Lsv++LrYmCGU07YG9ihm9iNONObFMd5FJZYamRjpF13TCuYMAPrwzWuM5qnzOs9jkDQEVTc+a7dSu4DTKVXUE+fHfzrM7TcvDWXWwVpkzr5I5DQV2ZtEldVypbWWisbvAKi2T2roO819mDGV3aEZyQxDtb9+Ifq6wrjhbmdG2g3Nv/r6mjNf6vMeu2cznk6VcoPIsNB65gYmzIh+O7Y64w5vrdcKav2KWxn2mVilZYW6jrypCuzQBYM2+YxrUWrz3E/rO3Afh6y0ny8vP54p1+GBlW4KJPMF9uPKazdPwddAdbE1NmNG+Pg6kZvgkxjP1nu+pgrSpmlhr5Mqp+c4wrGPBTlwEa11nldY5V3ud0Fs8nOXBHWb6mv+KOg5kC35hYJmzbTfyjOm9ZpHyFRzJz70FmdPBgVod2BCcm8b+de/EvtPXFe38dYHbH9qzo1wtrExPCU1JYefocm71u6DQtL0v7BXDAV5kv73YoyJfognx51EdaaqbFKzySWX8d5L2OHszspMyXt3eo6z3AkbuBLDx4jCkerVjQvTNBCQlM27mPa2G66U8KW39I2UfOH13QR/pHMG11kT7SoXgf+fOcQn3k8E4A7Dt/i0W/q7eQeLVVffSAw5d1uxLqlh+MfU+9amzZ98rnA3rms3QexMZDZKEdMapWUk5mf/EdbNwJTg7wyRxo31odpncXSEyCb35THkrZsA78vFy3W5QA/B18R9lHNivUfh3988ntV+eBGtdZ5X2WVdfP8TA/n4Y2FRlc2wVLIxNiMlI5HRHESq8zqn1udWnLzsuYmhgy+50emJsZ43M7nDkLd2j0K5WdrLGyVJcvGysFH87ojZ2tGWlpWQQGxzFn4Xaueitve8/OyaVp46oMea0FFuYmJCalcf1WGG+/v4mkZO0vmtgf4IedqSkzW7fD3kyBb2ws4/btVB1mXNnCslj7dWDEGNXPk91aMdmtFRfDQ3l995+q19tXq0EVS0u2F0yUPw/7Q3yxM1Yw0/WVgjFYDONOqMtXZTPNtIyqqyxfP3YYpHGdVTfOsNpHOc5SjsG6qsdg927y7fMYg90uaIs7FozBomOZuPkxbXFYJLN3K8dgMzsrx2Bv/6nZFr8oj/oVjf7+z6fs7zuW3N8D9GlUHz092Hf7+axGfZnG+C9TW/x3SEFaXF9RpiUxhrHHt2mmpdBM5Kh6ynz5qWORtFw/y6obyr/9tDN/8X7zjqxq3w9rIxPC01JY7n2aP+7q7oDWwxE3sTFS8L/6XbA3NscvJYq3Lm0kIVtZvpxMrcgrlA7TCkbMb9IXR1NLsh7mEJQax4deOzkcoW5zHUzMmdO4J3bGyvK1L8ybNXd1u+hDCG3Tyy96P4UQ/w80/PjrFx2FMvFdMkP13G1K+U6L5xp1WmqtXvmYkP9996bPVD2vtfnzFxiTsrn3xoeq5w0Wl+/ydWehuny1Hle+y9fldery5fz7ly8wJmUTPP591fO6X5Tv8uX/wcvZftX7vHzny90P1fnSYlL5Tcu1X9TpyIuq9wJjUnb6Tupb6J3XL3uBMSm74LFzVc879lv+AmNSdqf2zVE9r/ndihcYk7IJemeW6nnNTUtfYEzKLmikejvF+p+U3/YLwO8jdRtWd2n5TYv/vEJ9fTke34PmGP9laoudN37xmJD/fcGjP1A9b7rv4xcYk7K50W/Ji47Cf1adZf+9NjBg7ownBypnZAW3EEIIIYQQQgghhBBCaJmeLCt+LuSQSSGEEEIIIYQQQgghhBDlkkxwCyGEEEIIIYQQQgghhCiXZIsSIYQQQgghhBBCCCGE0DbZouS5kBXcQgghhBBCCCGEEEIIIcolmeAWQgghhBBCCCGEEEIIUS7JFiVCCCGEEEIIIYQQQgihZXqyRclzISu4hRBCCCGEEEIIIYQQQpRLMsEthBBCCCGEEEIIIYQQolySLUqEEEIIIYQQQgghhBBC22SLkudCVnALIYQQQgghhBBCCCGEKJdkglsIIYQQQgghhBBCCCFEuSRblAghhBBCCCGEEEIIIYS2yRYlz4Ws4BZCCCGEEEIIIYQQQghRLskKbiGEEEIIIYQQQgghhNAyPVnB/Vzo5efny59aCCGEEEIIIYQQQgghtKj+J1+/6CgU4/fRjBcdBa2TLUqEEEIIIYQQQgghhBBClEsywS2EEEIIIYQQQgghhBCiXJI9uMX/S40W/PduEfk3bn+qvp2kzZiVLzAmZXdpw0zV89ory3daAmeq0+K85qsXGJOyCZ4yW/X8v3g71b9R+NartiNXvMCYlN3FTbNUz51/KMfl63/q8lXvs/Jdvu7OV5evl6n9qru0fOeL/zx1vrScWH7z5eraQn3K+mUvMCZlFzx2rup5XlS9FxiTstN3uqt63nps+S1fAJfXFxqDrSi/aQmcVaiulOP+ETT7yPpLyndb7Pexui0uz+PJwmNJ5+/L91gy+G31WLLX6ekvMCZld7DDatXzmn8sfYExKbugUfNUz+vvWvICY1I2foM+ftFREP/PyQpuIYQQQgghhBBCCCGEEOWSrOAWQgghhBBCCCGEEEIIbct/0RH4/0FWcAshhBBCCCGEEEIIIYQol2SCWwghhBBCCCGEEEIIIUS5JFuUCCGEEEIIIYQQQgghhJbpyRYlz4Ws4BZCCCGEEEIIIYQQQghRLskEtxBCCCGEEEIIIYQQQohySbYoEUIIIYQQQgghhBBCCG2TLUqeC1nBLYQQQgghhBBCCCGEEKJckgluIYQQQgghhBBCCCGEEOWSbFEihBBCCCGEEEIIIYQQ2iZblDwXsoJbCCGEEEIIIYQQQgghRLkkK7jFvxIbG8vHH3/M/v37iY6OxsbGBldXVz7++GPatWuHnp4eu3fvZsCAAS86qlr3Tld3hrZsgoWJMV73I1iy9xgh8UmPfc/rbVx5s30L7M3N8IuK5bO/T+ATHq36/dCWTejjWp9GlSpibmJMm09/4EFmlk7TMXmQB/07uWCuMOGGfzhfrjtGaHTp6RjbtxWdWtalRiVbsnJy8fGP4LttZ7gflQiApZkJkwa508alBo52liQ9SOfUtUDW7DxHWka2ztIxytWVSS1b4mBmhm9sLItPnOBGVFSJYeva2fGehwcuFStS1cqKT06cYJ2Xl0aYqa1a0aNuXWrZ2pKVm4tnRATLzpwhKDFRZ2kAGN24GVNcW+FgaoZvfCwLzx3jemzJ6RjRoAmD6jWmvq09AD6x0Sy/fKZY+Bkt2/F6gyZYGhtzNSqCBWeOEJySpNN0ALzR0pUJ7i1wMDfjTnQsnxw6gU9EdKnhezasy/ROHlSxtiQ4IYmvjp3hdEBwiWEX9+7KiBZN+fzwSdZf9ioxjLZNGuxB/85NMDczxuduBF/+dvSxdWXMa62VdaWyLVnZyrry/dbT3I9Ul6G5b3ajlUsN7G3MyMjMUYbZcoaQyASdpWO0SzOmNGuFg6KgjJ05xvWYUuqKjR0zW7ejiYMjVS2tWHL2OL/d8NQIo6+nx3utPBhYrxEOCgXRaWnsuHOTb69d1FkaAEa2cGVC20Ll658T3Hhc+WpQl/c6Fipfx89wKjBYI0xtO1tmd2lP6+pVqaCvT2BcPO/s/JvIlAc6TcvL0n4BjHRzZWKbgnyJiWXJPye4EfmEfOngQVUrZb4sP6mZL/7zZpT4vmXHT7P20jVtR7+YKf09GPiKso+8HhDOF38cIzQmqdTwzetWYXTPljSs4YiDtTmzvvuLU96BGmFMjQ2ZNvgVOjarjZW5KRFxyWw75sXOUzd0kobR9ZszxaWNsl9JiGHh5aNcj4ssMeyIuq4Mqt2Y+tYOAPjER7Hc67RG+K/a9WZInSYa7zsVfo+xR7frJP6PXLkOv22BW3chNl6Pbz/Np9srj3/PZS/44nsICIZKFWHqaBjYSzPMpt3w21aIS4AGtWH+dGjaUGfJ0DB5oAcDCo3Blq1/8hiscwvNMdi3f6rHYAADOjWhR9sG1HeuiLmpMV3e+p7UdN2NJUc1K9J+HX+K9suxUPvlqdl+tapShUmtWuLi6IijuTlT//qLIwGBJV5P216W/hEKxmAehfrIg08xButc0EfGFx+DvdOxLX0a18fJ0oKchw+5FRnD1yfOcSO85L+P1tPyEownR7s0Y0rzlurydfp46eXL1o6ZrT3U5evMiWLl6+zoiVS1tCr23g0+3nx8+phO0vBI30rtGVKtCzZGltxLDefHwJ3cfXC/xLDdHFszq/5Ijdey83Lof3a2xmuja/Sip5M7Zgam3E4J4jv/7URkxuosDar/t54bkxu1wcHUHN/EGBZd+Yfr8aX0kXVcGVSrCfWsCj57JUTxlfcpjfAKA0PmNu9M96p1sTE2JTQ1mXV+V9nsr/vPK2/UasmEuh44mJhzJzmaT64fxCcxosSw3Ss3YGr99lQ3s8VAX5+Q1AR+97/AX6E+qjBLW7zGoBrNNN53JjqAiec26zIZohz5/vvvWb58OVFRUbi6uvLtt9/SunXrUsNv376djz76iODgYOrWrcuyZcvo3bu3zuInK7jFvzJ48GC8vLxYv349d+/eZe/evXTq1In4+PgXHTWdmvBKS0a1bcbiv44y4qctZGTn8PPYQRgZVCj1PT1d6jG3Vwd+OHGRIT9s4k5UHD+PG4StmakqjImhAWf9Q/j59JXnkQxG92nFsO7NWLbuGBMWbyYzK4fVcwZhZFh6Opo3qMaOo95MWLKFd5ftwKCCPt+8PxgTI+X3Y/bWZjhYm/PNltO88eF6lvx8GPemziyY8KrO0tGnXj0+7NiRby5e5LU//uBObCzrBg3CztS0xPAmBgaEJiez/OxZYlJTSwzTplo1/vD2ZsiWLYzZsQMDfX3WDx6MqYHuvgfsW7s+C9w7sfraBfrs3MjthBg29BmCnYmixPBtK1djb8AdXt+3jUF7NhOZ9oCNfYbgqDBXhZnq2prxLs2Zf+YIA3ZvIiM3hw19hmBcofQ81oZejeoxr3sHvj99kYG/bOJOdBy/vjEIW0XJedK8aiVWDOrNDu+bDPhlE8f8Avh+2GvUdbArFrZb/dq4VnEiOqXkvNOF0X1bMaxHc5b9fpSJH28mIyuHVR8MfkJdqcrOo95MXLiZd79Q1pXVHwzBxFhdhu4ERfPpz4d4fc463lu2Ez30WP3BYPT19HSSjr516rOgXSdWX71An+0buR0Xw4a+Q7AzLbmMmRoacj8lmWUXTxOTVvLfe2rz1oxq7MrHZ47RbcvvfHHhNFOat2Zck+Y6SQNA74b1mNetA9+duciAXzdxJyaOX0c8pnxVqcTKgb3Zfv0mA9Zu4ujdAL4fqlm+qllbsXnMMO7FJzLqj+30+2Uj35+9RFZurs7SAS9P+wXKfPmwawe+O3uRAb9twjc6jt+GPz5fvu7fmx3Xb9L/t00c9Q/gh8GvUddenS/u36zReHzw92Hy8vM57Beg07QAjO3ZihFdm7H0j2OM+1zZR3474/F9vamxIf6hsSzbdLzUMDOGdcTdxZmPfz3I0I/WseWoJ3Pe6EIH11paT0Nf5wYsaNWF1dfP0WffOm4nxrCh27DS+xWnauwN8uX1w1sYdGAjkekP2Nh9mEa/AnAy7B6ttn2nekw7vVfrcS8qIwPq14GP3nu68GGRMPUDaNMcdq+FMUPgo+Vw9rI6zIHjsOx7eHss7PwF6teGSbMhXvffBTGmdyuGd2/GF+uO8eYSZb/yzezHj8Hc6ldj+zFvJnyyhWlf7qBCBX2+naMegwGYGBlwwSeYdfsul3odbelTv6D9unCR1zYWtF+Dn6L9OlN6+6UwNORObCyLjpVeh3ThZekfoWAM9moHvj91kYE/Kz9z/DryCWOwwb3Z4XWTAT8XjMGGa/aRwfGJLDl4gn4/beSNdX8SnpTMbyMHYVPKNbWalpdgPNm3Tn0WtO/I6isX6PPnRm7HxbKh3+BS64qpgYGyfF04U2r5em37Jlr9/qPqMfIv5ZeMBwL8dJYOgA4OzZlceyCbQg4zzXM5QWkRfOryFlaG5qW+Jy03gzcuLFA9xl5arPH7oVW78lqVDnwb8CfveX9N5sNsPm0yFUM93Y5b+tRoyPwWXVl94yx9D/yGb2I067sMx8645HrfxrEGe4Nv8/rRzQw6vIHI9Ads6DoCR1N12he06EqHyrWYcX4f3fb9wu93rrC41at0q1pHp2npVaUR85q8yvd3TjHw+M/cSY7i13YjsS0lLcnZGfzod4bhp37jtWNr2BXizect+tO+Ym2NcKejAmi3f4XqMfPyLp2m4/8Lvfz/3uPf2rZtGzNnzmThwoV4enri6upKjx49iImJKTH8+fPnef3115kwYQJeXl4MGDCAAQMGcPPmzTL+NUsnE9ziqSUlJXHmzBmWLVtG586dqVGjBq1bt2bevHm89tprODs7AzBw4ED09PRUPwcGBtK/f38cHR0xNzenVatWHD16VOPakZGR9OnTB1NTU2rWrMnmzZtxdnZm1apVGv//xIkTcXBwwNLSki5dunD9+vXnkvYxHm6sOXmZ43fucTc6jg92HKKihRldG9Yu9T3j2rmx/epNdnveJjA2gcV7j5KZk8ugFi6qMBsveLH29BWuh5b8rbG2jejRnN/3XuK0ZyABoXEsWnMIe2tzOrqV3gG/99Uu9p+9TVB4PP6hcSz55TCV7C1pUNMRgHvh8Xzw7T7Oet8jPCaZa76h/Lj9LO2b16KCvm4m7d5s0YJtN2+y89YtAhISWHD0KBm5uQxxcSkxvE90NF+cPs3ffn5kP3xYYpjxu3ax8/Zt/OPjuRMXx/uHD1PF0hIXR0edpAFgYpOWbPX1YbvfTQKS4pl/+ggZuTkMa1ByOt47foA/bntzOz6WwKQE5p46jJ6eHu2qVFeFebOJG996XuRISCB3EuKYeeIAjgpzXnXW7SBrfFs3/vS6ya7rtwmMS2DhfmV5H9ys5LSMad2cMwHB/HrhGvfiElh98gK3I2MY1aqZRriKFmZ81LMzs/ccIiev5LzTheE93fh9zyXOXFPWlcU/HsTe2pwOLUr/O874chf7T98iKDyegPuxfLLmkEZdAfjrhA/ed8KJjEvBLziGNdvP4mRvSSUHS52kY6JrS7be9mH7nZsEJMYz/9Tjy9iNmCiWXjjFvoDS60oLp8ocCQ7kRMg9wh6kcPDeXc6EBuPqWEknaQAY38aNP71vsuuGsnx9fOAombm5DHEtOR1jWzfnTGAwv168RmB8AqtPXeB2VAyjWjZThZnZqR2nA4NZfvwMvtGxhCYlc9z/HgnpGTpLB7w87RfAm63d2Hb9Jjt9bhMQn8DHhwrS0rSUfGnZnDP3gll7SZkvq04r82V0i2aqMHFp6RqPrvVqczEklNCkZJ2mBeD1bs359e9LnPIOJCAsjo9/O4SDtTmdmpde78/fDObHPec56VX6BLxrncr8ff4W1/zCiIxPYfdpH/zDYmlc00nraZjYqBVb/a+zPcCHgOR45l84TMbDHIYVWYH9yHtn/uYPPy9uJ8YQmJLA3PMH0UOPdk41NMJl5+USm5mmeqRk6/ZuM4AObeG9idC9w9OF3/oXVKkEc9+G2s4wchC82hHWF1povv5PGNoXBvWGOs6waBaYmMCuA7pIgaYRPZrz275LnPYqGIP9/OQx2PQVyjHYvUdjsLXKMVjDQv3K1n+82LD/CjcDdT+WfLNFC7b5FGq/jhwlIyeXIU2evf06FRzMynPn+SdA919iFfay9I8A493d+NOzhDFY81LGYG2ePAb7+6YfF4LuE5aUTEBsPEv/OY2FiTH1He11m5aXZDw5sVkLtt7yYfudWwQkJjD/ZEH5alhyW3wjJpql508/tnwlZGYQm56uenR1rkVwciIXI8J0mRQGVunEwcjzHIm+xP30aL71/5OsvGxedWpb6nvyyScx54HqkZSjeWfcgCod2Xr/Hy7G3yQ4LYKv/P7AztgKD/uS/z7aMrFha7YFXGfHvYI+8tIhMh7mMrRO0xLDzzi3lz/ueuKbGMO9lAQ+uHigoI90VoVxc6jKrns+XIq+T3haMlsCvPFNjMbVrrJO0zK+rjt/BnuyK+Q6gQ/iWOi1n8yHOQyuUfIXapfjQjga4ce9B3GEpiWyIfAyfinRtLCvphEuOy+XuKw01SMlJ1On6RDlx8qVK5k0aRLjx4+nUaNG/PTTTygUCn777bcSw69evZqePXsyZ84cGjZsyCeffIKbmxvfffedzuIoE9ziqZmbm2Nubs6ePXvIyir+webKFeUq5N9//53IyEjVz6mpqfTu3Ztjx47h5eVFz5496devH/fvq29rGjNmDBEREZw8eZKdO3fy888/F/smaOjQocTExHDw4EGuXbuGm5sbXbt2JSFBd7f2A1S1scLBwowLger4pmZlcyMsimbVSu64DCvo06iyIxcLvSc/Hy4E3qdZNd0OcktT2cEKe2tzLt9SxyktI5tb96JoUufp42RuagxASmrpnZ25wpi0jGwe5mn/NAVDfX1cHB05HxKiei0fOB8SQvNK2vvbWhgr05mcqZtO3VBfHxcHR86Fa6bjXNh93ByfbkBkamCAob4+SVnKOFazsKKimbnGNR9kZ+MdE/nU13wWhvr6NK7kyPmgQuUdOB90n+ZVS86TZlUrcSFI89bGs/dCaFYovB6wvH9Pfr1wjYDY53eXSGUHK+xtzLlyS/13TMvI5lZgJE3qPv3f0Vzx+LpiYmxAn44uhMckER2v/S0xVGUsrIQy5vTs5eFaVATtqlSnppUNAA3tHGhZqQonQ4LKGuUSPa58NSutfFWppBEelOWreRVleD2gY52aBCUk8uuIgVx4bwrbx42gW73Sv7TUhpel/YKCfHEqIV+C76v+zkU1r1KJ88Ga+XImKIRmpYS3UyjoVLsmO67rbqXHI1XsC/pIX80+8ua9KJrULlveXA+IoINrbRyslSu+WtSvRnVHGy4WamO0wVBfHxc7J85FFKnzEcG4OVR5qmuYVjBU9ivZmmWnrVN1rg57h2MDJvJp21exNjbRZtS1wvsWuLfQfK19K+XrANk5yu1OCofR11f+/CiMrmh7DJb8mDGYrqjar/tF2q/72m2/noeXpX8ELY7BAkNK7VMN9fUZ3qIJKZmZ+EXpbguJl2U8qS5fmulQli/t1BVDfX0G1GvEn7667R8N9CpQ16Ia3kl3Va/lk4930l0aWjiX+j7TCsasa72QDW0W8XGjiVRXqL/QdTKxw9bYCq9E9TXTH2bilxJCA8uaOkkHFOSLrRNnI9X1MR84FxmMm/2z95GesWF0rVpXtaq7rWN1alraciZSh/VeT5/G1pU4H6OZlvMxQTS3rfpU12jrUJOa5nZcidOsP63tnTnfexaHuv+PRc16Y22k27s2xIuTlZVFSkqKxqOkeT6A7Oxsrl27Rrdu3VSv6evr061bNy5cuFDiey5cuKARHqBHjx6lhtcG2YNbPDUDAwPWrVvHpEmT+Omnn3Bzc6Njx46MGDGCpk2b4uCg3L/R2toaJyd1J+bq6oqrq6vq508++YTdu3ezd+9e3nnnHe7cucPRo0e5cuUKLVu2BGDt2rXUrVtX9Z6zZ89y+fJlYmJiMC744P7VV1+xZ88eduzYweTJk3WWbntz5W0+canpGq/Hp6Zjb1HyLUDWClMMKuiX+J5a9ja6iegT2Fkp45qQrBmnhOQ0bK3NnuoaenowY1Qnrt8N5154yQNEK3MT3uzflj0nfUr8fVnZmJpioK9PXLpmOuLS06lla6uV/0MPWNCpE1fDw7mro+13bEwK0pGRpvF6bEYata2fLh0ftOlIdFqaakLbQWFWcA3Nv01sRrrqd7pgo1CmJb5oeU8rvbzbm5sRl1a0fqRhb6auU5PatSI3L58Nz2nP7UfsCupD8bqSrvrdk+jpwXujO3HdL5x7YZplaHA3V95+vQMKEyOCIxJ4d+kOch/maSfyhajKWHoJZczm2evKj56XsDAy4tgbb/IwL48K+vp8dekMf/n7ljXKJXpUvoqWl7i0dGrZPX35iktTly87MwXmxkZMdm/FqlPn+OrEWV6p5cx3Q/ox+o/tXLkfrpu0vCTtFxTKl/Ti9b72v8wXB/OS+9JBTRqRlp3zXLYnedRHxqcUqfcpadhZla39XL7lBPPHdOPgV5PJzX1IXn4+n204gpe/dsuZjbFCmSeZRep8Zjq1rYrfrl+SD1p0JDojlXMRwarXToUHcej+XUIfJFHDwoY5bh1Y120ogw78QV6+9r/IflZxCVC0y7GzhdQ0PTKz8kl5AA8f6mFnoxlnOxsIKnkrWa0pdQz2L8qXnh7MHNkJ78eMwXRJ1X4VrcNabL+el5elf4RCY7CiY6onjcGKjdnSVJ95HulUtyYrB/fG1NCQ2AdpvPnHLhIzdPflyssyniy1fKWnl6l8FfZqrTpYGhuzw1e3385ZGppRQa8CidmaCzESsx9Q1apiie8JS4/ha78tBKVFYGZgwuCqXVjZ7D2mXl1KXHYyNkYWymsUWdWdmPMAG0ML3SSEwn1kkTYsM+2p+8i5zTsTnZGqMUm+6MoRPm/Ti4uDp5GTp+zjP7x4kMsxoVqNf2GP0hKfpVnG4rPSqGVR+l0W5gbGnO49AyP9CuTl57PY+wDnY+6pfn8mOpAjEXcIS0uimpkNMxt34RePNxh+8jfy+O/09+XSf/DPt3TpUhYv1tw+aOHChSxatKhY2Li4OB4+fIhjkbtDHR0duXPnTonXj4qKKjF8VCnndmiDTHCLf2Xw4MH06dOHM2fOcPHiRQ4ePMiXX37J2rVrGTduXInvSU1NZdGiRezfv5/IyEhyc3PJyMhQreD28/PDwMAANzc31Xvq1KmDjY16IHP9+nVSU1Oxs9PsfDIyMggMLPkgmqysrGLfQBkbG6smyEvT17UBi17rqvp56sY9jw3/X9XDvQEfjFd/YzZzxZ4yX3POmK7UqmLHlE+3lfh7MxMjVs4aSFB4PL/s1t03c7q2uGtX6tnZMXxbyen8L3irWWv61a7PiH3byCrlVsbyrLFTRca0bs6gXzbp/P/q4dGAuRO6q36etXx3ma85Z1xXale1Z/KSrcV+d+icL5d9QrCzMWNk71Z89m4/Ji/eQnZO+cjHvnXq079eQ6Yf+Zu7CfE0sq/Ix+07E52Wxk4/HS+D1JJHe54fuxvIuoIPvL7RsTSvWonX3ZrqbIL7eSgP7dfTGuzamL23fEu9XbsserZpwIej1X3ke9/s0fr/8cjwLs1oUqsSM77dQ2R8Cm51q/L+yK7EJqVprBh/0d5yaUO/mg0ZcXgLWYVu4d8XrJ6c80uKwzcxhjODp9LWsTrno7S7Cv1l0cO9AfPGqcvXjJV7ynzN9wvGYJM/K/91+2X1MvSPhV0KDmXAmj+wUZgyzK0Jqwb3YeivW3S+lZc2Pc/x5PM0vGETToYEEVNkEv2/4M6DYO48CFb9fDsliJ9bfkivSu3YGPIc9oPSkamN29LPuSGvH9lEdqE+cmz9FjR3qMzEE9sJT0umdcXqLG79qvLL4qjgFxfhEqTlZjHg2BoUBka4O9TkgyavEpqWyOU4ZV9+IEzdTt1NicEvOZpjPd+ltYMzF2N1tyJdvBjz5s1j5syZGq89aa7sv04muMW/ZmJiQvfu3enevTsfffQREydOZOHChaVOcM+ePZsjR47w1VdfUadOHUxNTRkyZAjZ2dlP/X+mpqZSqVIlTp48Wex31tbWJb7n33wjVdhx30BuFNoT26jgkC57cwVxqepBhJ25gjuRJd+ml5SeQe7DvGIrIezMFcVWTOjKGa9AbgWqvx0zLDjEyNZKQXyyOh22Vmb4h5R8MEBhs0d3oX2zWkz5bBsxicUPP1GYGLJqziDSM7OZ+81eHupgRSpAYkYGuXl52Cs0/7b2CgWxaWUf5C3s0oUutWoxYts2oko5EEkbEjML0mGquXLLwdSM2IzHp2NS05a81aw1I//ezp2EONXrsQWDXAdTher5o59vxz85j59VYroyLXZFy7tZ6eU9rsjqGgC7QqtwWlavgp2ZghPTJ6p+b6Cvz9zuHRjTpjldvy15r69nccazSF0xKFRXkgrXFQX+IU++NXfW2C60a16bqZ9sJTaheBlKy8gmLSOb0OgkbvpHcuTnd+jYsi5HLpT87fezUpUxRQllrAwfiOZ5dORHz8vsKzjUyC8hjioWlvzPrbVOPsA/Kl9Fy4u9mYLYtKcvX/Zm6vKVmJ5BzsOHBMRproIMjEugRbWnu031Wbws7RcUyhdF8Xof+y/qvb2ZWYnhW1atQm07W97bs197kS7ktHcgN4PU9f7RQZJ2lkX6SEsz7oY+e/tpbGjA24PaM/v7vZzzUX44DAiLo151B0b1aKnVCe7ErHRlnpgUqfMmiif3K41b81aTtoz8Zxt3Eh/fzoWmJhOfmY6zpfV/aoLb3hbiihwWGZ8A5mb5mBgrtyOpUCG/2IGS8YnK92pT0TGYUWljMEsz7t5/yjGYay2mfF7yGOx5ULVfReuwltqv5+ll6R+h0Bis6JjqSWOwYmO24qu6M3JyuZ+YzP3EZK6HR3H47XEMae7Cz+euaDcRBcr7ePKRUsuXQlGm8vVIFQsL2lWtztRDuj/sNyUnjYf5D1Wrrh+xMbIotqq7NA/z8whMDaOyqXJl8aP32RhakJidor6moQWBabpbYKDuI4u0YSZmxGY8vl2d1LA1bzV2Z9TRLdxJUveRxhUMmN2sE1NP7+REuHLR3Z2kWBrZVmRSozY6m+B+lBY7Y80yZmdsRlxm6WnJB+6nKTvBO8nR1La0Z3L99qoJ7qLC0pNIyEqjhrmNTHC/hJ5m8ecj9vb2VKhQgejoaI3Xo6OjNXZvKMzJyelfhdcG2YNblFmjRo1IKxjYGhoa8rDISqtz584xbtw4Bg4cSJMmTXByciI4OFj1+/r165Obm4uXl/q2sYCAABIT1Z9A3NzciIqKwsDAgDp16mg87O1Lvg1n3rx5JCcnazzmzZv3xPSkZ+dwPyFZ9QiIiSf2QRpta6sPYDAzNqJpVSe8QyNKvEbOwzxuR0TTtpb6PXp60LZWNbyf04GS6Zk5hMUkqR5B4fHEJaXSqpH6QEIzEyMa13LCJ+DxcZo9ugsdW9Th7S+2ExmXUuz3ZiZGfPP+YHJyHzL76790uhI1Jy+Pm9HReFRXp0MPcK9eHa/Isv1tF3bpwqt16jBq+3bCUoqnU5ty8vK4GRuNRxXNdHhUqY5ndMnlCmCKayumubkz9sBOfOI0O4zQB8nEpKXiUUV9OJi5oRHNKlZ67DXLKicvj1uR0bg7FyrvgHvNaniFlZwn3mGRtK1ZXeM1j5rV8S4I/5ePL6+t2ciAn/9QPaJTUvn1wjUmbi77CuvC0jNzCItOUj2CwuOJS0ylVWN1/BSmRjSuXQkf/8f/HWeN7ULHlnV457M/iYx9chnS09NDT089+aFNpZaxqtXxjHr28mBqYEh+kW0J8vLz0NPTzaGypZYv52qq8lKUd3gk7iWUL6/wSNU1fSKjqWWnOatV086GiGTd1f2Xpf2CgnyJKp4vHjWqqf7ORXmFR+JeQzNf2jlXx7uE8ENdG+MTGc2dmLhiv9OG9CzNPvJeREEf2VCzj3Sp5YRPGQ7vM6igj6FBheJ1Ji8fbZ/DnJOXx834KDwqqfsAPcCjkjOesaVPGkxp3JppTT0Ye2Q7PvFPvm3USWGBjbEpMU+YNH/emjWGi9c0Xzt/Vfk6gJEhNK6nGSYvDy56qsNoS9Ex2L0yjsE6tajD/5ZtJ6KEMdjzosv263l7WfpHKNRH1izjGKxW9VL71Ef09fRUXwbqQnkfTxZOx83YaDyqllS+yl5XhjZwIT4jnePB954cuIxy8x/i/yCUZtb1VK/poUcz63r4Flql/Tj66OFsVpmEgsnsqMx4ErKSNa6pqGBMfcsa3EnR3SRqTl4eNxOiNA6I1AM8nGrgGfeYPrJRG95p0o6xx7fhk6DZRxrq62NUoUKx7boe5uejjw7rfX4et5Iica+o3rNcD3CvWBOvhKc/dFQfPYz0S6/TjqYWWBspiH3MpLl4Onr5/73Hv2FkZESLFi04duyY6rW8vDyOHTuGu7t7ie9xd3fXCA9w5MiRUsNrg6zgFk8tPj6eoUOH8uabb9K0aVMsLCy4evUqX375Jf379wfA2dmZY8eO0a5dO4yNjbGxsaFu3brs2rWLfv36oaenx0cffURennp1b4MGDejWrRuTJ0/mxx9/xNDQkFmzZmFqaqoaEHbr1g13d3cGDBjAl19+Sb169YiIiGD//v0MHDhQtXd3Yf/mG6kn2XDekymd2hASn0RYYjLvdvUg5kEax3zV26P8Nn4wR28HsPnSdQDWnfNk6eAe3IyIwScsijEezTE1MmT3NfUKDntzBfbmZlS3tQagnqM9aVnZRCankJxR8gb/ZbH1sBfj+7chNDqRiNgUpgz2IC4plVOe6v1Nv5s7hJPXAthx1BuAOWO70KNtA+as2ktaZja2BftIpqVnk5WTq5rcNjYyYOFPBzEzNcLM1AiApJQMnezP+du1ayzv2ROf6GiuR0Ux3s0NhaEhO24p/7Zf9exJVGoqX509CygHH3UKtrcxrFABJwsLGjo4kJ6TQ0hSEgCLu3ThtQYNmLJ3L6nZ2apViQ+ys8nKzdV6GgDW+lxlRade+MRG4x0TyYQmLVAYGrLdT3lgzIrOvYhOS+XLy2cAmOramhmtPJh+bD9hD5JxMC3Ii5wc0nNzlH8bH0+mubUlODmR0AfJzGrZjuj0VP4J1u0etr9f9GRZ/x7cjIzhRkQUY1s3x9TQkF3XlXmyrH8Poh+ksvL4OQA2XPZi45ihjG/rxin/IHo3ro9LZUc+3n8UgKSMTJKK7POYk/eQuNQ0goouv9OBbYc8GTegLaFRSUTEJjN5SDviklI5fU39d/x23hBOXQ1gxxFvQLktyaseDXh/5V8l1pXKDlZ0c6/PpRvBJD3IoKKtBWP6tSYrO5fz3rr5kLL2+lVWdClUxpq2QGFgyPY7BWWsa0EZu6gsY4b6+tS1UdcVRzMLGtk5kJaTQ0hKEgDHggN5u0VbwlMf4J8QR2P7ikxwbcl2HR509PslT5a9Vrx87byhLF9f9lOWrxUnleVr/WUv/hg9lDfbuHEyIIg+jerjUsmRjw4cVV3z14tX+XpgH67cD+NiSCgdajvTuW4tRm/crrN0wMvTfgH8dtmTL/v24GaUMl/GtSqSL30L8uVUQb5c9WLTyKG82VozXxYcPKpxXXMjI3o2qMcXx0/rLO4l2XLUiwl9lH1keFwKbw3wIDYplZNe6nr/w6whnPQM4M8T3gCYGhtSraK16vdVHKyoV82B5LRMohMekJaZzTW/UKYP7UBWTq5yi5J6Vent3oiv/zyp9TSsvX2FFe374BMfhXdcJBMatlTW+QDluRgr2vchOv0BX3oq/7ZTXdowo1l7pp/eR1hqMg4Fq7/TcrNJz81BYWDIdNd2HAq5S2xGKtUtbJjXshPBKYmcDtftaq60dCi8W1BYJPj6g5UlVHaElT9DdCwsm6/8/Yj+sHk3LP8RBvdWTlwfOgk/faG+xthhMG8puDSAJg1gww7IyICBvXSaFEA5BnvzNfUYbOqg4mOw799Xlq/tBWOw98cox2CzV+8lPTNbtZd3akG/Asr9vW2tzKjmaA1Anar2pGVmEx3/gJQ07e6XrGq/ooq0Xzefsv0yL95+KQwNqVHobsyqllY0dHAgKTOTyAfaP4D5kZelfwT4/YInywYoP3PciIhibJuCMZh3KWOwS15sHFtoDOZSMAb7W9kWmxoaMPWVNhz3CyQ2NQ0bhSkjW7riaGnOodv+uk3LSzKeXOt9jRVde+ITE4V3TBQTXN2U5cv3UfnqWVC+1HWlrm2h8mVuTiP7gvKVnKS6rh4wpKELO+/c5uFzOgNhd/hJZtUfiX/qffxS7jOgakeM9Y04EnUJgFn1RxKflcy64L8BeKN6D+48CCYiIw4zA1OGVO1CRWMbDkept6/cE36KEdVfJTwjlujMeEY79yY+K5nzcbo5w+mRtb6XWeHRlxsJUVyPi+DNhq1QGBiyI/AGACs8+hKV/oDl3qcAmNKoLTNcX+G9s3sJS01W3SGVXtBHpuZkczE6hHluXch8mEt4ajJtHKszqKYLn147Vmo8tOF3/wssazmAm4kR3EiMYGydNphWMGRXiDcAy1r0JzrzAStvHQdgcr123EyK5H5qAkYVDOjoWIfXqjdlkbdy2xhFBUPeadiRw+G+xGWlUs3MljkuXQlJTeBMdMlbwor/X2bOnMnYsWNp2bIlrVu3ZtWqVaSlpTF+/HgAxowZQ5UqVVi6dCkA06dPp2PHjqxYsYI+ffqwdetWrl69ys8//6yzOMoEt3hq5ubmtGnThq+//prAwEBycnKoVq0akyZN4sMPPwRgxYoVzJw5k19++YUqVaoQHBzMypUrefPNN/Hw8MDe3p65c+eSUmR12YYNG5gwYQIdOnTAycmJpUuXcuvWLUxMTADlKscDBw4wf/58xo8fT2xsLE5OTnTo0KHYxvW68OuZq5gaGbK4fzcsTIzxvB/B5PW7yM5Vr1SuZmuFjZn6lOFDN+9ia2bKtK7u2BdsZzJl/W6NQ2CGt27K213U32BtnDQMgA93HmaP122tp2Pj/iuYGhsyb3x3zBXGXPcPZ/pXuzRWXFepaIW1hTodQ7o2A+Cn+cM0rrXk50PsP3ub+s4VcamjPBF811cTNMIMmLm2xBXfZbX/7l1sFQre8/DAXqHANzaW8bt2EV9w2FklCwuNifWK5ub8PXq06udJLVsyqWVLLoaGMnK7cjJrVDNlOrcM00zn+4cOsfO29vMC4O9AP2xNFMxo2Q4HhQLfuFjGHthBXMEhkVXMLTVWAo1q7IpxBQN+erW/xnVWXT3PqmvnAfjp+mVMDQ1Z2uFVLI2MuRIVztgDO3W+T/fB23exVZjybkd3HMwV+EbHMnGzurxXstTME6+wSGbvPsh7nT2Y2bkdwQlJvP3nXvyfw+n2T2Pj31cwMTbkgwnKunLjbjjvLdOsK1UdrTXqyuDuzQD48aPhGtf6ZM0h9p++RXZOLs3qV2FETzcszExISE7H+04YkxZvITFFN/tZ/h1QUMZaFypjf5dexhzNzDkwfKzq5ynNWzGleSsuhocy4i/lvq8LzxxjVuv2fNKhG/ampkSnpbH51nW+uaq7ffcP+Crb03c7uuNgpixfE7YWKl9WRcpXeCSz9hzkvU4ezOxUUL62a5avI36BLDx4jCkerVjwameCEhKYtnMf18J0d7cDvDztFxTki8KU6a8U5EtMLBP+3K1KS2VLC43y5RUeycy9B5nRwYNZHdsRnJjE/3buxb/IVjF9GtVHTw/23dbutj1Psv6Qst5/OKY7FgpjvP3DeXeVZl9f1UGzj2zk7MiaOeq/+8zhnQDYd+4Wi38/DMCHa/bz9uD2fDKxN5ZmJkTFp/Dj7rPsPHlD62n4O/iOss43a4+DqRm+CTGMPfqn6lCtKmZF+pX6zZX9SueBGtdZ5X2WVdfP8TA/n4Y2FRlc2wVLIxNiMlI5HRHESq8zGnuQ6sItPxj7nnoF3LLvlc8H9Mxn6TyIjYfIQrt7VK2knMz+4jvYuBOcHOCTOdC+tTpM7y6QmATf/KY8lLJhHfh5ufa3KCnJhgMF5WvcE8Zg5sXHYGs+1Kzbi39RjsEABnV2ZdJA9Vjy5/nDi4XRlv1+d7E1VfBeu0Lt185C7ZdlCe3XmELtV6uWTGpV0H79qWy/mjg6snm4On0LOncCYOfNW7x/+LBW41/Yy9I/QsEYzMyUdzuVMgYr2keGRTJ7V8EYrEtBH7lN3Uc+zMunlp0NA4f2w0ZhQlJGJj4R0Yxc9ycBOh6nvSzjyb8D/LA1NWVGm8Lla6e6fFmUVL7GqH7WKF97/lS93r5aDapaWPKnjr80Kex0rBdWhuaMqtEbWyNLAlPD+OjmTyQVHBJZ0dhGIy3mBgrerTsCWyNLHuSmE/AglFneq7ifrr7zdHvYMUwqGPFuveGYG5hyK/keH938iZx83X0pD7A/xBc7YwUzm76CvakZvokxjDuu7iMrm1lqlK9R9ZR95I8dB2lcZ9WNM6y+ofxyYtqZv3i/eSdWtXsNayMTwtNS+Or6KTb56/ZQ04Pht7E1NuPdRp1wMDbHNzmaiec2qw6erKSw0jgYUmFgxMJmvXAytSTzYS73HsQx58puDoYr+4mH+fnUs3JkQHVXLIxMiMl4wLmYQFbfPkmOjvv7/xf+g4dM/lvDhw8nNjaWjz/+mKioKJo1a8ahQ4dU83H3799HX1+9SYiHhwebN29mwYIFfPjhh9StW5c9e/bg4uKiszjq5Re9j0qI/4CwsDCqVavG0aNH6dq165Pf8C81WvC11q/5PN3+dIbqeZsxK19gTMru0gb1wQa1V5bvtAQWOqTBec1XLzAmZRM8Zbbqef1Pyndd8ftIXVfajlzxAmNSdhc3zVI9d/6hHJev/6nLV73Pynf5ujtfXb5epvar7tLynS/+89T50nJi+c2Xq2sL9Snrl73AmJRd8Ni5qud5UfUeE/K/T9/prup567Hlt3wBXF5faAy2ovymJXBWobpSjvtH0Owj6y8p322x38fqtrg8jycLjyWdvy/fY8ngt9VjyV6np7/AmJTdwQ6rVc9r/rH0Bcak7IJGqbdRrb9ryQuMSdn4Dfr4RUfhP6vR/P9eG3j7sxlPDlTOyApu8Z9w/PhxUlNTadKkCZGRkbz//vs4OzvToUOHFx01IYQQQgghhBBCCCHEf5RMcIv/hJycHD788EPu3buHhYUFHh4ebNq0CUNDwxcdNSGEEEIIIYQQQggh/j3ZN+O5kAlu8Z/Qo0cPevTo8aKjIYQQQgghhBBCCCGEKEf0nxxECCGEEEIIIYQQQgghhPjvkRXcQgghhBBCCCGEEEIIoWV6skXJcyEruIUQQgghhBBCCCGEEEKUSzLBLYQQQgghhBBCCCGEEKJcki1KhBBCCCGEEEIIIYQQQttki5LnQlZwCyGEEEIIIYQQQgghhCiXZIJbCCGEEEIIIYQQQgghRLkkW5QIIYQQQgghhBBCCCGEtskWJc+FrOAWQgghhBBCCCGEEEIIUS7JBLcQQgghhBBCCCGEEEKIckm2KBFCCCGEEEIIIYQQQggt05MtSp4LWcEthBBCCCGEEEIIIYQQolzSy8/Pl+8ShBBCCCGEEEIIIYQQQotc3v/6RUehmJtfznjRUdA62aJECCGEEEIIIYQQQgghtE2WFT8XskWJEEIIIYQQQgghhBBCiHJJVnCL/5cafvTfu0Xk3/D9RH07ifO6ZS8wJmUXPG6u6rnbW+U7Xzx/VOdLx37LX2BMyubUvjmq5/WXlO888ftYnSc1/1j6AmNSdkGj5qmeu7++4gXGpGwubJmlet5kVvkuXz4r1OWr2bTynRbvb9VpaTqjfKflxteF+sjvy29dCX5bXVfKc58Cmv1K67ErX2BMyu7y+pmq53lR9V5gTMpO3+mu6nl3/aEvMCZlcyRvu+p5D/OxLzAmZXc4db3qeYPF5bstvrNQ3Ra7zCm/abm5XJ2OXg3nPSbkf99BX/VYuM3o8t0WX9qobos9hpffvh7g/LaXo78v3NcL8SLIBLcQQgghhBBCCCGEEEJomZ5sUfJcyBYlQgghhBBCCCGEEEIIIcolmeAWQgghhBBCCCGEEEIIUS7JFiVCCCGEEEIIIYQQQgihbbJFyXMhK7iFEEIIIYQQQgghhBBClEuyglsIIYQQQgghhBBCCCG0TVZwPxeyglsIIYQQQgghhBBCCCFEuSQT3EIIIYQQQgghhBBCCCHKJdmiRAghhBBCCCGEEEIIIbRM70VH4P8JWcEthBBCCCGEEEIIIYQQolySCW4hhBBCCCGEEEIIIYQQ5ZJMcP8/pqenx549e150NIQQQgghhBBCCCGEePnk/wcfLyHZg/slMW7cONavX1/s9R49enDo0KEXECPtWLduHePHjy+WjqSkJGxsbDhx4gSdOnV6LnGZ1sWdoS2bYGFijNf9CBbvPUZIQtJj3/NGa1febN8Ce3Mz7kTF8tn+E/iER6t+b2RQgbk9O9C7SX0MK1TgXEAIS/YdJz4tXSdpGN2gOVNc2uBgaoZvQgwLLx3lelxkiWFH1HVlUJ3G1Ld2AMAnPorlnqc1wn/VvjdD6jTReN+p8HuMPbJdJ/Evampfdwa2b4KFqTHX70Xw+eZjhMYmlRrerU4VxnRvScPqFXGwNmfmT3s5eT2w1PAfvt6VIR2a8tX2k2w+7qWDFKi9ObIdfV9tirmZMT6+Eaz84R/CI5NKDd+/VzP692qGk6MlAMH341m/9TyXrgUBYGFuwptvtKNlc2ccHSxISsng7EV/fv3jLGnp2TpJwxstXZng0QIHczPuRMfyycET+ERElxq+Z8O6TO/sQRVrS4Ljk/jq2BlOBwSrfv9Ox7b0aVwfJ0sLch4+5FZkDF+fOMeN8CidxL+w0fXcmNyoDQ6m5vgmxrDoyj9cjy+lrtRxZVCtJtSzsgfAJyGKr7xPaYRXGBgyt3lnuleti42xKaGpyazzu8pmf92Wq0cmDfHgtS5NsDAz5oZfBF/+dpSwqKRSw4/p35qOrepSo7ItWdm5+NyN4Ictp7kfmagK8/1Hw3BrVE3jfbuPXufLX4/qKhkAvN3DncFtlfXeOyiCT3Ye435c0mPfM6KdK+M6tcDewgy/iFiW7j7BzVBl2axsY8nhBRNKfN+s9X/zzw1/bScBgLd6uzPIQ52Oz7cd4/7j2q/aVRjbVdl+VbQyZ8YvezlxQ7P96uJah6HtmtKwekWszUwZ/sUf+IXH6iT+hf2vpzuD3ZX9o3dwBJ9uf3KeDG/nyrguyjy5GxHL0l0nuHlf3V5UtbNi1msdaF6rMkYGFTh3J4SlO0+QkKqj/tGlGVOat8RBYYZvfCwLTx/nekzJbU1dWztmtvagiYMjVS2tWHLmBL/d8NQIc3b0RKpaWhV77wYfbz4+fUwnaShK2/0KwKy3X6WFaw3sbc3IyMzhpm84a9af5n5Ygs7SMXmgBwM6uWCuMOGGfzjL1h8jNLr0dIzt24rOLepSo5ItWTm5+PhH8O2fZ7gfpW6/BnRqQo+2DajvXBFzU2O6vPU9qelZOon/levw2xa4dRdi4/X49tN8ur3y+Pdc9oIvvoeAYKhUEaaOhoG9NMNs2g2/bYW4BGhQG+ZPh6YNdZKEEo1dPJxeE7tibm3GrXN3+OZ/vxAeUHr/vPHe9zg5Vyz2+t4fDvHtO79iYWPOmMXDaNHdlYrV7UmOTeHcX5dZ99E20lN0U+8BxiwYSM9xnTC3UnD7oj/fvLeeiMDSxy4AdpVsmPDJMFp1b4qxwoiIe9GsmLoWf69gVZhq9SsxYclwmravTwWDCoTcCeeTkd8Sq6O68kYr5Rjs0WeOT58wBuvRSD0GC4lP4qujxcdgvV00x2Crjj+fMRjA26+6M6SNso/0Co7gk11P0dd7uDK+Y0FfHxnL53vUfT3A71OH0Kq25rjlzws3WLJLt23y6Gnd6Dm0FWYWptz2CuG7xXuICIkvNfzIt7sy6p1uGq+F3othcp+vVT9PWzSA5u51sK1oSWZ6Fre97vPbikOEBemuz588yIP+nQva4rvhfLnuCW1xv1Z0aqnZFn+3Vd0WW5qZMGmQO22a1MDRzpKklHROeQayZsc50jJ081nlkYlDPXitq3pcvHzt48fFowe0plPrulSvbEv2o3HxJs1xMYBL3UpMGdGeRnUqkZeXh39ILO99tpPsnFydpeVl6euF0AZZwf0S6dmzJ5GRkRqPLVu2vOholZmBgQFHjx7lxIkTLywOE19pyai2zVi09yjD12whPTuHX8YOwsigQqnv6eVSj7m9OvD9iYsM/nETflFx/DJ2ELZmpqow83p1pFP9Wry3dT9jfttORQszvnm9n07S0Ne5AQtadWG19zn67F3H7YQYNnQfhp2JosTwbZ2qsfeeL68f3sKgAxuJTHvAxleH4agw1wh3MuwerbZ9p3pMO7VXJ/EvauyrLXm9czM+33yUsV9uISMrh+/ffXyemBgbcjc8li+2Hn/i9Tu71qZJTSdiklK1Ge0SvT64NYP6urHihyNMnb2JzMxsvloyFCPD0tMSG/eANetPMem9DUyesRHPGyF8Nn8gztXtALC3NcfOzpwffzvJuHfWsXTVQVq71eT9d3vqJA29GtVj3qsd+P7URQb+vIk7UXH8OnIQtgrTEsM3r1qJFYN7s8PrJgN+3sQxvwC+H/4adR3sVGGC4xNZcvAE/X7ayBvr/iQ8KZnfRg7CppRrakufGg2Z36Irq2+cpe+B3/BNjGZ9l+HYGZdcV9o41mBv8G1eP7qZQYc3EJn+gA1dR+Boqq4rC1p0pUPlWsw4v49u+37h9ztXWNzqVbpVraPTtACM6teKoT2b8+WvR5nw0WYysnJY9cHgx5av5g2rsvMfbyZ9vJnpn+/AwECfVfOGYGKs+b34nmM36DP1R9Xju82ndZqWNzu35I1XmvHJjqOMXL2FjOwc1kx+fL3v0awec17rwE//XGTY15u4GxHHmsmDsDVXlqOopAd0WrRG4/H9ofOkZWZz5k6wTtIxrltL3ujYjM+2HWX0CmX79cP/Hp8O04L2a+mfpbdfpkaGeN0LZ/VfZ3UR7RKN79KSNzo045PtRxm5SpmWn6Y+RZ4M6MBPhy8yfMUm/CLi+GmKOk9MjQxYM3UQ+eQz6YcdjP1mG4YV9Pl2Yn/0dHBKT9869VnQviOrr1ygz58buR0Xy4Z+g7EzLbmtMTUw4H5KMssunCEmreQ+4rXtm2j1+4+qx8i/lF/8Hgjw034CSqCLfgXgbkAUX6w+yJj//cbshdvR09PjqyVD0dfXzfFJY3q3Ynj3Znyx7hhvLlG2X9/MHvTYdLjVr8b2Y95M+GQL077cQYUK+nw7ZzAmRur2y8TIgAs+wazbd1kn8S4sIwPq14GP3nu68GGRMPUDaNMcdq+FMUPgo+VwtlBUDxyHZd/D22Nh5y9QvzZMmg3xiaVfV5uGv9+fAdN6sfqtn5nWdh6ZaVksPbQAQ2PDUt/zTut5DKs0SfV4v/sSAE5tvwCAXWUb7CrZ8POcDUxqMpPl47+nVY9mzFr7ls7SMWxGb/pP7c6309cxvdMSMtOy+HzP7Memw9xawcqj83mY85AFg1YwqeU8fp63ldQk9SR8pZoVWfnPAkLvRjCn11Kmtl3A5mV7yc7K0Uk6ejWuxwcFY7BBazbhFx3H2lFPNwYbuGYTR/0C+G5E8THYJwdO8NqPGxn5u3IM9uso3Y/BAN7s1JKR7ZuxZNdR3vi2oK+f+Ph+padrPd7v14Efj1xk6Cplv7JmoubnLoDtF33ouGSN6rFi/xmdpmXoxA68NsqDbxft4b3hP5CZns2nv7yJodHj1xkG+0fxxiufqR6zR67R+H3ArXBWzt/B5D4rmT/pd/T04LO1b+qsLR7dpxXDXm3Gst+PMWHRZjKzclj9/uPb4uYNqrHjqDcTFm/h3WU7MKigzzdzB6vGkvY2ZjjYmPPNltO8MW89S345jHsTZxZMfFUnaXhk1GutGNqrOcvXHmXi/M1kZubw9YdPMS4+7M3kBZuZ/pkyLavma46LXepWYuWHg7l8I4SJ8zcx4cNN7DjkRX6+7pbKvix9vRDaIhPcLxFjY2OcnJw0HjY2NgD4+/vToUMHTExMaNSoEUeOHCn2/tDQUIYNG4a1tTW2trb079+f4OBg1e/HjRvHgAED+Pzzz3F0dMTa2polS5aQm5vLnDlzsLW1pWrVqvz+++8a1507dy716tVDoVBQq1YtPvroI3Jynn6AZ2ZmxptvvskHH3zwbH8YLRjj7sZPpy5z/M497kbH8cHOQ1S0MKNbw9qlvmeshxvbr95kt9dtAmMTWLTvKJk5uQxycwHA3NiIQW4uLDt0mktBodyOiOHD3f/gVqMyrlWdtJ6GiY1bsfXudbYH+BCQHM/8C4fJyM1hWN0mJYZ/78zf/OHnxe2EGAKTE5h7/iB66NGuUg2NcNl5ucRmpKkeKdm6WQFV1Btd3Fh78DKnbtzDPzyOj9cdwsHKjE7NSs+T87eC+WHveU48ZtU2gIOVGe8P78z83w+R+/ChtqNezNDXWrDxz4ucuxTAveBYPv/6AHa25rRvW7fU95y/Esila0GERyYRFpHI2o1nycjMplH9ygAE3Y/j46V/cf5KIBFRSXjduM/ajWfwaF2bCjoYnIx3d+NPz5vsun6bwLgEFu5XlvfBzV1KDD+mTXPOBATz64Vr3ItLYPXJC9yOjGFUq2aqMH/f9ONC0H3CkpIJiI1n6T+nsTAxpr6jvdbjX9jEhq3ZFnCdHfcK6sqlQ2Q8zGVonaYlhp9xbi9/3PXENzGGeykJfHDxgLKuODmrwrg5VGXXPR8uRd8nPC2ZLQHe+CZG42pXWadpARjey411uy9x5loggffjWPLDQextzOnQsvTJ9Rlf7OLA6VsEhcUTcD+WT388RCUHSxrUdNQIl5WdQ0JyuuqRruMVN6M6uPHz0cucuHWPu5FxfLjlEA6WZnRxKb3ej+ngxs6LN9lz5Tb3ohNYsvMoGTm5DGytLJt5+fnEP0jXeHRpUofD1++Ska2byYiRndz45fBlTvrcwz8ijo82Ktuvzk1LT8e528F8v/98sVXbhe2/4svPhy5xye++LqJdolEd3fjln8ucvHkP/8g45m8uyJMmj8mTTm7svHCTvy4r8+ST7UfJyM5lQBtlnjSrWZnKtpZ8tPkf/CPj8Y+MZ8HmwzSu5kjrutW1noaJzVqw9ZYP2+/cIiAxgfknjyj7x4Yl9483YqJZev40+wL8yC6lj0jIzCA2PV316Opci+DkRC5GhGk9/iXRRb8CsO/wDW7cCiMqJgX/wBjW/nEWRwdLnCoWX62uDSN6NOe3fZc47RVIQGgci34+hL21OR3dSm+/pq/Yxf6zt7kXHo9/aBxL1h6mkr0lDQu1X1v/8WLD/ivcDCz5zhxt6tAW3psI3Ts8Xfitf0GVSjD3bajtDCMHwasdYX2hm+PW/wlD+8Kg3lDHGRbNAhMT2HVAFykobuD0Pmz6bCcX9l4lyOc+y8Z+h11lG9oNaFXqe5LjUkiMTlI92vZtQXhAFDdO3QYg+FYoS4au4OLf14i8F433iZv8vmALbfu1QL+Cbj6yDni7B1u+3MeF/V4E3Qrly8k/Y1fJGo9+bqW+Z9iMPsSFJ7DirbX4XbtHdEgcnsdvEhkUowozbuFgLv9znV8/+pPAG/eJDIrh4gEvkmMf6CQd49q6sd3zJru8C8Zgfz9+DDa6TXPOBgTz23nlGOybE8ox2MjWzVRhio7Bvjj8fMZgAKNfcePnY4X6+q2HqGhpRtfGj+/rd1y6yZ6rt7kXk8CSXcq/waO+/pHMnByN/j4tS7fjlgFj2rH1pxNcPO5L8N0ovvrgT+wqWuDRrdFj3/cwN4/EuFTVIyVJ8y6Gg9uvcPNqMDERSQTejmD96iNUrGyNYxUbnaRjRM/m/L73Eqc9C9riNQVtcYvS2+L3lu9i/5nbBIXH438/jiU/K9viBs7KtvheWDwffLOPs173CI9J5trtUH7ccZb2zWvp5LPKI8N6u7Fu1yXOXC0YF39fMC5uVXpaZi7dxYFTBePikFg+/eEQTg6WNKil7lfeHduJ7Qc92fjXZYLC4rkfmcjxi3fJydXdZ8mXpa///0Av/7/3eBnJBPf/A3l5eQwaNAgjIyMuXbrETz/9xNy5czXC5OTk0KNHDywsLDhz5gznzp3D3Nycnj17kp2t7viPHz9OREQEp0+fZuXKlSxcuJC+fftiY2PDpUuXmDp1KlOmTCEsTP0BzsLCgnXr1nH79m1Wr17NL7/8wtdff82/sWjRInx8fNixY0fZ/hjPoKqNFQ4WZlwIVE8YpGZlcyMsCtdqJU9OGVbQp3FlRy7cU78nPx8uBN6nWbVKADSu7IiRQQWN6wbFJRKRlKIKoy2G+vq42DlxLjJEHR/gXGQwbg5VnuoaphUMMdTXJykrU+P1tk7VuTr8HY4NnMinbV/F2thEm1EvURV7KxyszLh0p1CeZGZzMyiKpjXLNmGopwefju/JhiPXuBdZ+u2D2lLJ0Qo7W3OueavzJi09G9+7kTRu8HRp0dfXo8srDTAxMeTWnYhSw5mZGZOens3DPO32aIb6+jSu5Mj5oELlHTgfdJ/mVUsuy82qVuJCkOYk3NnAEJqVEt5QX5/hLZqQkpmJX5Tubr801NfHxdaJs5Hq2/RUdcX+X9aVbHVd8YwNo2vVuqpV3W0dq1PT0pYzhf4fXahc0Qp7G3Ou3CxUvjKyuR0YiUvdp68r5gpjAFJSNev/q+0acvDn//HHl2N5a0R7jJ+wIqksqtpa4WBpxsW7mvXe534UrjVKTotBBX0aVXXkor9mW3zx7n1ca5Rc1hpVrUjDKhXZdfmmdhNQoIpdQfvlVyQdwVG4lrH9et6q2JWSJyFRuDqXnicNqzpqvCc/Hy75q/PEyMCA/HzILvShMCvnIXn5+bhp+W9kqK+Pi4Mj58I0269zYfdxc9JOX2yor8+Aeo3401c3Zaqo59WvmBgb0qubCxFRScTEpWgl7oVVdrDC3tqcy7fUeZOWkc2te1E0qfP0eWNuqmy/kou0X/9V3rfAvYXma+1bKV8HyM5RbndSOIy+vvLnR2F0yalmRewq2eB11Ef1WnpKOncuBdDIvf5TXcPA0ICuI1/h8O+Pv6POzEpBekoGeQ/zyhTnkjg5O2DnZI3nCfUfLT0lgztX79GwdekTXW37NOeuZzDzN77NtqBv+f7cEnqN66j6vZ6eHq17uBIeEMVne2azLehbVp/4GPe+pU+al4WhvvIzx/l7mm3YhXv3Sx1TNatWSSM8wLmnHIPd0eEYDNR9/QV/zX7lxpP6+iol9PX+xfv6Ps0bcGbRVHbPGs17vdphYqi7cYtTVRtsHSzxuhCgei09NQu/G6E0cH38l7VVatjzx6l5/PbPHN7/cjgOlUqfWDQ2NeTVQS2IDE0gNipZa/F/RNUW39ROW5ySVnpbbG5qTFqG9j+rPPJoXHzVp8i4OODfjYvNioyLbSxNcalbmcSUDNYseZ2/10zl+4XDaFr/6T47PIuXpa8XQptkD+6XyN9//425ueb2ER9++CEtW7bkzp07HD58mMqVlY3d559/Tq9e6s38tm3bRl5eHmvXrkWv4P7f33//HWtra06ePMmrrypvFbK1teWbb75BX1+f+vXr8+WXX5Kens6HH34IwLx58/jiiy84e/YsI0aMAGDBggWq/8fZ2ZnZs2ezdetW3n///adOW+XKlZk+fTrz589nwIAB//6PUwb25sptCeKL7PsZl5aOg3nJWxZYK0wxqKBf7D3xqenUtFd+s25voSA7N5cHmZornuNS07G3MNNW9AGwMVZgoK9PXEaaxuuxGenUtrIr5V2aPmjZkej0VM5FBqteOxUexKGQu4Q+SKKGpQ1z3DqwrttQBh34gzwd3o5lZ6n8uycU2ZMx/kE69pYl58nTGvdqK3If5rPlxPPZG9nWRpnXCUmaeZOYlKb6XWlq1bDn++UjMTIyICMjmwWf7SEktORJeStLU8YMd2ff4evaiXghNgpTDPT1i+0dH5+WTi37kleS2JubEVe0fqSlqerbI53q1mTl4N6YGhoS+yCNN//YRWKG7iYpVHUls0h9z0x76royt3lnojNSNSbJF105wudtenFx8DRy8pQTdR9ePMjlmFCtxr8oO6uC8pWsmZ6E5HTsrJ+undHTg/fGdOL6nXDuhanL1z/nfImKSyEuMY3a1e15+/UOVK9ky7yvdbNN0aN6H//g6eu9jVlBW1z0Panp1KxYctkc2NqFwKh4rgfrZmWnfSnpSHiQrkpjeWFvUXL/GJ+ajp3Fv8yTB+o8uREcSUZ2DjP6teeb/efQ04PpfdtjUEEfe0st948myvYrLr1I/5ieTm0bW638H6/WqoOlsTE7fJ/D7CO671cG9G7GlHEdUZgaERIWz6yPtpObq/0JSDurgr6+aPuVkqZq255ETw9mjuyE991w7oXr/ktrbYhLgKJdp50tpKbpkZmVT8oDePhQDzsbzXGWnQ0EPYebN2ydrAFILLL3bmJ0EjaO1k91DY8BrTC3NuOfdSdLDWNpZ8HIBUM48ItuznWwdVROGCbFaE4IJsWkqH5XkkrODvSd2Jld3x5m6/J91GtRi7eWjyInO5ejm89h7WCJwsKU4TP7sm7JTn796E9adm/Cx5un8X7vL/A5q91tikobg8WlqT9zFGVvblY8fGrJY7AVQwqNwTbuIkmHYzAo1K+U0G/bP6lfKelzV6G+fr+XHxGJKcSmpFKvkgMzerfH2cGG9zb8reVUFMTL3gKAxHjNrawS41KxcbAo9X1+N0JZ8eF2woLisHWwYOTbXVn+xxTe6reKjELn6PR5vS0TZvXE1MyY0HsxzJ/wK7k52l8tbGddSlucnIbtv2iLZ4zqxHU/zbFkYVbmJrw5oC17TviU+HttsLUufVxs+2/GxWMLxsUF/WPlgrZvwhB3vvvjFP7BsfTs0IhvPhrCqNnrH7u/97N6Wfp6IbRJJrhfIp07d+bHH3/UeM3W1paNGzdSrVo11eQ2gLu7u0a469evExAQgIWFZmebmZlJYKD6dujGjRujr69e+O/o6IiLi/rWrwoVKmBnZ0dMjPo2vW3btvHNN98QGBhIamoqubm5WFpa/uv0zZ07lzVr1vDbb78xbNiwJ4bPysoiK0tz8tjY2BhjY+PHvq9v0wYseq2r6ue3/tjzr+P6snmrSRv61WzIiENbyCp0O/a+IF/Vc7+kOHwTYjgzZCptnapzvtBq8bLq1aoB899Q58m7P+zR2rULa1i9Iq93bs4bSzfp5PoA3To2ZNbb6r3lPliy85mvdT88gYnT12OmMKZju3p8OKM3787bWmyAojA14ouPBxESGs/vm88/8//3IlwKDmXAmj+wUZgyzK0Jqwb3YeivW0hIz3jRUSvR1MZt6efckNePbCI7T11XxtZvQXOHykw8sZ3wtGRaV6zO4tavEp2RyrmoYK39/6+2a8Dcid1VP8/+cneZrzl7fFdqVbNnyqKtGq//dVz9ASQwNI74pDS+WzCMKhWtCI8p+wqiPm4N+HiIut6/vXZPma/5JMYGFejtVp81Ry5p7Zq9WzZgwQh1Oqb9tEdr137eers14ONhhfLklz06+X8S0zKYvf5vFgzpyhuvNCcvP5+DXn7cDo3W6V6WujK8YRNOhgQRU2QSXVued79y5ORtrngFY2drzoiBrVg0tx/vvL+Z7DJOrPRwb8C8ceqD1Was3FOm6wG8P6YrtarYMfmzbWW+1v9XXd5oz3s/TVH9vKDv0jJfs9ebXbh80Iv4Ige0PaKwMOXTv+cRcjuMDYv+LPP/B9B5mDvTvxmn+vmjISuf6Tp6+vr4ewbx+2LlXaWBN+7j3KgKfSZ04ejmc+gVbK1wYb8nu78/DMA9n/s0alOXPhO6aH2CW5cuBYcy8CflGGxoiyasGtKHYWu1Owbr07wBCwer+5X//bZHa9cuascl9bjFPyqe2JQ0fps6hGp2VoTGl33c0rlvM6YtGqD6eeFb65/pOlfP3FU9D74bhd+NUNYfm8srvZryz86rqt+d2OeF13l/bB0sGDz+FeZ9/Qaz3viJnOyyHWjYw6MBH4xXt8UzV+wp0/UA5oztSq2qdkz5pOS22MzEiJWzBxIUHs8vuy+U+f975NX2DXh/UqFx8RdlHxfPelM5Lp66UD0ufrRAcM/RG+w/qfwy+25wDC1dqtO3sws/bSn72SgvS1///1b5G76WSzLB/RIxMzOjTp1nO7AsNTWVFi1asGlT8Yk9BwcH1XNDQ81DV/T09Ep8LS9P+e3ehQsXGDlyJIsXL6ZHjx5YWVmxdetWVqxY8a/jaG1tzbx581i8eDF9+/Z9YvilS5eyePFijdcWLlzIokWLHvu+43cCuRGmXrlnZKCsJnbmCmJT1R9O7c0U+JZym15Sega5D/OwK7ISws5coVq1GvcgHSMDAyxMjDVWcdubK4h7oN0PwYlZ6eTm5WFvqvltroOpgtiMx/9fkxq35q0mbRl5eBt3Eh9/W2JoajLxmek4W1hrdYL71I1AbhZaTWlYkCe2lgriUtTxt7NQ4Bf27LdONq9TBVsLBQc+m6h6zaCCPjMGd+CNLs3pu+C3Z772I+cuB+B7t1BaCg4BsbU2IyFRnRYbazMC7sUUe39hubl5qlOy7wZG06BuJYa81oIV3/+jCmNqasjyxUNIz8hhwWd7eKiD23wT0zPIzcvDzqxIeTdTFFul/UhJK4XszIqv6s7IyeV+YjL3E5O5Hh7F4bfHMaS5Cz+fu6LdRBRQ1ZUih6/am5gRm/H4A0cnNWzNW43dGXV0C3eS1OXQuIIBs5t1YurpnZwIV35heCcplka2FZnUqI1WJ7jPXgvkdkCU6mdV+bJSEF9ohYetlYK7wU+uK7PGdaGdW23eWryV2ITHp/9WgLJcV3Wy1soE94lbgdwIKaEtttBsI+0sFNwJLzktiWkFbbFF8ba46OowgO6u9TA1NGTfVd9iv3tWJ30C8QkuJR2F2i9bCwV3S0nHf8XJW4H4fFVy/6jRFpsr8Iv4l3lioSCu0F05F/zu0+ez37E2M+Hhw3weZGZxfPFkwrQwCaERn0xl+2WvKNI/KhTEamFCuoqFBe2qVmfqId0dwPy8+5W09GzS0rMJj0zitl8Ef2+ZxivudTl2+k6Z0nHGK5Bbger2y6hw+5VcqK5YmnH3/uPTATB7dBfau9ZiyufbiEnU/YHR2mJvC3FF5n3jE8DcLB8TY+V2JBUq5Bc7UDI+Uflebbuw9yp3Lqm3WDAsOFTNxtGahEKrEm0crQm8HvzE61Wsbk/zbk1ZPHh5ib83NTfh84PzyXiQwaJBy3mopf1rLx7wwu+qetHOo4MkrStakRCtblesK1oSeKP0pfAJUUmEFLmVP9Qvkvb9lfuPp8Q/IDcnt4QwETR2r1fmdBRV2hjM/gljsGLhS7izrugY7NA74xji5sLPZ7U3BjtxO5Ab95+ir3+afqWkz10l9PWP+BT8v9XsrLUywX3x+G3u3FDfmWdopGzDbOzMSSy0/7qNvTmBvk9/l1jag0zCg+OoXF3zTsL01CzSU7OICInnzvVQtl/8GI9ujTl1oGx3a57xDORWaWPJwm2xlRn+IU/RFo/pQvtmtZjyWcltscLEkFXvDyI9I5u5q/dq9bPK2auB3PIvpV8pMi72f4px8czxynHx/xZpjovjC9IVXGR1enB4Ao72/35hX0lelr5eCF2SPbj/H2jYsCGhoaFERqobxIsXL2qEcXNzw9/fn4oVK1KnTh2Nh5XVsx8mcP78eWrUqMH8+fNp2bIldevWJSTk2Sc+p02bhr6+PqtXr35i2Hnz5pGcnKzxmDdv3hPfl56dw/2EZNUjICae2AdptK1VTRXGzNiIplWduB5a8l5VOQ/zuBURrfEePT1oW6sa3qHKfLgVEU127kONMM72NlS2tlSF0ZacvDxuxkfhUeiASD3Ao5IznrHhpb5viktrprl6MPbIdnzio0oN94iTwgIbY1NinjBp/m+lZ+UQGpusetyLjCc2OY3W9QvliYkRLjWduBFU+h7UT7L/ki/DP9vI65//oXrEJKWy4cg13v627N/4A2Rk5BAemaR6BN+PJz4hFbdCe/EpTI1oWK/SY/fTLom+nnqw8+g6K5YMIyf3IR9+uktn37jn5OVxKzIa95qFyjvgXrMaXmEll2XvsEja1tTcf9CjVnW8Swn/iL6eHkYGpZ8MXlY5eXncTIjSOCBSD/BwqoFn3GPqSqM2vNOkHWOPb8MnQbOuGOrrY1ShQrFtex7m56OPdg/RSc/MISw6SfUICosnLjGVli6a5atR7Urc9H98+Zo1rgsdW9XhnU//JDL2yXvu1atREYC4JO3U//SsHELjk1WPwGjlaqs2dTXb4ibVnbgeUnJach/mcTssWuM9enrQtm41rocUL2uDWjfmxK17JKZpb3VaelYOoXHJqkdgVMntVxNnJ66Xof16HkpMS0oabeoVyZMaTlwPLj1PfMOiNd6jpwdtSsmTpLRMHmRm0bpONWzNFZy8eU+racrJy+NmbDQeVdV1RA/wqFodz6iy98VDG7gQn5HO8WDtxruw59mvFKWHXsFih7K3y+mZOYTFJKke98LjiUtKpVUjdTrMTIxoXMsJn4DH583s0V3o1KIO/1u2nYhytmdos8Zw8Zrma+evKl8HMDKExvU0w+TlwUVPdRhtykjNJCIwSvUIuR1GfGQizbuq7+BUWJjSoE0dbl948urkHuM7kxSTzKX9nsV+p7Aw5YvDH5GbncvH/ZeRk6W9g34zUjOJuBejeoT4hhMflUTzTurD/hQWJjRoWQvfywGlXuf2RX+q1dM8DL5KHSdi7scBkJvzkLvXgqhat0iYuk7EhMZpLT2P5OQpP3O419Icg7WtVa3UMZV3aCTuzzoGq6DdMVhpfX3bOkU+dz2prw+Ppk2dIv1KnZL7lUcaVCkYt2hpYVFGejaR9+NVj/sBMSTEptCsrfpwTIWZMfWbVuPO9affT8hEYUSlarYkPOaQUr2Cfx5NqpdF0bY46FFb3PgZ2uIxXejYog5vL91e4ljSzMSIb94fTE7uQ2Z//ZfWP6ukZ+YQHp2keqjGxU2KjIvrPHlcPHN8Fzq2rsO0T4qPiyNjU4hNeED1yprbAlWvZEPUU4yhn8bL0tcLoUuygvslkpWVRVSU5sSKgYEB3bp1o169eowdO5bly5eTkpLC/PnzNcKNHDmS5cuX079/f5YsWULVqlUJCQlh165dvP/++1StWvWZ4lS3bl3u37/P1q1badWqFfv372f37mefKDQxMWHx4sW8/fbbTwz7NNuRPK0NFzyZ2qkNIQlJhCUm825XD2IepHHUV70S5LdxgznqG8DmS8pvzdef92TpoB7cDI/BJzyKMe7NMTUyZLen8ral1Kxsdnne5INeHUnOyCQ1K5sFfTrjdT+C62FPnkz+t9beusKKV/rgExeFd1wkExq1RGFgyHZ/5e16K9r3ITr9AV96ngZgqksbZjRvz/TT+whLTcahYPV3Wk426bk5KAwMmd6sHYdC7hKbkUp1CxvmtehEcEoip8N1e3AewObjnkzs3Yb7sUlExCXzVj8PYpPTOOmtzpOfpg/mhHcA204p88TU2JBqDtaq31exs6ReVQdS0jKJSnxAclomyUUOPsl9+JD4lDRCoku+jVYbtu+9xpjh7oRFJBIVncybo9oTn5DK2Yv+qjArPx3GmQv+7N6v3Bt80phXuHQtiJjYFBSmRnTt2JBmTaozZ+F2QDnA+WrJUEyMDfl0xX7MTI0xKzjcJSklnTwtH97y+wVPlg3owc2IGG5ERDG2TXNMDQ3ZVXDi1bL+PYh+kMrK4+cA2HDJi41jhzK+rRun/IPo7VIfl8qOfPy3cq9NU0MDpr7ShuN+gcSmpmGjMGVkS1ccLc05dNu/1Hhow1rfy6zw6MuNhCiux0XwZsNWKAwM2RF4A4AVHn2JSn/Acu9TAExp1JYZrq/w3tm9hKUmY2+irCvpucq6kpqTzcXoEOa5dSHzYS7hqcm0cazOoJoufHrtmE7TArDtoCfjBrQlNCqJyJhkJg1tR1xiKqevqj/Afzt/CKeuBLDjH28AZr/ZlVc9GjB3xV+kZ2RjW7AXblp6Nlk5uVSpaMWr7Rpy3vseyQ8yqVPDgemjO+HlG0rgfe1/gH/kj9OeTOnWhvtxSYTHJ/NOLw9iU9I4flNd73+ZOpjjPgFsOaes9xtOe/LZiB7cCo3B534Uozso2+I9lzX3Q65mZ0WLWlX531rtfJn1OJtOejKpRxvuxyjT8XZfZft14oY6HWveGczxGwFsO13QfhkZUr1I+1W/igPJ6cr2C8BSYUwlG0scCvbErOGo/KAVl5JW4op1bfjjlCeTuyvb4vCEZN5+lCc+hfLkrcEc8wlg69mCPDnpyadv9OB2aAw+IVGM6liQJ5fUedK/dSOCohNISM3A1bkScwd2YuMpT4Jjtd8Wr/W+xoquPfGJicI7JooJrm7K/rHgUMgVXXsSnZbKlxeVtxgb6utT11a5ks6wQgUczc1pZO9AWk4OIclJquvqAUMaurDzzm0ePuetVXTRr1RytKLLKw244hVMUko6DnYWjBzShqysXC5e1U2/v/WwF2++1obQ6EQiYlOYOsiDuKRUTnmq26/v3x/CSc8Ath/1BuD9MV3o0bYBs1fvJT0zW7WXd2pB+wXK/b1trcyoVrBvap2q9qRlZhMd/+CxB6A9i7R0uF/o+9GwSPD1BytLqOwIK3+G6FhYVjA0H9EfNu+G5T/C4N7KietDJ+GnL9TXGDsM5i0FlwbQpAFs2AEZGTCwF8/F7tX7eWP+YML9o4gMimHckuHERyRybo96Ze+XRz7m3J7L/PX9IdVrenp69BjXmSMbThU7OFI5ub0AY4UxX4z+BoWlAkXBuQTJsSmqu0O1ac/3h3n9/dcID4wmKiSWsQsGER+ZxPl96sn3L/5+n/P7PNm7Rjk+2fXdYb4+toARs/tyetdl6reoRe/xnVg17XfVe7avPsiH6//HzXN+XD/tS8vuTWnbqxlzepV9e5eSrLvoyRePxmDhUYxtqzkG+2JAD2IepLLymHIMtvGSFxvGDWW8uxsn7wbRx6U+jSs78vG+0sdgb7R6PmMwgI1nPJnctQ0hccp+5Z0eHsSkpHHslrpfWTt5MMduBrDlfKG+fngPboXFcDM0ilGvFPQrV5R/g2p2VvRu3oAzvkEkpWdSr5I9c1/ryJXAMO5G6m7csmfDOUZM7UJ4SDzRYQmMfrc78TEPOH/0tirM0t8mcP7obfZtVm7NMXFOLy6dvEN0eCJ2FS0ZNa0beXl5nNqvTKtTVRs69GqK5zl/khPTsHe0YtikjmRn5XLltG62wNl6yIvx/dsQGqVsi6cMKWiLr6nb4u8+GMLJqwHsKGiL54ztQg/3BsxZtZe0zOJjSTMTI76ZOxhjIwMW/nQQM1MjzEyNAEhKydDZeU5/HvBk7MC2hEYmERGTzOThBePiK+q0fLNAOS7eeViZltkTutK9XQPmLtccF6emZ5Nd0K9s2neViUM9CAiJ5W5wLL07NqJGFRvm6+hsGnh5+vr/F2SLkudCJrhfIocOHaJSJc2TjOvXr8+dO3fYvXs3EyZMoHXr1jg7O/PNN9/Qs2dPVTiFQsHp06eZO3cugwYN4sGDB1SpUoWuXbs+037Zj7z22mvMmDGDd955h6ysLPr06cNHH330xG1CHmfs2LGsWLGC27dvPzmwlqw9cxVTQ0MWv9YNSxNjPO9HMHnDLrIL3TZZ3dYKG4Wp6ueDN+9iY2bKu13dsTdX4BsZy+QNuzUOdVl68BR5+fmsHtEPI4MKnAsIZsm+x58o/6z+Dr6DrYmCGc3b42Bqhm9CDGOP/Kk6TK+KuSX5hVreUQ2aY1zBgJ86D9S4zirvs6zyPsfD/Hwa2lRkcG0XLI1MiMlI5XR4ECu9zmjsPawr6/+5iqmRIQve6IaFwhjvwAje+VYzT6o6WGFtrs6TRtUd+WXmUNXPs4Z2AmDvhVss2qC+Jet527LzMqYmhsx+pwfmZsb43A5nzsIdGqsYKjtZY2WpTouNlYIPZ/TGztaMtLQsAoPjmLNwO1cLTtKuV9tRdYL2ll8mafx/wyesISpGuyvaDt6+i62ZKe92csfBXIFvdCwTN6vLeyUrC42BqldYJLN3HeS9zh7M7NKO4IQk3t62F/9Y5a19D/PyqWVnw8Ch/bBRmJCUkYlPRDQj1/1JQKxuDwrbH+KLnbGCmU1fwd7UDN/EGMYdV9eVymaWGmkZVU9ZV37sOEjjOqtunGH1DeWE2LQzf/F+806savca1kYmhKel8NX1U2zy1/1hpn/su4KpsSEfTOyOucKYG37hzPhCc0V/FUdrrCzU5Wtw92YA/PDxcI1rffLjIQ6cvkVObh6tmlRneC83TIwNiYl/wMnL/vy+W/PuIG377YSy3i8c0g0LU2O8giKY+rNmva9mZ4W1mToth72VZfPtHu7YWyq3M5n6y+5ih1ENbO1CdPIDzt/V3vZKpVl3VJmOj14vSMe9CP73Q5F02FthUygdjas7sna6uv2aPagTAHsv3eLjP5TtV6cmtVkyqocqzJfj+wDw04EL/HRQN3nz+3FlWj4eps6Tt9YUaYuLpOWw911szE35X09lnviFx/LWmt0kFMoT54q2TO/THiuFCeEJKfxy5DIbTxVf8akNfwf4YWtqyow27XBQKPCNi2Xs3zuJyyjoHy0sNfb+djQz58DwMaqfpzRvxZTmrbgYHsqIPer9gttXq0FVC0v+LJgof5500a9k5+TStHFVhrzWAgtzExKT0rh+K4y3399EUrJuvkDZcOAKJsaGfDhO2X5d9w9n+ldF2q+Kmn39kK7NAFjzoeZ5LYt/OcT+s8qx46DOrkwaqD6P5uf5w4uF0ZZbfjD2PfXdOsu+Vz4f0DOfpfMgNh4iC91NXrWScjL7i+9g405wcoBP5kD71uowvbtAYhJ885vyUMqGdeDn5brZoqQk2778CxMzE95bMwVzawU3z95hXq/PNFZcV6rtiKW95tk+bt2a4FjDgUO/FR/r1nGrScO2yi08NgR8p/G7UTX/R3SI9rdw+vPrA5iYGTP923GYWym4dcGf+QO/0kxHzYpY2pmrfr7rGcSS179h/OKhjPygP1Ehcfw0dxMn/lTvG3x+3zW+mb6OEbP68tbyUYT5R/LJyG+5dUE3k8MHb93FVmHKtEdjsKhYJm1Sj8EqW1lotGGFx2AzCsZg72zVHIPVtLfhG9dCY7DwaEb+rvsxGMBvJ5X9yqIh3bAwMcYzOIKpa4v39YX7lUPXlZ+73unhjr2FgjsRsUxdq+7rc3If0rZOdUa3V058RyU94IhPAGuOau/MjZJsX3saE1Mj3l08EHNLE255hvDR5N819smuVN0OSxv19ir2TlbM/WoEltYKkhPSuOUZzIwRP5JcsA1FdlYuLi1rMmBMO8wtTUmKT+Xm1WBmvv4jyQm6Oeth437lWHLemwVt8d1wpi8voS0uNJYc0q0ZAD/N12yLl/x8iP1nblPfuSIudZRzF7tWTNAIM2DGWiJ1dPfNH3uV/crcyepx8cylxcfFhdMy6FVlWn5YpDku/vSHQxw4pfwS5c8DnhgbGvDumM5YmpsQEBLL9E93El5oCyRte1n6eiG0RS+/PJ7WI0QZNfzo6xcdhTLx/WSG6rnzumUvMCZlFzxuruq521vlO188f1TnS8d+Je8tWR6c2jdH9bz+kvKdJ34fq/Ok5h+6WTn1vASNUm+x5P76vz/H4L/iwpZZqudNZpXv8uWzQl2+mk0r32nx/ladlqYzyndabnxdqI/8vvzWleC31XWlPPcpoNmvtB77bIf7/VdcXj9T9TwvSvt7Kj9P+k7qw+y66w99TMj/tiN521XPe5iPfYExKbvDqeqDCRssLt9t8Z2F6rbYZU75TcvN5ep09Gr45O0u/8sO+qrHwm1Gl++2+NJGdVvsMbz89vUA57e9HP194b5eaHJ997/XBl7/ZsaTA5UzsoJbCCGEEEIIIYQQQgghtExPlhU/F3LIpHihGjdujLm5eYmPTZs2vejoCSGEEEIIIYQQQggh/sNkBbd4oQ4cOEBOTsknpDs6Oj7n2AghhBBCCCGEEEIIIcoTmeAWL1SNGjVedBSEEEIIIYQQQgghhNA+2aLkuZAtSoQQQgghhBBCCCGEEEKUSzLBLYQQQgghhBBCCCGEEKJcki1KhBBCCCGEEEIIIYQQQsv0ZIuS50JWcAshhBBCCCGEEEIIIYQol2QFtxBCCCGEEEIIIYQQQmibrOB+LmQFtxBCCCGEEEIIIYQQQohySSa4hRBCCCGEEEIIIYQQQpRLskWJEEIIIYQQQgghhBBCaJkcMvl8yApuIYQQQgghhBBCCCGEEOWSTHALIYQQQgghhBBCCCGEKJdkixIhhBBCCCGEEEIIIYTQNtmi5LnQy8/Plz+1EEIIIYQQQgghhBBCaJHb1K9fdBSK8fxpxouOgtbJFiVCCCGEEEIIIYQQQgghyiXZokQIIYQQQgghhBBCCCG0TfbNeC5kglv8v9RowX/vFpF/4/an6ttJXKeX77RcX61OS90vynda/D9Qp6XW6pUvMCZlc2/6TNXzhh+V7zzx/USdJ01nlu+03FipTkvtFeW3fAXOUpev+p+U7zzx+0idJ/U+K99puTtfnZaXKV+azCq/afFZoU5Hze9WvMCYlF3QO7NUz8tz+wWabVh3/aEvMCZldyRvu+p5XlS9FxiTstF3uqt67vJ++a3zADe/VNf7l2kMVndp+U2L/zx1OuosK7/pAAiY+3J8VgHNzyu1VpXztLynTovz9+W3vw9+e9aTAwmhQ7JFiRBCCCGEEEIIIYQQQohySVZwCyGEEEIIIYQQQgghhJbpyRYlz4Ws4BZC/B979x3W1PUGcPwLsodsAfdE3Ioognu07q1d7tFqt53W1TraWmvtsMO27lW1ztq698aFAwQHyJI9ZCND+P2RmBAIaDXRwu/9PE8eYzj35rw5897cnCuEEEIIIYQQQgghRLkkJ7iFEEIIIYQQQgghhBBClEuyRIkQQgghhBBCCCGEEELomixR8lTIFdxCCCGEEEIIIYQQQgghyiU5wS2EEEIIIYQQQgghhBCiXJIlSoQQQgghhBBCCCGEEELHDApljZKnQa7gFkIIIYQQQgghhBBCCFEuyQluIYQQQgghhBBCCCGEEOWSLFEihBBCCCGEEEIIIYQQuiYrlDwVcgW3wMDAgB07djzrbAghhBBCCCGEEEIIIcS/IldwVzBjx45l9erVJV7v2bMne/fufQY50o379++zcOFCVq1aRXh4OObm5jRo0IBXX32ViRMnPpU8vNXdm+GezbA2M+VSRDRzdx4iPCmlzG1e9mrB+A6tcbSy5EZsAl/8cwT/qDjV34d7NqNvi4Y0dq2ClZkpXp//Qvq9HL3G8UZvb4Z4N8Pa3JTLodF8sfkQEQmlx+FRrxpju3nSqEYVqthYMWXZTo74hzzxfp/UCI8WTPRqjZOlJdfjE5h74AhXY+JKTd+rYQOmdPKhuk1lwpJTWHj0BMduh6n+bmFszIddOvBcg3rYmptzJzWVNRcus+HyVb3FADCqeQtebe2Jk4UlQYkJzD56hKtxsVrTNrB34D1vH5pWqUL1yjbMO3aElZcvlbrvyZ5t+Lh9R1Ze8mPe8aN6ikDT290028mcnYcIT04pc5tX2qrbyfXYBL7YpdlOTIwqMbVXJ/o0a4hxpUqcCg5n7t+HScrM0mssb/TyZmg7dZ3+fMshIhLLjuXF9i0Y27U1jtaW3IxOYP72IwREqGNxsLbg/f6d8HariaWpCWEJySw9eI6DV4P1FsfIli141dMTJ0tLghISmHP4CFdjS6ljDg5M8fGhqXMVqtvYMO/IEVb5adaxNtWq8WobT5o6O+NsZcXkv/7iQHDJPkHXXvFswQTv1jhZWXI9LoF5e4/gH11Gm2/UgHe7+FDNVtHmvzl0guPBYVrTzunTnZdaN+fLfUdZfa70NqUrI1q3YEK7IrHsP8LVsmJxb8CUzkViOXyCYyFhGmnqOdjzYbcOtK1ZnUqGhoQkJvHW1n+ISUvXayy6Lpf5A55nSIsmGtucCA5j4obt+gpBw5s9Ndv9vK0Pb/cvtW/B2C6Kdn/jQbuPVHwGVe0qs2/mBK3bfbD6H/ZfvaXrEBjVrCWvtSoyrhw/zJX4MsYVLx+aOTlTvbINc08cYeUVP400J0ZPpHplmxLbrr16mU+PH9J5/ouqKP3XA2PmvEjvid2xsrXk2qnrLH5jKVHB2uMBWHv7Z1xqVynx+s5f9vLjW8uxtrNi9JwXaP1cC6rUdCQ1IY1Tf51j1axNZKXpfow8fwVWbIBrNyEhyYAfPy+kR8eytzl3Cb76GYLDwLUKTB4Fg3trplm/HVZshMRkcK8HM96F5o10nn2t3nzem2FtFW3+Ulg087Y/Qpv3bsG4zso2H5PAl3+p2zzAyknDaFOvhsY2f/peZe42/baXijIHU83xrZRz/P0PmeO7a5njFxkjb017T+t2Cw4fZ9nZi7rOvsrIVupjlaD4BOYeLDuO3g0bMKWjMo67KXxd7FjFwcKCj7t0oEPtWlQ2M+V8ZBRzDh4h/G6K3mJ4oCIdr4xqrhxXHsRy5BFicS4SyyXNWEY0b86IZi2oVrkyALeSk/jxrC/HwsL0G0fTlkx6MNYnJfDZQ8b699tqjvUrrmqO9SdHaR/r1/jrf6wXQlfkCu4KqFevXsTExGg8NmzY8Kyz9UTmzJnDd999x7x58wgMDOTIkSO89tprpKSkPJX3n9DRk5HtWjLnr4O89OsGsnPz+H3MEEyMKpW6Ta+mbkzt3Ylfjvgy7Jf1XI9N5PexQ7C3NFelMTM24uStcH4/fv5phMG47p683Kkln/95kJHfKeJYMrnsOMxNjLkRlcD8LYd1ut8n0cfdjendOvHTSV8GrVxPUHwiK14cgr2Fudb0raq58t3APmy5EsDAles5eCuYX4YOoIGjgyrNtO6d6VS3Nh/8s5dey1az6vwlPn2+K93q19VLDAB9G7gxvWNnFp/1pf+GdQQlJLB60BAczLXHYW5sRERqKl+fOkl8ZkaZ+27u7MzLTZsTlJCgj6xrNVHZTmbvPMiLv20gKzePpQ9pJ72V7eTnI74MXbKeG7GJLB2j2U6m9e5Ml4Z1mbJxF6NXbKaKtSWLX+6v11jGdfPklY4tmbf5ICO+V9TpXyeVHUvPlm58NLATv+7z5cVv13MjOpFfXxuCvZU6li9e6UXtKna8s+Ivhixcy8GrwSwc3Rf3ak56iaNvQzemd+7M4jO+DFi7jusJCawaWnodMzMyIjI1lYUnThKfob2OWRgbcz0hgdmHSu8TdK13YzemPdeJn4/7Mnjpeq7HJbL8lTLafHVXFg3pw5bLAQxaup5DN4L5+YUBNHByKJG2R8N6tKjmQlxa2W1KV/o0cmNaj078dMKXQcvXcz0+keUvld1/fTu4D5uvBDBo2XoO3gzm5+GasdSwteGP0S9wO+kuI9dtpv/Stfx88iw5+fl6jUVf5XI8OJT23/6mery/fbde43hgfFdlu99ykBE/KNr9b689Qrsf0Ilf9/vywnfruRmdyG9F2n1sSjpdZv+m8fh572ky7+Vy4nqYzmPoW78hMzp05ofzZ+i3aS1BSQmsHjC09HFF2eYXnDlR6rgy8M/1tFmxRPUYuWMzALtCbug8/0VVlP7rgRc/Hsigt3vzw+u/83a7adzLzGH+3pkYmxqXus1bbafxguurqsfHz80F4NjmMwA4VLXDwdWO3z9aw6vN3mfhuJ9p07MlHyx7XS8xZGdDw/owa8qjpb8TA5M/Aa9WsH0ZjB4GsxbCyXPqNLsPw4Kf4c0xsHUpNKwHr34ISXf1EoKG8V08GdG+JXO3HeSVH5VtfsJD5vct3Pi4fyeWHPRl+A/ruRGTyG8TNOctAJvP+tN57m+qx6JdJ/QaS0WZg/Vp5Mb07so5/or1BMX9izn+Cu1zfO/Fv2k8PvlnHwWFhey7ob+LCx4cq/x4ypeBqxRj/coXHhLHgD5svhrAgFXrOXArmCVDNOP4dUh/atjaMHnbTgasWk9UWhprXhyKubF+r1msSMcrfd3cmN6pM4t9fen/hzKWwY8Qy8nSY4lJz+DrUycZuGE9gzas50xkJL/1H0gD+5JzTl3pV78hM5Vjfd8/1xKYmMCa/mWP9RFpZY/1Azavp83KJarHiL8UY/3uYP2O9f8vDAr/e4+KSE5wV0Cmpqa4uLhoPOzs7AC4desWnTp1wszMjMaNG3PgwIES20dGRvLCCy9ga2uLvb09AwcOJKzIN5Bjx45l0KBBfPnllzg7O2Nra8vcuXPJz8/no48+wt7enurVq7Ny5UqN/U6dOhU3NzcsLCyoW7cus2bNIi8v75Fi2rlzJ2+88QbDhw+nTp06tGjRggkTJvDhhx8+/gf1L4z28eC3o+c4fP02N+MS+WTLXqpYW9K9Ub1Stxnb3oPNFwLY7hdISEIyc3Ye5F5ePkNaN1WlWXvmEsuOn+dKZMzTCIMRnT1Yuv8cRwNucys6kZnr9uJkY0m3ZqXHcSoojJ93n+bw1dKvcHqc/T6J8W092HQlgK3+gQQnJfPp3oNk5+UzrHlTrenHeLbixO0wlp27SEhSMt+fOENgbDyjWrdUpfGo5sp2/0DORdwhKjWNTVf8uR6fQAtXF73EADDBozWbrgWwJfAawcnJzDx8kOz8fIY30R7H1bg4vjp5nH9u3iD3/v1S92thbMx3Pfsw/dABUnPu6Sv7JYz29uDXY0XayVZFO+lRRjsZ46NsJ5cU7WT238p24qH4DKxMTRji0ZQFe49zNjSSwOh4pm/fj0etqrSorr+yGdnJg6UHznH02m1uxSQy44+9OFW2pFvT0mMZ3dmDrb4B/HU+kNtxyczboqiXg9qqy7NlbVc2nLhMQEQcUcmpLD14jvTsHBpXd9ZLHONbt2aTfwBbrynr2AFlW2mmvY75x8Xx1fHj/HOj9Dp2LCyMb0+dZn+w/g4MixvXzoM/LwWw7UogIYnJfLZLUU+GttQex+i2rTgRHMbyMxe5nZjMD0fPEBgTz8g2LTXSVbG2ZFavrny4Yy95BaW3KV0a5+XBn5cD2HZVEcunuw9yLz+fYS1K6b/atuJESBjLfRX91w/HFP3XSM+WqjTvd2nP8ZAwFh4+QVBcApEpqRy+dZvkrGz9xqKncsm9f5/EzCzVI03Pv2x6YGQnD34/eI4j125zMyaR6Rseod13UrT7Hcp2P3eroo0NVrb7gsJCktKzNB7dmtVn35WbZOc+2hzo35jYsjWbrvmzJegawXeTmXHkANn5eQxv1Exr+qvxccw/fZx/bpXe5pPvZZOYlaV6dKtdl7CUu5yNuqPz/BdVUfqvBwa/25f1X2zlzM4LhPpHsGDMTzhUtaP9oDalbpOamMbduBTVo12/1kQFx3L1WCAAYdcimTt8Eb7/XCTmdhyXjwSwcuYG2vVvjWEl3R/mdWoHUybCc50eLf3Gv6CaK0x9E+rVhhFD4PnOsHqzOs3qP2F4PxjSB+rXhtkfgJkZbHsK32uN6uDB74fOcSTwNjdjE5m+aS9VKlvSvUkZbb6jB1vOBrDjQiC345OZu03R7w1uo1kv7+XmkZSRpXpk5uTqNZaKMgfTOsfPf4Q5/lnlHP94yTl+0fEkMTOL7m718A2PJDIlVS8xAIxvoxnHrH2K/mt4Kf3X2NatOF78WCUunlEeijhq29nSqlpVPtt/GP/YOEKT7/LpvkOYGRnRv5G73uKAinW8MsGjNZsCisRy6MljORx6m6NhoYSlpBCaksKi06fIysujlaur3uKY2LI1G6/5s/m6cqw/qhjrX3jIWP93cNljfUJWlurRvXZdwlLv4hut37FeVDzJycmMGDGCypUrY2try4QJE8go5cKDB+nffvttGjZsiLm5OTVr1uSdd94hNfXf99Fygvv/SEFBAUOGDMHExISzZ8/y66+/MnXqVI00eXl59OzZE2tra06cOMGpU6ewsrKiV69e5OaqJ2aHDx8mOjqa48eP8+233/LZZ5/Rr18/7OzsOHv2LJMnT2bSpEncuaPuEK2trVm1ahWBgYH88MMPLF26lO++++6R8u7i4sLhw4dJeIpXoz5Q3c4GJ2tLzoREqF7LyMnl6p1YWtaoqnUb40qGNK7qjG+RbQoL4UxIBC1r6G+wK0s1BxucbCw5e7NIHPdy8Q+PpXkd7XE8y/2WxtjQkCYuzpwOK/LZAqfDImhVTftn26qqq0Z6gBOh4bQskt4vKoZuDeribGUJgFfN6tS2s+NkWLjOYwBFHE2rOHMqQr3/QuBURDitXJ6sjszp0o0jYbc5FRnx8MQ6UlY7aVFGO2lS1Zkzt0tvJ02qOmNiVEljv6GJd4lOSdNbW6pmb4NTZUt8i9fpiFha1NYei1ElQxpVd9bYprAQzt6MoEVtdT4vh8XQs6UblS1MMTCAXi3dMDUy4nxIpM7jMDY0pKmzM6eL1bHTEeF6nXTrmrGhIU1cnTkdWqzNh0bQqrr2OFpWd+VMqGb9P3k7nJZF0hsACwf2YvmZiwQnJOkj6yWUFUvL0mKp5qqRHhSxPOjvDIDO9esQmnyX5S8N5syUSWwe+xI93PTzBeMD+ioXgLa1qnP6/UnsfWMMs3t3w9bcTOf5L656We2+VuntvnF1Z3xvabZ735sRtKil/TNoXL0KjapVYdu5AN0GgHpcORmpWSan7kTg8YTjStH3GNSwMZuDdJ//4u9TEfqvB1zqVMHB1Y5LB/1Vr2WlZXH9bDCNvRs+0j6MjI3oPqIj+1aWffW5pY0FWWnZFNwveKI868Lla+DdWvO1Dm0UrwPk5imWOymaxtBQ8f8HafTlQZs/c0uzzV+NfEibr+aMb3CxNn+rZJvv28qdE59NZvv7o5jSqz1merzKtqLMwVRz/OLjSllz/GoPn+MX5WBhQZd6ddhyRX99mLGhIU1dnDkV/i/jCC8Zx4P0JpUUV+IX/WVWIYovhFtX1/3x1gMV6XhFFUukllh0NK4YGhjQz60h5kZG+MVE62SfxRkbGtLUyZlTd/Q81rs15k89j/X/Vwr/gw89GTFiBNeuXePAgQP8888/HD9+nNdee63U9NHR0URHR/PNN98QEBDAqlWr2Lt3LxMmaF/iryyyBncF9M8//2BlZaXx2vTp0/H09OT69evs27ePqlUVA+GXX35J797qhfA2bdpEQUEBy5Ytw8DAAICVK1dia2vL0aNHef755wGwt7dn8eLFGBoa0rBhQ77++muysrKYPn06ANOmTeOrr77i5MmTvPTSSwDMnDlT9T61a9fmww8/ZOPGjXz88ccPjenbb79l2LBhuLi40KRJE3x8fBg4cKBG3vXF0coCgMQMzbXmkjKycLS20LqNrYU5RpUMtW5T19FOPxl9iAd5TUovlqf00uN4lvstjZ2FOUaGhiQWW/svKTOLeg7aP1tHK8sS6RMzM3GyVOdv3oEjzOvVg5NvvUbe/fsUFhYyY+9BzkdG6TwGADtzZRxZxfKVlUU9e/vH3m8/t4Y0reLMwI3rnzSL/8qDdpKUUfxzzsLJqux2UnybpIws6ijbiaO1Bbn5+SXWpk/MyMLR2lJX2dfgWLn0Ou1QSp22s1TGomWbOlXU9fKj1bv4enQfTn7+Bnn373MvN58pK3cSmaj7q4hUdax43c/Kou4T1LGn7UGbL1FPMkvvT7W1+aSMTByLtPlX27chv6CQNU9hze0HSuu/EjOzqPsv+68HsThYWmBlasJr3m34/tgpvjlyko51a/PTsP6MWreZ8xF66sP0VC4nQsI4cD2YOymp1LCz5f2u7Vn68mBeXLmRgkL9zcYdymj3D/qE4kpt9xma7b6owW2bEhKbxJUw3f9yS9XmszM1Xk/MyqKerW7a/PN161PZ1JQt1/V79rGi9F8P2LvYAnA3LkXj9btxKdg52z7SPnwGtcHK1pL9q46WmqaygzUjZg5j99KDj5dRHUtMhuLdgYM9ZGQacC+nkLR0uH/fAAc7zbbtYAehej7npZq/Fu/Dypi/Pmqb33X5BtF300hIy8DN1Yn3enegtpMdU9b+o+MoFCrKHEw1RmbpYI5fStxDmjUmMzdPr8uTqMZHbf1XaXFYln2scjv5LlGpaXzYuQMz9x4kOy+PcW08cK1sTRUr/cyHoWIdr+grFoCGDo5sefElTI2MyMrL5fV//iY4OfmJ9lkaO7MHcWiO9QlZWdSz0/FYH6TnbxpFhRMUFMTevXs5f/48np6eAPz444/06dOHb775RnUesqimTZuydetW1f/r1avHF198wciRI8nPz8fI6NFPW8sJ7gqoa9euLFmyROM1e3t71q5dS40aNTQqlbe3t0a6K1euEBwcjLW1tcbr9+7dIyREvURFkyZNMDRU/wDA2dmZpk3VP+2pVKkSDg4OxMfHq17btGkTixcvJiQkhIyMDPLz86msvBnDwzRu3JiAgAAuXrzIqVOnOH78OP3792fs2LEsW7ZM6zY5OTnk5GhOyExNTTE1NS3zvfq1cGf2gO6q/09eu+OR8vhf06e1O7NeVMfx1m87nl1myoFRrVvSsqoLk7b8RVRqGm1qVOOz57oRn55Z4oqK/ypXKys+7dyF0du3lvmTQF3o11yznby+bode30+f+ni48+lwdSxvLtuht/d6s7c3lc1NeXXJFu5mZtOtaX0WjunLuJ/+5FbM07mKWEATlyqMbtuKIUuf7hdB+mCo/DL60M0QVilP1gfFJdCquisvezTX2wlufdl97abq+c34JG7EJXLo7fG0rVUd3zDd/dKhr4c7nw57Ou3+AVOjSvTxaMhvB87q/b305YXGzTgWHkp8ZubDE/8f6/ZKB6b8Okn1/5n95j/xPnuP78a5PZdIitG+OLWFtTmf/zON8MA7rJn95xO/X0XTt5U7nw1Rt/k3Vu7Q23ttOau+Uv9WbBIJaZmsmDSMGvY2RCY/+RfaFWkO9rQNbdGEndeC9D5P1rX8ggLe2P4383s/h9+UN8gvKOB0WARHQ0JRTgPKjad5vPK03L6bTL/167A2NaF3AzcWPt+Tl7f8qbeT3Pr2YqNmHA0PJT5Lxnrx75w5cwZbW1vVyW2AHj16YGhoyNmzZxk8ePAj7Sc1NZXKlSv/q5PbICe4KyRLS0vq16//WNtmZGTQunVr1q8vedDv5KS+CZqxseYNcQwMDLS+VlCg+HnkmTNnGDFiBHPmzKFnz57Y2NiwceNGFi1a9Mh5MzQ0pE2bNrRp04YpU6awbt06Ro0axYwZM6hTp06J9PPnz2fOnDkar3322WfMnj27zPc5HBTC1SJrYpsoG5WjlQWJGepO3sHKgusx2pdMScnKJv9+geqKiqLbFL+qW1+OBoTgH14yDgdrCxLTisRhbcGNqMdf+iVReRWLrvdbmrtZ2eQXFGhc8QeKqxgTSrmje2KxKwRBcaXEg/SmRpV4v3N73tz2N0dDQgG4kZBII2cnJni11ssJ7rvZyjgsiuXLwoKExzxx0LSKM44Wlux8eaTqNSNDQ9pWq86oFi1x/+kHnV0Befh6CFfvaKlfVhYkFGknjpYWBMWW3U4cymgnielZmBgZYW1mqnEFkaOVBYnpupl0Hb0Wgn9EkVgqFWkr6Y9Wp+9mKmMpdtWXYh+KWKo72PBKx1YMXrCGkDjFyeyb0Yl41K3Gi+1b8vkW3d6hXFXHitf9J6hjz8KDNl+inliW3p9qa/MORa7y8qxZDQdLC468O1H1dyNDQ6Y+14nRXq3o/uMKHUehUFr/5fgY/deDWO5mZZN3/z7BiZpfkIQkJtO6RjUd5l6TPspFmzspqSRnZlHL3lanJ7iPXAvhamljZLF2f/3ftnsrixJXeAI818INc2Nj/r4QpIsQSubnQZs317yaz9HCggQdHKRWs7amffWavL5n5xPv62HKe/91ZucFrp9VXyFqbKqoX3bOtiTHpqhet3O2JeRK2EP3V6WmI616NGfO0IVa/25uZcaXe2aQnZ7N7CELuZ//3zhp5GgPicXOxyclg5VlIWamiuVIKlUqLHFDyaS7im116UhgCFcjtM9bSoz10f++zSdqafMPPJhj1HC01ckJ7oo0BytKNUZaaJnj/4txxdHSUmt6z+rVqOdgz5Qdu3SXaS1U46OW/qu08a7oL7NU6YscqwBci4tnwKr1WJmYYFKpEsnZ2WwZ9RIBsXG6D0KpvB+vFKWPWB7IKyggPDUFgID4eJo7OzO2lQczD+n+1zR37z2IQ3Osd9LxWD95r/7H+v8n/8WbOj7uBaFliY2NpUqVKhqvGRkZYW9vT2xs7CPtIzExkXnz5pW5rElpZA3u/yONGjUiMjKSmBj1hMjX11cjjYeHB7du3aJKlSrUr19f42FjY/PY73369Glq1arFjBkz8PT0pEGDBoSHP9naxo0bNwYgs5QBadq0aaSmpmo8pk2b9tD9ZuXmEZGcqnoExyeRkJ5Ju3o1VGksTU1oXt2Fy5Ha19bKu19AYHQc7eqqtzEwgHZ1a3D5Kd1QMisnj8jEVNUjJDaJhNRMvNw042hWy4WroY+/RlhUUqpe9luavIICrsXG4V27yGcL+NSqwaUo7Z/tpegYvGvX1Hitfe2aXFamNzashEmlSiUmUwUFhaqrI3Utr6CAgPg4fGqo82UA+NSoyaXYx6sjpyMj6LVuNf3+WKt6XI2L5a/rQfT7Y61OJ4ultpO6JdvJlTLaybWHtJNr0XHk5t/XSFPb0Y6qtpV11pZKtJU4xdVWXg2K1emaLlwJ0x5L/v0Cgu7EaWxjYABeDWqoliIwN1EcgBYvh/sFBXqpZ3kFBQTExeFTU7OOedesyaWYp9MP6UJeQQHXYkq2ee86Nbh0R3scl+/E0K6OZpv3qVOTy8r0f/kHMeC3tQz6fZ3qEZeWwfIzF5n4x/anH0vtGqq8lYglKgZvLbE86O/yCgrwj4mjroPm2aA6DnZEp6bpNoAi9FEu2jhbW2FrYa5x0kYXsnLyiExKVT3KbPfhpbf7QC3tvl2DGlwJLxnTkLZNOHLtNncz9XPzzwfjSvvi40r1mvg95rhS1LBGTUnKzuJw2O0n3tfDlPf+KzvjHtEhsapHeOAdkmLu0qq7+teOFtbmuHvVJ/DMjYfur+e4rqTEp3J2l1+Jv1lYm/PVvlnk5+bz6cAF5OXo/ualj6tlE/C9qPna6QuK1wFMjKGJm2aaggLw9VOn0ZXS2ny7Ym2+eY2HtPmoOLzqFxvr62tv8w+4V1Uc7Be9EOSJYqlAczCNPD3OHD8qBu9apc/xixreogn+MXFcj0/Uab6LyysoICA2Dp9axeKoXXYcPlri0JY+IzeX5OxsatnZ0szFmYO3Qkqk0ZXyfrxSVJmx6HhcMTAwUK2brmt5BQUEJMThU10/Y/1w96c31otna/78+djY2Gg85s/X/ouzTz75BAMDgzIf169ff+I8paWl0bdvXxo3bvzQC1O1kSu4K6CcnJwS344YGRnRo0cP3NzcGDNmDAsXLiQtLY0ZM2ZopBsxYgQLFy5k4MCBzJ07l+rVqxMeHs62bdv4+OOPqV69+mPlqUGDBkRERLBx40batGnDrl272L790U8iDBs2jPbt2+Pj44OLiwuhoaFMmzYNNzc33N213zn6Sb99KmrNaT8mdfEiPCmFO3dTeae7D/HpmRwKUk8oVowbysHAYP44ewWAVaf8mD+0JwHR8fjfiWW0TyvMTYzZflG9lpWjlQWOVpbUtLcFwM3ZkcycXGJS00jN1vw2TRfWH/Pj1ee9CE9IISoplTf7+JCQmslhf3Ucv785lMNXg9l4QhGHuYkxNZ1sVX+v5lCZhtWcSM26R+zd9Efery6tOOfH1/16EhATz9WYWMZ6Kj7brVcVn+3X/XoSl57BomOnAFh94RLrXxnO+LYeHA0OpW/jhjR1dWbmXsW36hm5uZyNiGRq147cy88nOjWNtjWrM6hpY+YfPqaXGACW+13km+d74R8fx5XYWMa18sDC2JgtgYo4vnm+F3EZGSw8fRJQ3PCjvr2D8nklnK2saeToRFZeHuGpKWTm5XEzSfMqzqy8PFLu3Svxuj6sOePH5C5ehCdrtpODRdvJ2KEcDFK3k9Wn/Zg/pCcBUfH4R8Uy2lvZTvwUn0FGTi7b/AL4pHdnUrPvkZGTy8y+XbkUEc2VO4/2LfDjWHfcj9ee8yIiMYWo5FTe7OVDQlomhwPUsSydPJRDAcFsPKmIZc0xPz5/uSeBkfH4R8QysrMilh3nFLGExt0lPOEunw7vzqK/j5OSeY9uTevh7VaLt5bv0EscKy5eZGGvXvjHKuuYh7KOBSjrWK9exGZk8M3JInXMQVnHKlXCxcqaRk7KOpaSAijuel/L1lb1HtUr29DIyYmUe/eISU/XSxwrff1YMFDZ5qNjGdO2FebGxmy7oohjwUBFm//2sKLNrzl3ibWjhzOunQfHboXSp0lDmlZ15tNdijafkn2PlOx7Gu+RV3CfxIxMQotfSqjrWM76sWBAyVhU/Vd/Zf91VNl/nbvEulHDGe+l2X/N2q2+Kmi57wW+G9yX8xF38A2PpFO92nRtUJdRazfrNxYdl4uFsTFvdWrHvuu3SMzIooadDR/16Eh4cgonQvRzw9+i1h33Y1IPZbtPSuWt3trb/WH/YDacUrb743588VJPrinb/ahOmu3+gRoONrSuW503lunvCxSAZZcvsqhHL67Gx3IlLpbxLTywMDJmi/JGUYt69CI2M4OFZ7SMK5Uq4WJppTGuPGCA4qB36/VA7utxLfSiKkr/9cD2H3bxyoyhRN2KJSY0nrFzXyQp+i6ndpxXpfn6wKec2nGOv37eq3rNwMCAnmO7cmDNsRI3jlSc3J6JqYUpX41ajEVlCyyUa8anJqSpfkmpK5lZUHTVozsxEHQLbCpDVWf49neIS4AFysOLlwbCH9th4RIY2kdx4nrvUfj1K/U+xrwA0+ZDU3do5g5rtkB2NgzW/212WHvSj9e6eRGuHOvfet6H+LRMDl1Tt/llrw7l0LVgNpxWtvkTfnzxQk+u3YknIDKWkR2Ubf6Col7WsLehTyt3TlwPJSXrHm6ujkzt35nzt+9wM1Z/J1YryhxMNcePVYwrY9sUGyO1zfFHaJnj79G8ctbKxIRe7m58dfi4XvJdIo7zfizs2xP/2CLHKsbGbPFXxLGwryKOb44r4lh18RJ/vDycCW08OBISSr9GDWnq4syMveo4ejdsQHJWNtFp6TR0cmBmjy4cuBXCyTD9LqVYkY5XVLHEFRtXisaSmcHCU1rGFcNKOFsqx5Vc9Rj5UfsOHA0LJTo9HStjEwa4u9Oueg3Gbt+qNQ+6sOzyRRZ174V/fCyX42OZoBzrH9wAelF3RRxf+6rjaFBkrHe2sqKxoxOZWsb6YY2e7lgvnp1p06bx/vvva7xW2vmzDz74gLFjx5a5v7p16+Li4qKxTDFAfn4+ycnJuLi4lLl9eno6vXr1wtramu3bt5dYIeJRyAnuCmjv3r24FrsTcMOGDbl+/Trbt29nwoQJtG3bltq1a7N48WJ69eqlSmdhYcHx48eZOnUqQ4YMIT09nWrVqtG9e/dHXi9bmwEDBvDee+/x1ltvkZOTQ9++fZk1a9YjfyvTs2dPNmzYwPz580lNTcXFxYVu3boxe/bsf70uz+NYfuIC5ibGzBnYA2szU/wionlt9TZyi/wEtIa9DXaW5qr/7w24ib2lOW9398ZRuZzJpNXbNW448mLb5rzZTb0O+tpXXwBg+tZ97LgUqPM4Vh5SxPHpiz2wNjfl0u1o3vhVM47qDjbYFomjSU1nlr89XPX/jwZ3AeCvs9f49I/9j7xfXdp9/Sb2Fua829EbJ0sLguITmLBpO0nKm4ZUrWxNYZFB+VJUDO/v3MN7nXz4oFN7wu6m8MbWndwq8pP+KX/t5sPOHVjUvze2ZmZEpaXx7fFT/HHpql5iANh16yb25ha8184HRwsLghITGLtjm+rmJ1WtrTWuYqhiacWuEaNU/3+ttSevtfbE904kr2zV74msR7HsxAXMjY2ZM6AHlR+0kzWa9aCmvQ12Fur6tSfgJnaW5ryjbCdBMQm8tkaznczfc4yCwkJ+eKk/JkaVOBUcxty/D+s1lpWHlXV6uLJOh0bz+u/F2oqjZpvfd/kmdlbmvNHLG8fKiuVMXv99O8nKn8nmFxTw5tIdTOnXgR8nDMTCxISIpBRmbtjHyaAwvcSx64aijk1pr6xjCQmM27pN1VZcKxerY1ZW/DNaXcdebePJq2088Y2MZMSfijrWzNmZP158QZVmZtcuAGwNuMbH+/bpJY49gYo2/05nb5ysLAiKS2DiH+p6UjyOS3di+HD7HqZ09eH9ru0JS07hzT93civh2a9zvjtIMTa801nZf8UlMGFjkVhsisUSFcMHO/YwpYsP73dRxrJZM5YDN0L4bM8hJvm0YebzXQlNTubtrX9z8Y7uf0VTlK7L5X5hAW7Ojgxq0RhrM1Pi0zM4dTuCH46eJu8prNO54oii3X82TN3uJxdr9zWKjZH7LivK882einZ/PSqByUu3l7hx2+C2TYlLTef0Tf2eqN8VfAMHc3Peb9tesTxBQgJj/95KYvaDcaVyiXFl90ujVf9/zaMNr3m0wTcqkpe3q9dx7lCjFtUqV1YdPD8NFaX/emDT139hZmnGlN8mYWVrQcDJ60zr/YXGFdeu9Zyp7Kh5HxyPHs1wruXE3hUlx736HnVo1M4NgDXBP2n8bWSdN4gL1+1ScdduwJgp6l8cLfhZ8XxQr0LmT4OEJIgpclxb3VVxMvurn2DtVnBxgnkfQYe26jR9usHdFFi8QnFTykb14feFul+iRJsVRxVtfvZQ5fw+LJrJy0u2eY35/RXFvOWt571xtLbgenQCk5er23ze/fu0a1CTUcoT37Gp6RzwD+a3Q/pde7+izMF2B2mZ4//5iHP8ztrn+AB9GzfEwAD+DnzyKwwfKY7rN3GwMGdKB0UcgfEJjC8WR/Gx/v2/9/BeR/WxyuvbNONwsrJkerfOyiVbMtl+LZCfT+n/ng4V6Xhl101lLN6lxFLZmgI0xxWNWDw9ec1TGcsWRSwO5hYs6tkLJwtL0nNzuZGYwNjtWzkZob8vHv4JvoG9uTnvebXHSRnHmH/UY30168oa7cTZ0ordL6rH+kmt2jCplWKsf2mH5lhf3boyfz7Fsf7/xn/w+4J/c0Gok5OTxpLFpfH29iYlJYWLFy/SunVrAA4fPkxBQQFeXl6lbpeWlkbPnj0xNTVl586dmJmZPVoQxRgUFspXM+L/T+OZ3z3rLDyRwM/fUz1v8W75juXKD+pYGnxVvmO59Yk6lro/fPsMc/Jkbr+r/ia30azyXSZB89Rl0vz98h3L1W/VsdRbVH7rV8gH6vrVcF75LpMbs9Rl4vZF+Y7l5gx1LBWpXJp9UH5j8V+kjqPOT49+z5L/otC3PlA9L8/9F2j2Yc8ZDi8j5X/fgQL1yaaCWLdnmJMnY+iivjlt04/Lb5sHCPha3e4r0hyswfzyG8utaeo46i8ov3EABE+tGMcqoHm8Uvf7ch7LFHUstX8uv+N92JsfPDzR/6m2Y/57dfTc6vcfnugx9O7dm7i4OH799Vfy8vIYN24cnp6e/PHHHwBERUXRvXt31qxZQ9u2bUlLS+P5558nKyuL7du3Y2mpXl/eycmJSv9iuR+5glsIIYQQQgghhBBCCCHEY1u/fj1vvfUW3bt3x9DQkKFDh7J48WLV3/Py8rhx4wZZyl9O+Pn5cfas4tco9evX19hXaGgotWvXfuT3lhPc4j+hSZMmpd508rfffmPEiBFPOUdCCCGEEEIIIYQQQjw+g/+jdTPs7e1VV2trU7t2bY0ldLp06YKuFhaRE9ziP2H37t3k5Wm/67uzs/NTzo0QQgghhBBCCCGEEKI8kBPc4j+hVq1azzoLQgghhBBCCCGEEEKIckZOcAshhBBCCCGEEEIIIYSu/R8tUfIsGT7rDAghhBBCCCGEEEIIIYQQj0NOcAshhBBCCCGEEEIIIYQol2SJEiGEEEIIIYQQQgghhNAxA1mi5KmQK7iFEEIIIYQQQgghhBBClEtyglsIIYQQQgghhBBCCCFEuSRLlAghhBBCCCGEEEIIIYSuFcoaJU+DXMEthBBCCCGEEEIIIYQQolySE9xCCCGEEEIIIYQQQgghyiVZokQIIYQQQgghhBBCCCF0zEBWKHkq5ApuIYQQQgghhBBCCCGEEOWSQWGhrHYuhBBCCCGEEEIIIYQQuuT9yqJnnYUSzvzxwbPOgs7JEiVCCCGEEEIIIYQQQgiha3JZ8VMhS5QIIYQQQgghhBBCCCGEKJfkCm7xf6nRp9896yw8kaC576mee7/83/u5y79xZoP6pzH1vv32GebkyYW8/77qeb1NXzzDnDyZkBdnqJ43mVq+28q1Beq20mngwmeYkyd3/K+PVM9rrfj6GebkyYSP/1j13O3z8l2/bs5U16/6C8t3/xX8kbr/avBV+S6XW5+oy6X1q+U3lotL1XHUWT//GebkyYWOmKZ6XvuXb55hTp5c2Bsfqp73tBrzDHPy5PZlrFY9b/px+W0rAV+r20pBrNszzMmTM3S5qXre5JPyWyYA175Sl0ujWeU3lqB56jhmXB3yDHPy5L5ovk31vPbP5fsYMuxN9TFkreXld14MED5BPTeus678jvehI6c9PNH/KYOCZ52D/w9yBbcQQgghhBBCCCGEEEKIcklOcAshhBBCCCGEEEIIIYQol2SJEiGEEEIIIYQQQgghhNA1ucnkUyFXcAshhBBCCCGEEEIIIYQol+QEtxBCCCGEEEIIIYQQQohySZYoEUIIIYQQQgghhBBCCB0zkCVKngq5glsIIYQQQgghhBBCCCFEuSQnuIUQQgghhBBCCCGEEEKUS7JEiRBCCCGEEEIIIYQQQuhaoaxR8jTIFdxCCCGEEEIIIYQQQgghyiU5wS2EEEIIIYQQQgghhBCiXJIT3AIDAwN27NjxrLMhhBBCCCGEEEIIIUSFYVD433tURLIGdwUzduxYVq9eXeL1nj17snfv3meQoyc3b948fvnlF65du4a9vb3q9StXrtC2bVu2bt1Kv3799Pb+r7Rtwfj2rXG0suR6XAJf7DqCf1Rcqel7NmnAO918qGZbmfDkFBbtP8HxW2Gqvz/XqD4vtmlOk6pVsLUwZ/Av67gem6C3/Bf36jAfBnRrhrWlKVdvRPP1ioPciU0pNf3ogW3p3KYBtarak5Obj//NaH7ZcJyImLuqND/PegGPxjU0ttt+8ApfLz+orzAY2aIFr3p64mRpSVBCAnOOHOFqbKzWtA0cHJji40PTKlWobmPDvCNHWHXpkkaayW3a0LNBA+ra25OTn49fdDQLTpwg9O5drfvUWRz1W/OqezuczKwISoljjt9+riZHa037fLWGvNG4PbWs7DAyNCQs/S7Lb/iyIzxAI80r9T1oaueCnakF/fYtIyil9Pqqa289582wts2wNjflUlg0c7cfIiIppcxtXvZuwbhOrXG0tuRGTAJf/nUE/zva8/zr+EF0bFiHt1fv5HBgiB4iUBv/Snv6P9ccK0tT/K9H8+2S/dyJSSk1/cBeLRnUuyUuVSoDEBqRxOpNpznrF6pK0//55vTo1Ai3es5YWpjS55XFZGTm6DWO0Y1a8VrTtjiZWxJ0N57PzhzkSqL2tvKSW3OG1m9CQzsnAPyTYvn6wnGN9FNatad/HXeqWlqTV1CAf1IsCy+e4HJCjF7jGNG6BRO8W+Ok7Ivn7TvC1ejS63avRg2Y0lnRF4clp/DNoRMcCwlT/f2r/s8zpEUTjW2Oh4QxccN2fYWgMrJVCya2UfZf8QnMPVR2//VuBx+aOiv6r88PH2HVxUsl0v2bferSCI8WTPRqjZOlJdfjE5h74AhXY8ool4YNmNLJh+o2inJZePQEx26Hqf5uYWzMh1068FyDetiam3MnNZU1Fy6z4fJVvccCMHmAN4M7NsPKwpQrwdHMX3+IyPiUUtO3alCN0T09aVSrCk62Vnzw806OXtbsmy4ufU/rtt9vPs7a/Rd1mX0ARrl58FojL5zMrQi6G8/sC/u5kqS9fb5UrwVD6jbDzcYRAP/kWL65ckwjvaOZBVNbdqWjax0qm5hxLj6S2Rf2E5au3/ERYFTTlkxq2QYnC0uCkhL47MQhrsSX0lbsHHi/bXuaOTlTvbINc08eZsVVP400hgYGTGnjw2C3xjhZWBCXmcmW6wH8eNFX77EAjJ45mF5ju2BlY0Gg7y0WT1lNdEjZY7SDqx0T5r1Am+eaY2phQvTtOBZNXsatS2GqNDUaujJh7os079CQSkaVCL8exbwRP5JwJ1lvsbz5vOZ4P2/7ISISU8rc5iXvFozrrDneB0Sq4185aRht6mnOJ//0vcrcbYd0nv/zV2DFBrh2ExKSDPjx80J6dCx7m3OX4KufITgMXKvA5FEwuLdmmvXbYcVGSEwG93ow411o3kjn2dfqree8GdamyBxsxyPMwdopy8RKWSY7y5iDjVPOwdbofw72djdvhns2w9rMlEsR0czZeYjw5JQyt3mlbQvGd1Aes8WWPGYzMarE1F6d6NOsIcaVKnEqOJy5fx8mKTNLLzEE703i5s4k7qXkY1PLjFbjXbBvYFFq+tzM+1zbEEfU2XRyM+5j4WRMi7EuuHpYq9JkJ+Xhvz6O2EsZ5OcUYOVigueb1bCvZ66XGB4Y1bQlk1p5qvvi44dL74vtHXi/rY+6Lz5xpJS+2JvBDYv2xdf48YL+++LRjVrxWjPlvDj5IfPihsXmxYma82IjA0M+9OxI1+p1qWltQ3puLiejw/jqwnHiszL0GscoNw9ea1xkrD9fxlhfX8tYf1lzrLcwMmZqq648V70BdqbmRGaksurGBf64VXLOKcR/lVzBXQH16tWLmJgYjceGDRuedbYe27Rp06hRowZvvvmm6rW8vDzGjBnDyJEj9Xpyu3dTN6b26sTPR30Z+ut6bsQmsnT0EOwttU8iWtZw5ZthfdjqF8CQJes5FBTMjy8PoEEVB1UacxNj/CKiWLT/pN7yXZqR/dswvFcrvl5+kAmz/iA7J4/vPxmKiXGlUrdp1ag6W/df5tVP/+DdL7dgZGTI99OGYWaq+f3YjkNX6Tt5ierx0x/H9RZHXzc3pnfuzGJfXwasW8f1hARWDRmCg7n2cjEzMiIyNZWFJ08Sn6F9suFVowbrLl9m2IYNjN6yBSNDQ1YPHYq5kf6+B+xboxHTW/Zg8bUTDNi/nOsp8azq/BIOptonv6m52fwSeIphB1fRd+9StoZeYUHb/nR0qatKY2FkzIWESL6+ekRv+S7NhM6ejGjfkjnbD/LyTxvIzs3j9wlDMDEqvX71au7Gx/068cshX4YvXs+NmER+m6C9jY3u0Oqp3Z/jlSFtGdrXg0VLDjDpo/Xcu5fLN7OHl9lWEpLS+W3NMV59fw2vfrAWP/9wvpw+mNo11O3fzNSYc5dCWbfl6ZxM6VfHnZltu/LD5VP027maoOQE1vZ8AQcz7XXM27UmO28H8dKejQz+Zx3RGems7fkCzhZWqjShqcl86nuQ53esZOiu9dxJT2NtzxewN9PfwVWfxm5Me64TP53wZdCy9VyPS2T5y0Owt9D+nq2qu/Lt4D5svhzAoKXrOXgjmJ9fGEADJweNdMeDQ/H57jfV4/3tu/UWgyqWhm5M79KZH0/7MnCNov9aObz0WMyMjYhMSWXh8dL7r3+7T13p4+7G9G6d+OmkL4NWricoPpEVL5ZRLtVc+W5gH7ZcCWDgyvUcvBXML0MH0MBRXS7TunemU93afPDPXnotW82q85f49PmudKtfV+s+dWlML09e6t6SL9cdZMyXij7spyll92HmpsbcvJPAgj8Ol5rm+Q9+03jMXrmPgoJCDvsF6zyGvrUaMcOjOz/4n6Tf7hUE3Y1jddcXSx1XvJxrsTMskJcP/cGQ/WuIyUpnTbeXcDZXt/nfOg2jprUtrx3bSr/dK4jKTGVd95cxr2Ss8/wX1a9+Q2a278IPF87Qd/NaAhPjWdNvGA7m2mMxNzYmIi2VBb7Hic/U3lYmt2rLyCYt+PTEIXpsWMlXZ44zqVVbxjZrpc9QAHjhvT4MnPwcP767ine7zOVeZg5f7vgQY9PSP0crWwu+PTiD+3n3mTlkEa96TuP3aRvJSFGfkHOtU4Vv988k8mY0H/Wez+R2M/ljwU5yc/L0Fsv4Lorxfu62g7zyo6Kt/Paw8b6FGx/378SSg74M/6H08X7zWX86z/1N9Vi064ReYsjOhob1YdaUR0t/JwYmfwJerWD7Mhg9DGYthJPn1Gl2H4YFP8ObY2DrUmhYD179EJL0/12QYg7m05I5Ow7y8s8byM7L4/fxjzgHO+jL8B//O3OwiR09GdmuJbN3HuTF3zaQlZvH0jFlx9K7qRtTe3fi5yO+DF2iPGYboxnLtN6d6dKwLlM27mL0is1UsbZk8cv99RJD5KlUrq6Oo/FwJ3osqIttLTNOfBHOvdR8rekL8go4MS+MzPg82n1Qg54/1Kf1pKqY26v7h9yM+xyZFYpBJQM6TK9Jz+/q03yMCyaWpX8uutCvfkNmdujMD+fP0PfPtQQmJrCm/9BSj7vMjYwUffGZE6X3xR5tGNm0JZ8eP0SPP1Yp++I2jG2u3764Xx13Znp15YdLp+j3l3Je3KuMebGLcl68eyOD/15HdGY6a3up58XmRkY0dXBm8eXT9P1rDZMObaeujT3LewzRaxx9azViRuvu/HC1yFjf7RHG+oN/MGSfcqzvrjnWz2zdnU5V6/Le6b/p8fdSVl4/z5w2z9Ojen29xiKELskJ7grI1NQUFxcXjYednR0At27dolOnTpiZmdG4cWMOHDhQYvvIyEheeOEFbG1tsbe3Z+DAgYSFhan+PnbsWAYNGsSXX36Js7Mztra2zJ07l/z8fD766CPs7e2pXr06K1eu1Njv1KlTcXNzw8LCgrp16zJr1izy8h4++TYyMmLNmjXs2LGDLVu2APDFF1+QkpLCd9999wSf1MON8fFg88UAtl8KJCQhmdl/H+ReXj5DPJpqTT+6XStOBoex4tRFbicms/jwGYJi4nnFq6Uqzc4rQfxy9Cynb0foNe/avNjbg1Xbz3LiYgghEYnM/WUPjnZWdPIsfeB676tt7D5+jdA7SQRHJPD5kr24OlXGvY6zRrqc3DySU7NUj6zsXL3FMb51azYFBLD12jWCk5OZefAg2fn5DGuqvVz84+L46vhx/rlxg9z797WmGbdtG1sDA7mVlMT1xEQ+3rePapUr09TZWWt6ncTR0ItNty+zNfQqwWmJzLywWxFHnRZa059NiGB/1A1C0pOIyExh1a3zXE+Nx9NRfbXTjvAAfgo8yanYUK370KdRHTz47fA5jgTe5mZsItP+3EuVypZ0b1Kv1G3GdPRgy7kAdlwIJCQ+mTnblW2sjWZZurs6MaZTa2Zt3q/vMAAY3r81azf7cvJcMLfDE/ji+9042FvRoV2DUrc5fT4E34uh3IlJ4U70XZatO0n2vVyaNKyqSrP574us33qOazf0e7XzAxOberLxxlU23wrgVkoS00/tIzs/jxfcmmlN/+6xf1h7/TKByfGEpCYz9dReDA0MaF+1lirNX7eDOBUdTmR6KrdSkph37jCVTUxppLy6RR/GeXnw56UAtl0JJCQxmU93K+rJsJba2/yYNq04ERLGct+LhCQl88OxMwTGxDPSs6VGutz790nMzFI90u7p92p6gPGerdl0NYCtAdcITkpm1v6DZOflM7y0/is2jgXHjrPreun917/dp66Mb+vBpisBbPUPJDgpmU/3Kt53WPNSysWzFSduh7HsnKJcvj9xhsDYeEa1bqlK41HNle3+gZyLuENUahqbrvhzPT6BFq4ueo0F4JXuHizfdY5jV24THJXIZyv24mRrSZdWpfdhpwPCWLLjNEculX41Y1JalsajS8t6XLgRSVRiqs5jmOjelk3BV9hy25/gtCRmnNtL9v18htdrrjX9e6d3su6WH0F347mdlswnZ3djYGBAe5faANSxtsfDqRozz+3janIMt9OTmXluL6aVjBhQu7HO868RSwtPNgb6s/l6AMF3k5hx7ICi/3LXXr+uxscy/8wx/g4uva20dqnKgbAQjoTf5k56Gntu3+REZBgtnF31GQoAg97syYav/+bMrkuEXovk69d+x8HVFp/+HqVu88J7fUmMSmbR68u4cfE2ceGJ+B0OICY0XpVm7GdDObf/Cstn/UnI1QhiQuPx3X2J1IR0vcUyqoMHvx9Sj/fTNz18vB/d0YMtZxXj/e34ZOZuU/Tjg4uN9/dy80jKyFI9MnP0M5/s1A6mTITnOj1a+o1/QTVXmPom1KsNI4bA851h9WZ1mtV/wvB+MKQP1K8Nsz8AMzPYpv/vThnVvtgc7EGZNC5jDtZBOQe7qJyD7TjIvdx8hnhqmYN1bM2sLU9nDjba24Nfj53j8PXb3IxL5JOte6libUmPRmXE4uPB5gulH7NZmZowxKMpC/Ye52xoJIHR8Uzfvh+PWlVpUV3348vNf5Ko092O2l3tqFzDDI/XXKlkYkjYYe3fdoQeSSE34z4+H9fE0d0CyyomODWxxLa2mSrNjR2JmDsY0+bNatg3sMDS2QSXFlZYuZjoPP9FTWzZmo3X/Nl8/RrBd5OZcVTZFzfSPpe8Gh/H/NPHH94XhwZzJDxU0ReH3FL0xVX0O9Y/1rw4qMi8+KTmvDg9L5eRe/9kV+gNbqcmcykhhk/PHKS5kwtVLa217lMncTQqMtanJjHjrHKsr1/KWH9qJ+tuFhnrfXdjgHqsB/Bwqs622/6cjYsgKjOVDcGXCbobRwuHqlr3Kf6lwv/gowKSE9z/RwoKChgyZAgmJiacPXuWX3/9lalTp2qkycvLo2fPnlhbW3PixAlOnTqFlZUVvXr1IjdXPcE8fPgw0dHRHD9+nG+//ZbPPvuMfv36YWdnx9mzZ5k8eTKTJk3izp07qm2sra1ZtWoVgYGB/PDDDyxduvSRT1C7u7szf/58Xn/9dfbt28f8+fNZuXIllStX1s2Ho4VxJUOauDpzJkR9IrqwEM6ERNCyuvYDoRY1XDlT7MT1yeBwWtbQ/4HTw1StYoOjnRXnA8JVr2Vm5xIYEkPTBo8+cFlZmAKQlnFP4/Xn2zdiz+9vsO7rMbz+UgdMTfRz5bOxoSFNnZ05Ha6OoxA4HR5OK1fdfc7Wpoo4U+/de0jKx2NsaEhTO1dOx6lPRBcCp+NCaeVY/ZH24VOlNnWt7TmX8PS/LCmuur0NTpUt8b2lzkvGvVyuRsbSoqb2+mVcyZDG1Zw5c0uzjfkGR9CiproszYyN+Prl3ny+4zCJGfr5GWlRrs42ONhbceFKkbaSlUvQzRiaNny0tmJoaEC3ju6YmRkTcEP7kjP6ZmxoSDMHF05Gh6leKwRORofj4fRocZhXMsbY0JCUHO3twNjQkFcatiA15x6ByfpZasnYUNEXnw4tUk+A02ERtKymvc23rO6qkR7g5O1wWhXru9vWqs6Z9yax9/UxzO7dDVtzM/TJ2NCQpi7OnNLWf1V9vP5LH/t81Pdt4uLM6bCS5dKqlHJpVdVVIz3AidBwjXL0i4qhW4O6OFtZAuBVszq17ew4GRaOPlVztMHR1pKzQUX6sOxcAm7H0ryu7g7u7K0t6NCsDn+dDHh44n/J2NCQpvYunIzVHFdOxYbh4VjtkfZhXskYYwNDUnIVbd6kkuLKwJz76qsOC1F8OeTp9Ghj1eMwNjSkqZMzp+5o1utTdyLwcHn88rgYG037ajWpY6O48KORgxOertU4Gq7fL4Vdajvh4GKL35Frqtey0rK5fuE2jdqWfpFBu76tuOkXxoy1b7Ip9Ed+PjWX3mM7q/5uYGBA254tiAqO5YsdH7Ip9Ed+OPIp3v1KP2n+pB6M92e0jfe1tJeNkXK89w0uNt7fiqBFLc3+om8rd058Npnt749iSq/2mBn/N1bUvHwNvFtrvtahjeJ1gNw8xXInRdMYGir+f/kaeqWagxX5fDNyyi4T1RyseJkEa5aJmbERX7/Um8//ejpzsOp2NjhZW2ocf2Xk5HL1TiwtapQeS5OqzhrHYKpjNuUxWJOqzpgYVdLYb2jiXaJT0nR+nFaQV0DK7WyqNLdUvWZgaIBzc0uSbmZr3SbmQjoObhZcWhbD3xOvs//9YIK2JVB4X30WKvpCOnb1zDizKJK/J1zn4Ech3D6ov2WIoGhfrDnWK/rix//cLsZG0766lr44Qn99sbGhIc0cS5kXV3nEebFR2fNiAGsTUwoKC0nL1c9FE6qxPqbYWB/zL8d6Q/VYD+CXcIfu1Ruorupu51yTOpXtORGj3/FRCF36b8wYhE79888/WFlZabw2ffp0PD09uX79Ovv27aNqVUUn/uWXX9K7t3rxuE2bNlFQUMCyZcswMDAAYOXKldja2nL06FGef/55AOzt7Vm8eDGGhoY0bNiQr7/+mqysLKZPnw4olhX56quvOHnyJC+99BIAM2fOVL1P7dq1+fDDD9m4cSMff/zxI8X17rvv8tdff9GnTx/efvttunbt+pif0KOxtTDHqJJhiXXZkjKzqONkp3UbRyvLEpO/pIxMHK1KX2/taXGwUUyyklM185ecmoWDraW2TUowMIApo7tw5XoUt+8kqV7ffyqI2MQ0Eu9mUq+mI2++3ImarvZM+26n7gJQsjM3x8jQkMQszTgSs7KoW2SN9idhAMzs0oULUVHcTEp6aPrHYWdioYjjXqbG64n3Mqlb2aGUrcDK2JTT/d/BpFIlCgoL+fTiXk7FPfuJh6O1oo6XrP9Zqr8Vp2pjxbdJ12xjU/t35lJ4NEcCb+s419o52Cnaw90UzbJJTsnE3q7stlK3liO/LBiBiYkR2dm5zJy/g/BI/dShh7EzVdax7GJtJTuTeraP1lamtelMXFYGp4ocDAB0q1GPn7r0x9zImPisDEbu+5O7OdoP2p6UnYWyzRfrixMzsqjrUEZfXDx9ZiaOluq6eCIkjP3Xg7mTkkpNO1ve79qeZS8N5oVVGynQ0++wH/RfSTrsv/Sxz0d631LKJSkzi3r/slycipTLvANHmNerByffeo28+/cpLCxkxt6DnI+M0n0QRTjYKPKQnFZsjEzPUv1NF/r5NCYzJ08vy5Oo2vy9Yp/xvUzqlTGuFDW1VVfisjNUB84hqUlEZabyccsuTD+3l+z8XMa7t6WqZWWqmFs9ZG+Pz87swViv2Q8nZGdSz+7x6/USv7NYm5hw6JXx3C8ooJKhId+cPcFft4KeNMtlsne2ASAlXvOq/ZT4NNXftHGt7US/iV3Z9uM+Ni78G7fWdXl94UjycvM5+McpbJ0qY2Ftzovv92PV3K0sn/Unns8149M/3ubjPl/hf/KGzmN5MKZrG7tLG+/tLJXjfXrJOUKdKur+YtflG0TfTSMhLQM3Vyfe692B2k52TFn7j46j+PcSk8GxWNfmYA8ZmQbcyykkLR3u3zfAwU5z/HCwg1A9X4fw4DhD6xyslGOQUudgGcXmYP06cyni6c3BHuS3eL4SM7NwepxYlIXmaG1Bbn4+6cV+qZWYkYWj9aMdBz2qnPT7FBaAmY3mqRZTGyPSorR/SZAZl0t8QB41O9jQYVotMmJzubQshsL7hTQeXkWRJj6X2/tzadDPAfchjtwNzubyilgMjQyp3cVWpzE8UGpfnJX1ZH3xxXNYG5tyaMQ4dV/se5K/bl5/0iyXys6sjHmxzZPNix8wrVSJaW06szMkiIw8/fz6pMyx3ubxxnqA2ecP8KVXb3yHvk1ewX0KCguZ7ruHc/GROs2/EPokJ7groK5du7JkyRKN1+zt7Vm7di01atRQndwG8Pb21kh35coVgoODsbbW/EnNvXv3CAlR//y2SZMmGBqqfwDg7OxM0yI/ha5UqRIODg7Ex6t/Qrlp0yYWL15MSEgIGRkZ5Ofn/6srsA0MDJgxYwZHjx7VOFlempycHHJyNCcxpqammCqvzK3onm/vztSJz6n+/+HXT37jtA/HdaduDUcmzd6o8fpfh/1Vz0MiE0lKyeSnmS9QrYoNUfG6/wm2vs3p3h03Bwde3LTpWWelhMy8HPrvX4aFkQk+zrWZ0bIHkRl3OfuUr+Lu29Kd2UO6q/7/+sodenmfro3q4lWvBsN+WK+X/QM817kRH7z+vOr/U+dtfex9RUQlM2HKaiwtTeni48b0d/vw9oyNz+wk95N4vbkX/eu68+LujeQU+4npmZgIeu9Yhb2ZOS83bMEvXQcw8O91JN3T/9VdurIr8Kbq+c2EJG7EJ3LorfF41arOmTCZzD8ro1q3pGVVFyZt+Yuo1DTa1KjGZ891Iz49k9Phuuvnenu5M32kug9798cdOtt3WQa2b8Kes0Hk5mv/2fazNLlxO/rXasTLB9eTW6DIX35hAZOPb2OBVx+uDH+P/IICTsWGcSQqBOV1EOVKv/oNGejWiHcP/MPN5CQaO1bh0w5dicvMZOsN3V1m2/UFb95dPFb1/1nDvn2s/RgYGnLLL5SVcxRL9IVcjaB242r0ndCNg3+cwsBQUQhndvmx/ed9ANz2j6CxVwP6TuimkxPcfVu581mR8f4NPY33AFvOqueTt2KTSEjLZMWkYdSwtyEyufzNJ/Wlb0t3Zg8uMgdbtUMv76Oagy3W3xysX3N3Zg8oEsu6HXp7r/+ywkIwrWxE60lVMahkgF09c7KT87i5M0l1gruwAOzqmdHsFcXyiXZ1zEmLzOH2/mS9neDWF1VfvH+Xsi924tOOXYnLzGDrjcBnnT2tVPPiXSXnxaC44eTPXQdigAEzTj+d5Xwex+Qm7ehfuxEvH1CP9QBjGramlVNVJh7ZTFRmKm2r1GRO2+eJy87gVGzYs8twBWFQQZcE+a+RE9wVkKWlJfXrP97NADIyMmjdujXr15ecyDg5qddXNTbWvCGOgYGB1tcKCgoAOHPmDCNGjGDOnDn07NkTGxsbNm7cyKJFi/5V/oyUN/wzeoQb/82fP585c+ZovPbZZ58xe/bsR3qvlKxs8u8X4GCpebWAg6UFienaT+Ikarla20HLVd1Pw8mLIQQGq+8Ibay8OZ69jQVJRa5Mtbex4GbYw5cW+GBsN9p71OP1ORtJSC77rtDXghXrC1d3sdX5Ce672dnkFxTgaKH5OTtaWJCQmVnKVo/us27d6Fa3Li9t2kRsKTd004W7uVmKOMw0rxpxNLMk4V7pcRQC4RmK9fuCUuKoV9mRyY18nvoJ7iOBIfhHqteRNla2SUcrCxLT1fl3sLLgerT2+qVqY8XbjLW6jXnVr0ENe1vOzH5DI833o/pxMTSKcb9veeJYTp4LJrDImtgP2oqdrSVJd4u0FVtLgouse6pNfn4BUbEpANwMicO9gSvD+7XmmyVPf6J7N0dZx4rdkM3R3JKErLLbymtN2/B6My9G7P2T63dLll92fh7h6SmEp6dwKSGGo0Nf5UW3Zvxy9axOYwC4m6Vs88X6YkcrCxJK6VsTMzJLprcsefVwUZEpqSRnZlHT3lZvJ7gf9F8OWvqvxMfsv/Sxz0d631LKxcHSgoRSPufSyuVBelOjSrzfuT1vbvuboyGKq4puJCTSyNmJCV6tdXqC+9jlEPxvq9u9iXIZBPvKFiSmFmn31hbcjNTN8jstG1Sjtqs9n/y+Syf7K07V5ovdLMvRzJKE7LLHs1cbteX1Jt6MPLSB6yma8QYkx9J3zwqsjU0xNjQkOSeb7T3H4J+sv3sJ3L33YKzXHCOdHqH/Kss0n84s8TvH38GKE783khOpZl2ZNzza6vQEt+/uS9y4oL4w5MGNJG2r2JAcp54X2VapTMjV0ut1cmwK4dc1l7mKvBFDh4FtAEhLSic/L19LmmiaeLs9cRygGO+vRhRpK8rx3qH4eG9twY1Sxvu7mcrx3rr4HLn0OTWAv/J9azjaPvMT3I72kFhs+eSkZLCyLMTMVLEcSaVKhSVuKJl0V7GtLpWYg1UqYw4W8y/nYFYWquMWr3rKOdhnxeZgI/txMUw3c7DD10O4ekd7/UrIUMfiaGlBUOzjx5KYnoWJkRHWZqYaV3EX/8x0wdS6EgaGlLihZE5qPma22o9hzWyNMDQywKCS+ptD6+qm3EvJpyCvAENjQ8ztjKhcXfNCLetqptzxTdNp/osqtS+2sNBPX9zaS28nuO/eK2NenP0I8+Lmpc+LjQwM+bnbAKpZVeblPRv1dvU26GisP6g51ptWMuLDll2YfHwrR6IUY9f1lAQa21fh1cZecoJblBuyBvf/kUaNGhEZGUlMjHoS4evrq5HGw8ODW7duUaVKFerXr6/xsLEp/SeUD3P69Glq1arFjBkz8PT0pEGDBoSH63c9zWnTppGamqrxmDZt2iNvn3e/gGsxcbSrq76Bn4EBtKtbg8t3tB/UXYmMoV3dmhqv+dSryeXIp3NDuaKy7uVxJy5F9Qi9k0Ti3Qw8m6rzZ2FuQuN6rgTcKnuN4A/GdqNzm/q89fmfxCQ8fBLlVktxpUFiiu5PruQVFBAQF4dPTXUcBoB3zZpcinmyz/mzbt14vn59Rm7ezJ00/U0WQRnH3Rh8nGurXjMAvJ1rcynxTqnbFWeIASaVnv53lVm5eUQkpaoeIXGKK6286qvbi6WpCc1ruHAlQnv9yrtfQGBUHO3qa7Yxr/o1uKI8qF125DyDv1/L0B/WqR4AC/4+xkwd3XAyOzuPqNgU1SMsMomk5AxaN9dsK404Ffk+AAEAAElEQVTcXP/1etqGBuoT5k9bXkEB/kmxGjeINADaV62FX0LpcUxq1pa3W/owZv9m/JNiS01XlKEBequHeQWKvti7TpF6AnjXrsHlKO1t/vKdGLxrF+uL69TkUil9N4CztRW2FuYk6PhAt6i8ggICYuPwqaXZf/nUqsml6Mfrv/Sxz0d932uxcXjX1iwXn1o1uFRKuVyKLlku7WvXVJWjsWEl1fJLRRUUFGKo48uFs3LyuJOQqnrcjk4iMSWTtu5F+jAzE5rWdeHqbd2soz+oQxMCw+K4dSdRJ/srLq+ggIDkWI2bRhkAPi618EssfYmXSY29eKtpe8Yc3oR/cultPj0vh+ScbGpb29HM3oUDkbd0mHtNeQUFBCTE4VOtWL2uXhO/2McvD3MjYwqL16/CAtWyfLqSnXGP6Nvxqkd4UBRJsSm06qK+MaeFtRnunnUJOlf6cjWBvreo4aZ507Vq9V2Ij1DUofy8+9y8GEr1BsXSNHAhPlI39SwrJ4/IpFTV48F4366BlvE+XHvZ5CvHey9t43146f2Ue1XlfDJNf/3yo2rZBHwvar52+oLidQATY2jippmmoAB8/dRpdKXEHCy+jDlYKWVS5hxMWSbLjp5n8A9rGbp4neoBsOAf3c3BsnLziEhOVT2C45NISM/UOP6yNDWheXUXrkSWHsu16FKO2ZTHYNei48jNv6+RprajHVVtK+v8OM3Q2BDbuubE+6vrbWFBIfH+mTi4mWvdxsHdgozYXAoL1P1TRnQuZnZGGBorTtk4NLQgPVrzxGl6TA4WTpoXmemSqi+urq0vfvzPzdzYSEtfXKjXXwblFRTgnxhLe1ct8+L4h8yLW/kwZt9m/BNLjpEPTm7XsbFjxN5NZa7PrQtPNNY30z7WGxsaap1/3S8sxJBy+HMt8X9LruCugHJycoiN1ey0jIyM6NGjB25ubowZM4aFCxeSlpbGjBkzNNKNGDGChQsXMnDgQObOnUv16tUJDw9n27ZtfPzxx1Sv/ng3FGrQoAERERFs3LiRNm3asGvXLrZvf/IlM8qii+VIVp/2Y/7gngREx+N/J5bR3q0wNzFmu5/iKp+vhvQkLi2D7w6eAmCN7yXWjB/OWB8Pjt0MpU+zhjSp6sxnOw+q9mljboqrTWWqKNd7e7A2XGJGpt6v9N60x4+xg9oRGZtCTHwqrw5vT+LdDI5fUB9c/ThjGMfOB7Nl/2UAPhzfned93Jm66C+ysnOxV65FmpmVS05ePtWq2PB8+0acvnyb1PR71K/lxLujunApKJKQCP0cxK+4eJGFvXrhHxfHldhYxnl4YGFszJZrinL5plcvYjMy+ObkSUAxaNd3UKxJZlypEi7W1jRyciIrL4/wlBQA5nTrxgB3dybt3ElGbq7qCvH03Fxy8vNLZkIXcdw4y0KvAfgnx3AlKZpxDdtiYWTMltCriji8+hOblc43/kcBmNzIB//kGCIy7mJiWIkuVeszqHZTPr24V7VPGxMzqlrYqG4QUtdacdlQwr2MEut969rak35M6uZFRGIKd+6m8vbzPsSnZXLomvoqtuWvDuVQQDB/nLkCwOoTfnz5Qk+u3VG0sVEdWmFubMz2C4qyTMzI0touYlLSibqrvy8hNv99kdEveHMn5i4xcalMeKUDSckZnPRVn9D5bu4LnPC9xbbdlwB4bVRHzl4MJS4xDQtzE3p0akTLpjX5cPZm1Tb2tpbY21lSzdUWUKzZnZWdR1xCGukZup8QLwu4wKKOfbiaGMuVhBjGN/HEwsiYzTcVPwP/tlMfYjMz+PricQAmN2vL+x4dePfoP9zJSMPJXNFPZeblkpWfh7mRMW+1aMfBiGDiszKxMzNnTKNWOFtYsytUf+smrjzrx4IBPQmIiedqVCxjvBT1ZOsVRT35ekBP4tIzWHRE0RevPn+JdaOGM97Lg6PBofRt0pCmVZ2ZtVvRF1sYG/NWp3bsu36LxIwsatrZ8FH3joQnp3Ditn6/fF1x4SIL+/TCPzaOqzGxjPX0wNzYmC0BilgW9ulFXHoG35wo0n85qvsvZytrGlVxIitX3X89bJ96i+WcH1/3U5ZLTCxjPRVj5NarynLppyyXY8pyuXCJ9a8MZ3xbZbk0bkhTV2dm7lWUS0ZuLmcjIpnatSP38vOJTk2jbc3qDGramPmHj+k1FoA/Dvkxoa8XEfEpRCem8vpAHxJSMjl6Sd2HLXl/KEcuBfPnEUUfZm5qTI0qtqq/V3WsjFsNJ9Iy7xGbnK563dLMhB6t3fhu83G9xrDs+jkWeffjalIsV5KiGe/eBotKxmy5rRhXFnn3IzY7nYWXFZ/npMbteK95R6ac2smdzFTVr4qy8hVtHqBPTXeS7mURnZWGu60Tn7buwf47NzkRq9/7Pyy7coFF3XrjnxDH5fgYJjRvrei/ritu0Lmoe2/iMjP42vcEoGgrDeyKtBVLaxo7OJGZl0d4WgoAh8JCeLN1O6Iy0rmVnEgTxypMaOHJ5iDd3/SzuB0/7+PljwcQFRJHbHgCY2YOISkmhdN/+6nSfPXPx5z+24+dvynaxLaf9vHdoZm89GE/jm87R8PWdekzrgvfv71Stc3mH/YwffUbBJy6wZXjQXg+15x2vVvyUe/5eotl7Uk/XuvmRXhiClHJqbylZbxf9upQDl0LZsNpRVtZc8KPL5TjfUBkLCM7KPqLHcrxvoa9DX1auXPieigpWfdwc3Vkav/OnL99h5uxup9PZmZBRJFzQXdiIOgW2FSGqs7w7e8QlwALlIdKLw2EP7bDwiUwtI/ixPXeo/DrV+p9jHkBps2Hpu7QzB3WbIHsbBjcG71be6rIHCy5yBwssMgcbKKiTFRzsJN+fDlcOQeLVM7BTIzZfvHZzsHWnPFjchcvwpMV88l3uvsQn57JwSB1LCvGDuVgUDB/nFXGctqP+UN6EhAVj39UyWO2jJxctvkF8EnvzqRm3yMjJ5eZfbtyKSKaK3ce7cv8f8OtnwPnf47Crp459vXNubUrifycAmp3VRz3nfvxDub2xjQboVhupN7z9oTsTebyyljq97YnIyaX69sTqN9bvaZyg34OHJl5m6BtCdTwrkxycDahB+/SepLuboSszbLLF1nUvRf+8bFcjo9lQgsPRV8c9KAv7qXsi9Xzlgb2RectVjR2VPbFqSkAHAoN4U1PL6Iy0riVnKToi1u21ntfvCzgAos6FZkXN9UyL87K4OsLynlx87LnxUYGhizpPpCmDs6MP7CVSgaGqjQpOdnkKX/NrvM4gs6xyKcfV5NjuZIYzfhGbRTHkCHKsd6nH7FZxcb6Fh2ZcnIndzJKjvUZebn4xoUzzaMb9+7nE5WRipdzTYbUacrnFw/pJYb/O3q6v4/QJCe4K6C9e/fi6qp5V+OGDRty/fp1tm/fzoQJE2jbti21a9dm8eLF9OrVS5XOwsKC48ePM3XqVIYMGUJ6ejrVqlWje/fu/2q97OIGDBjAe++9x1tvvUVOTg59+/Zl1qxZj7xcyLOyJ+AmdhbmvNPNG0crxU/jXlu7XXXjSVcba41vOi9HxvDRlj28292H93q0Jzwphbc37ORWvHr93a4N6zF/SE/V/799oS8APx05w89HNK+o17V1f5/H3NSYTyY+h5WFKVdvRPHeV9vIzVOvv1XN2RYba/XVBUOfawnAL5++qLGveUv2svv4NfLyC2jTrCYv9vbAzNSY+KR0jp67xcrt+otl182b2FtYMMXHB0cLC4ISEhi3bZvqJmuu1prlUsXKin9GjVL9/1VPT1719MQ3MpIRmxUnH0e2VMS54YUXNN7r47172Rqon5/K7YoMwt7UkilNO+NoZklQShzjjm0kKUdxItrVwkYjDotKxsxt3QsXc2vu3c/ndnoSH/j+xa5I9c2xelR142uv/qr/L/YZAsAPAcdZfO2EXuJ4YPmxC5ibGDN7aA+szUzxC4tm0optGmvN1rC3wdZSXb/2Xr2JvaU5bz3vjaO1YjmTSSu2l7hR0NP2x7ZzmJkZ8+EbPbGyNMU/KIoP52zRaCtVXWyxqayOxc7GgulT+uBgb0lmZg4h4Yl8OHszF66oT5gO7NWCcS+3V/3/p/mvAPDlD7vZe1j3JyP/Cb2Og5k573t0wMncksDkeEbv36y6MU1Vy8oadWykeytMKxnxa/dBGvv57tIpvr90ioLCAurbODCsW1PszMxJybnHlYQYhu/+g1sp+ltnfHfgTewtzHmnszdOlhYExSUwYUPpffGlOzF8sGMPU7r48H7X9oQlp/Dmnzu5laDI4/3CAhpWcWRw88ZYm5kSn57BqdsRfH/sNHla1lXUaSw3buJgYcGU9j44WVoQGJ/A+C3q/quqlv7r7zFF+q+2nrza1pOzEZGM2LT5kfapt1iuK8rl3Y7KcolPYMKm7epYKltrXKF1KSqG93fu4b1OPnzQqT1hd1N4Y+tObiWq686Uv3bzYecOLOrfG1szM6LS0vj2+Cn+uHRVr7EArN6r6MNmjOqBtYUpl29F8/YPmn1YdScbbK3U7b5xLWd+/2i46v8fvNgFgL9PX2P2SvUVjs+3aYgBsO+c/r4IAtgVHoSDqQXvt+ioGFfuxjP2yJ+lt/kGija/pNMQjf18f/UEP/grTlZUMbdihkd35RJaGWy7HcCPASf1GgfAP8E3sDez4L227XGysCAoMYEx/2xR3SCsmlVljfrlbGnF7hfHqP4/qVUbJrVqg29UJC/9pbinxmcnDvFB2w7M69QDR3Nz4jIz+ePaFRZfOKP3eP78bjdmlqa8++NYrGwsuHbmFjMGf0NeTp4qjWudKlR2UN+886ZfKHNfXsy4OcMZ8clAYsMT+XXqeo78qc7v6b8vsvjdVbz0QT9eXziSO7dimDfiR66d0d8V9iuOlhzvJy8vNt472GBXdLy/chO7YuP95OXq8T7v/n3aNaipOskam5rOAf9gfjuk+6WvAK7dgDFT1FcmLvhZ8XxQr0LmT4OEJIgpsipZdVfFyeyvfoK1W8HFCeZ9BB3aqtP06QZ3U2DxCsVNKRvVh98X6n6JEm1Uc7AhReZgK0uWidY52HP/rTnYshMXMDc2Zs6AHlQ2M8UvIprX1mjGUtPeBjsLdSx7AhT1653uymO2mAReW6OeJwDM33OMgsJCfnipPyZGlTgVHMbcvw/rJYYa7W3IScsncFM891LysaltRocZtVRLlGQl5mn8csTC0ZiOM2pxZXUsBz4MwdzeiPp9HHAf6KhKY1/fHO+PahKwPo6gLQlYVjGmxVgXana01UsMD/wTfAN7c3Pe8yraF29V98XW2vri0ar/a/TFO/4E4LMTh/nAqz3zOhfti6+y+Lx++2LVvLi1cl6cFM/ofUXmxVaPOC/2U8yLXSyteL5WAwD2Dh6nkebFXRvwjdXPkneqsb55RxzNlWP94TLGejflWN9Zy1h/VTGev33iLz5u1YXv2w/A1sSMqMw0vrlyjPW3LuklBiH0waCw+G9DhPg/0OjT7551Fp5I0Nz3VM+9X/5365j/15zZ8IHqeb1vH+8mTP8VIe+/r3peb9MXzzAnTybkRfUvO5pMLd9t5doCdVvpNHDhM8zJkzv+10eq57VWfP0Mc/Jkwsd/rHru9nn5rl83Z6rrV/2F5bv/Cv5I3X81+Kp8l8utT9Tl0vrV8hvLxaXqOOqs19/VuE9D6Aj1EnG1f/nmGebkyYW98aHqeU+rMWWk/O/bl7Fa9bzpx+W3rQR8rW4rBbG6WXv8WTF0Ud8Auckn5bdMAK59pS6XRrPKbyxB89RxzLg6pIyU/31fNN+mel775/J9DBn2pvoYstby8jsvBgifoJ4b11lXfsf70JGPvhzs/5uOg/57x6Endnz08ETljFzBLYQQQgghhBBCCCGEEDpmIJcVPxVyk0nxn9CkSROsrKy0PtavX/+ssyeEEEIIIYQQQgghhPgPkiu4xX/C7t27ycvL0/o3Z2fnp5wbIYQQQgghhBBCCCGekFzB/VTICW7xn1CrVq1nnQUhhBBCCCGEEEIIIUQ5I0uUCCGEEEIIIYQQQgghhCiX5ApuIYQQQgghhBBCCCGE0DG5yeTTIVdwCyGEEEIIIYQQQgghhCiX5AS3EEIIIYQQQgghhBBCiHJJligRQgghhBBCCCGEEEIIXSuQNUqeBrmCWwghhBBCCCGEEEIIIUS5JCe4hRBCCCGEEEIIIYQQQpRLskSJEEIIIYQQQgghhBBC6JqsUPJUyBXcQgghhBBCCCGEEEIIIcolOcEthBBCCCGEEEIIIYQQolySJUqEEEIIIYQQQgghhBBCxwxkiZKnwqCwsFA+aiGEEEIIIYQQQgghhNChLr2/ftZZKOHono+fdRZ0TpYoEUIIIYQQQgghhBBCCFEuyRIlQgghhBBCCCGEEEIIoWuycMZTISe4xf+lxjO/e9ZZeCKBn7+net7o0/IdS9BcdSzN3yvfsVz9Th1Lw3nlN5Ybs9RxVKS20nBu+Y7lxqcVo90XbfONZpXfOACC5lWMNg+a7d7ti/Idy80Z6ljcZ5ffWK7Prpj1qyL1xe5zyncs1z+rGP1x0b64ySflNw6Aa1+pYymIdXuGOXlyhi43Vc+bTC2/5XJtgbpMmn5cfuMACPi6yFj/ZfmO5eb0itF/gWYf1nhG+Y0l8Iv3Hp5ICD2SJUqEEEIIIYQQQgghhBBClEtyBbcQQgghhBBCCCGEEELomIGsUPJUyBXcQgghhBBCCCGEEEIIIcolOcEthBBCCCGEEEIIIYQQolySJUqEEEIIIYQQQgghhBBC12SJkqdCruAWQgghhBBCCCGEEEIIUS7JFdxCCCGEEEIIIYQQQgihYwaFcgn30yBXcAshhBBCCCGEEEIIIYQol+QEtxBCCCGEEEIIIYQQQohySZYoEUIIIYQQQgghhBBCCF0reNYZ+P8gV3ALIYQQQgghhBBCCCGEKJfkBLd46o4ePYqBgQEpKSlPtJ/atWvz/fff6yRPQgghhBBCCCGEEEKI8keWKHkCY8eOZfXq1QAYGRlhb29P8+bNefnllxk7diyGhvL9QUXyVndvhns2w9rMlEsR0czdeYjwpJQyt3nZqwXjO7TG0cqSG7EJfPHPEfyj4lR/H+7ZjL4tGtLYtQpWZqZ4ff4L6fdy9BbDK21bML69Ij/X4xL4Ypdmforr2aQB73TzoZptZcKTU1i0/wTHb4VppHm7mzfDW6s/lzl/HyI8OUVvMRT1Ri9vhnor3vtyWDSfbz5ERGLZ7/1i+xaM7dYaR2tLbkYnMH/bEQIi1J9BdQcbPhjQiVZ1q2JiVIlT18OZv/UIyRlZeonhFc8WTPBujZOyTObtPYJ/dOll0qtRA97toiiTsOQUvjl0guPBYVrTzunTnZdaN+fLfUdZfe6SXvJfXEVoJ6AsF58i5bLnEcqlq7JckkqWy1ud29G3SUNcKluTd/8+12Li+e7IKa5Gxeo1Dqh47f7tbpp1bM7Oh7/3K23Vdex6bMnPwMSoElN7daJPs4YYV6rEqeBw5v59mKRMafcPM6J1Cya0KxLL/iNcLSsW9wZM6VwklsMnOBYSppGmnoM9H3brQNua1alkaEhIYhJvbf2HmLR0vcbySpsWTGivrief73lIW2ncgHcftJWkFL45qG4rRoaGvNvNh84N6lDdzoaMnBxO347g24MniU/P1G8cFah+Vai+uI0iFo36VUYsPRurY1HVr2Kx9GmqGcv3h59OLFAx+mKAt57zZlibZlibm3IpLJq5Ow4R8bB5S7sWjOusnLfEJPDlziP439Felr+OG0THhnV4e81ODgeG6CECOH8FVmyAazchIcmAHz8vpEfHsrc5dwm++hmCw8C1CkweBYN7a6ZZvx1WbITEZHCvBzPeheaN9BJCCW89582wtkXKZfsjlIt3C8Z1Uszxb8Qk8OVfZZTLeGW5rNZfuTzw5vOasczb/vDjlZe8lXWsSCwBkepYVk4aRpt6NTS2+dP3KnO3HdJHCIqx3qvYWB/zCGO9jXJcOVLKWN+12Fi/Tf9jPVSc/guUx15tlLGE/4tjr47Fjr2UbcXG3JS3unvjU78WrraVuZuZxaHAEBYfPE1GTq5eY6nIDAoLn3UW/i/IGdgn1KtXL2JiYggLC2PPnj107dqVd999l379+pGfn691m7y8vKecS/GkJnT0ZGS7lsz56yAv/bqB7Nw8fh8zBBOjSqVu06upG1N7d+KXI74M+2U912MT+X3sEOwtzVVpzIyNOHkrnN+Pn9d7DL2bujG1Vyd+PurL0F/XcyM2kaWjNfNTVMsarnwzrA9b/QIYsmQ9h4KC+fHlATSo4qBKM7GDJyO9WjL774O8+PsGsnLzWDq67M9FV8Z18+SVTi2Zt/kgI77fQHZOHr9OLvu9e7Z046NBnfh1ny8vLlrPjehEfp00BHsrxWdgbmLEb5OHUEghr/6yhTGLN2FcyZAfJw7EwED3MfRu7Ma05zrx83FfBi9dz/W4RJa/MgR7C+1l0qq6K4uG9GHL5QAGLV3PoRvB/PzCABo4OZRI26NhPVpUcyEuLUP3GS9FRWgnoCyX5zvx8zFfBv+uyNPyEQ8pl6F92HIpgEG/K8vlRc1yCUu6y9w9R+j/61peWfUnUSmprBgxBLtS9qmzWCpYu5+orGOzdx7kxd+U7/2QOtZbWcd+PuLL0CXKz2CM5mcwrXdnujSsy5SNuxi9YjNVrC1Z/HJ/vcRQkdp9n0ZuTOvRiZ9O+DJo+Xquxyey/KUyYqnmyreD+7D5SgCDlq3n4M1gfh6uGUsNWxv+GP0Ct5PuMnLdZvovXcvPJ8+SU8qcSld6N3Hjk56KtjLkt/XciEtk2cjS20qrGq4sGtaHLX4BDP51PQevB/PTS+q2YmZsRGPXKvxy/CxDf1vP25v+po6DHb+8PFC/cVSg+lWh+uImbnyijEWjfj1CLIN/W8/BG8r6VSyWebuPMGDJWkasVMSyfKT+Y4GK0RcDTOjsyQiflszZcZCXf95Adl4ev49/yLyluRsf9+vELwd9Gf7jem7EJPLbBO19xegOrXga5zSys6FhfZg15dHS34mByZ+AVyvYvgxGD4NZC+HkOXWa3Ydhwc/w5hjYuhQa1oNXP4Sku3oJQcOEzp6MaN+SOdsP8vJPyvnkhEcsl0O+DF/83ygXgPFdFLHM3XaQV35UxPLbw2Jp4cbH/Tux5KAvw38oPZbNZ/3pPPc31WPRrhN6iaFPIzemde/ETyd9GbTiEcf6QX3YfDmAQcuVY/0wLWP9KOVYv34z/Zet5edT+h/roeL0X6A89vJWHnstUfZhYx9Sv5q5MbVPJ3457Muwn0seezlZW+FkbcXCvScYuHgN07fup4NbbeYNeV6vsQihC3KC+wmZmpri4uJCtWrV8PDwYPr06fz111/s2bOHVatWAWBgYMCSJUsYMGAAlpaWfPHFF6xatQpbW1uNfe3YsQODYmfRPv/8c6pUqYK1tTUTJ07kk08+oWXLlo+cv2XLltGoUSPMzMxwd3fnl19+Uf0tLCwMAwMDtm3bRteuXbGwsKBFixacOXNGYx+nTp2iS5cuWFhYYGdnR8+ePbl7VzG7ycnJ4Z133qFKlSqYmZnRoUMHzp/XPAm1e/du3NzcMDc3p2vXroSFhZXI58mTJ+nYsSPm5ubUqFGDd955h8xM9RVO8fHx9O/fH3Nzc+rUqcP69esf+TPQhdE+Hvx29ByHr9/mZlwin2zZSxVrS7o3qlfqNmPbe7D5QgDb/QIJSUhmzs6D3MvLZ0jrpqo0a89cYtnx81yJjNF7DGN8PNh8MYDtlxT5mf23Mj8eTbWmH92uFSeDw1hx6iK3E5NZfPgMQTHxvOLVUp3G24Nfjxf5XLYpPpce7qV/LroysrMHS/ef42jAbW7FJDLjj704VbakW7PS33t0Fw+2ngngr3OB3I5LZt7mg2Tn5jPIS/EZtKxTlar2lZn1x35uxSRxKyaJmX/so0kNZ9o2qKnzGMa18+DPSwFsuxJISGIyn+1SlMnQlqWUSdtWnAgOY/kZRZn8cPQMgTHxjGzTUiNdFWtLZvXqyoc79pJXcF/n+S5NRWgnAOO8PfjTT0u5tCqlXLweXi7/BNzgTGgEd1JSCU5IYv7+41ibmdLQ2VGvsVS0dj/a24NfjxV5763K9y6jjo3xUdaxUj4DK1MThng0ZcHe45wNjSQwOp7p2/fjUasqLaq76DyGitTux3l58OflALZdVcTy6e6D3MvPZ1gL7bGMaduKEyFhLPe9SEhSMj8cO0NgbDwjPVuq0rzfpT3HQ8JYePgEQXEJRKakcvjWbZKzsvUay1hvDzb7BbDtsqKefPZP2e1+lJeyrZxWtpUjinIZ0VYRS0ZOLhPWbmPvtZuEJt3lyp1Y5u0+QtOqzrjaWOstjgpVvypQXzy2XZH6lfjk9UtbLF/tezqxQMXoiwFGtffgt8PnOBJ4m5uxiUzbtJcqlS3p3riMODp4sOVcADsuBhISn8ycHQe5l5vPEE/NsnR3dWJMx9bM2rJfL3kvqlM7mDIRnuv0aOk3/gXVXGHqm1CvNowYAs93htWb1WlW/wnD+8GQPlC/Nsz+AMzMYNtufUSgaVSHYuXyp7JcmpRRLh2V5XJBWS7blfWrjZZy6dSaWZv1Xy6giOX3Q+pYpm96eCyjO3qw5awiltvxyczdpohlcLFY7uXmkZSRpXpk6unq2nFti431ex4y1rdRjvVnlWP9ceVY37qlKo1qrD/ydMd6qDj9F8Do9spjryBlLJsf49jrL81jr+D4JKZs+Iej128TmZzK2duR/HDgFF3d61DJUA9XfAmhQ3KCWw+6detGixYt2LZtm+q12bNnM3jwYPz9/Rk/fvwj7Wf9+vV88cUXLFiwgIsXL1KzZk2WLFnyyPlYv349n376KV988QVBQUF8+eWXzJo1S7WsygMzZszgww8/5PLly7i5ufHyyy+rrj6/fPky3bt3p3Hjxpw5c4aTJ0/Sv39/7t9XHNx8/PHHbN26ldWrV+Pn50f9+vXp2bMnycnJAERGRjJkyBD69+/P5cuXVSfpiwoJCaFXr14MHTqUq1evsmnTJk6ePMlbb72lSjN27FgiIyM5cuQIW7Zs4ZdffiE+Pv6RP4snUd3OBidrS86ERKhey8jJ5eqdWFrWqKp1G+NKhjSu6oxvkW0KC+FMSAQta7jqPc/a8tPE1VkjBlV+qmvPT4sarpy5HaHx2sngcFX+S/1comJpUcrnoivVHGxwqmyJ780i730vF//wWFrU1v7eRpUMaVTdWWObwkI4eyuCFrUUMZkYGVFYCLn56oP3nLz7FBQW4lFHtzEZGyrK5HRokfwAp0MjaFVKmbSs7sqZ0GJlcjtcowwNgIUDe7H8zEWCE5J0mueyVIR2Ajosl5DwUtuWsaEhL7ZuRtq9e9yITdBZ3ku8TwVr92XVsdLe27iSIU2qOmvEVLyONanqjIlRJY39hibeJTolTef1sCK1+7JiKa1+tazmqpEeFLG0qqZIbwB0rl+H0OS7LH9pMGemTGLz2Jfo4abfL08e1JPTxevJ7TJiqeGqkR7gVHDp7R7A2syUgsJC0vS0xNL/S/0qd32xoZb6xWPUr0eM5boeY4GK0RcDVLdXziWDi8URGUuLWmXMW6o5cyZYMw7fYPVcEhS/4Pj6pd58/tdhEvW0xN2TuHwNvFtrvtahjeJ1gNw8xXInRdMYGir+/yCNvqjK5ZbmHP9qZCwtaj6kXG5pKZeaxcrl5d58vuPplMuDWM5oi6WUOmakjMW3eB27pVnHAPq2cufEZ5PZ/v4opvRqj5mx7lefVfXFYVrG+mpljPVhDxnr6xUZ69+dxOYx+h/roeL0Xw+LpWVZbaVqyfp1JjiCljVLz6eVmSkZObncL5BlNh5b4X/wUQHJGtx64u7uztWrV1X/f+WVVxg3bty/2sePP/7IhAkTVNt9+umn7N+/n4yMR/tp6GeffcaiRYsYMmQIAHXq1CEwMJDffvuNMWPGqNJ9+OGH9O3bF4A5c+bQpEkTgoODcXd35+uvv8bT01Pjyu8mTZoAkJmZyZIlS1i1ahW9eysWbVu6dCkHDhxg+fLlfPTRRyxZsoR69eqxaNEiABo2bIi/vz8LFixQ7W/+/PmMGDGCKVOmANCgQQMWL15M586dWbJkCREREezZs4dz587Rpk0bAJYvX06jRk9nEThHKwuAEhOhpIwsHK0ttG5ja2GOUSVDrdvUdbTTT0bL8CA/xdcAS8rMoo6T9vw4WllqyX+m6vN48G9SsTSJGVk4WWn/XHTlwede/L2TMrJwKKVM7CyVn0F6sW3Ss6hTRfEZXA2LITs3j/f6d2DxrlMYGMC7/TpgVMkQx8qWOo3BzsIcI0PDkjFkll5HHK0sSSxehhmZOFqqY361fRvyCwpZ85TW3Fbnrfy3EyhSLlraSpnlUqIc1W3lgS4N6vDt0D6YGxuTkJ7J+HXbuJt9T7cBFFHh2n1p751Z+nurPgMtdayOsjwdrS3Izc8vsa57YkYWjtbS7kvzIJbieUvMzKKuw6PHkpipjsXB0gIrUxNe827D98dO8c2Rk3SsW5ufhvVn1LrNnI+I0mss2upWnTLKpWT6ku3+AROjSnzYowO7/K/r7Sq7ili/KkJfXFosD61fxdNnaI9l0bAisazdRooeY1Hkrfz3xfCQecvjxFFkXJ3arzOXIqI5Enhbx7nWjcRkKF71HOwhI9OAezmFpKXD/fsGONhpngFxsINi3yHp3IM54+PMJ0uUS3qxcunfmUvhT69cSj1eSS89llKPVzLUxysAuy7fIPpuGglpGbi5OvFe7w7UdrJjytp/dBqDTsd6q1LG+sMn6VivNj8N7c+o9fob6xV5qxj914P3fPAexfP1sD5M67FXKccGthZmvN7Fi83n/XWQayH0S05w60lhYaHGciOenp7/eh83btzgjTfe0Hitbdu2HD58+KHbZmZmEhISwoQJE3j11VdVr+fn52NjY6ORtnnz5qrnrq6Kb+7i4+Nxd3fn8uXLDB8+XOt7hISEkJeXR/v27VWvGRsb07ZtW4KCggAICgrCy8tLYztvb2+N/1+5coWrV69qLDtSWFhIQUEBoaGh3Lx5EyMjI1q3Vl9G4O7uXmKJl+JycnLIydEcZExNTTE1NS1zu34t3Jk9oLvq/5PX7igzvdC/Ph7ufPqCukzeXLpDL+9zNzObD1f/w8xh3XmlYysKCgvZc+kGgZFxFJaDG0M0canC6LatGLJU/0v4SDv5986GRTLot3XYWZjzgkczvh/al+HLNzyVn2OWR/2aa9ax19fteHaZ+Q97mu1e3wyV86ZDN0NYpTyZGhSXQKvqrrzs0VyvB736ZGRoyPfD+4IBzN718Dncf0lFql8PVKS++GxYJIN/VcQyvHUzvh/WlxeW6TaWitIX923pzuzBReJYtUMv79O1UV286tVg2OKK02b0qW9Ld2YPKVIuK3fo5X1U5fKD/sqlbyt3PisSyxt6igVgy1n1ycZbsUkkpGWyYtIwatjbEJmcqrf31QXVWH8rhFXnlWN9fAKtqrnycivdjvUVpf8C5bHXwCLHXmt26P09LU1N+HX0IEISkvj5kK/e309UDMnJybz99tv8/fffGBoaMnToUH744QesrKweum1hYSF9+vRh7969bN++nUGDBv2r95YT3HoSFBREnTp1VP+3tNT85s7Q0LDECTNd3nzywVXeS5cuLXGCuVIlzZsOGBsbq54/OClfUFAAgLm5/m9Uk5GRwaRJk3jnnXdK/K1mzZrcvHnzsfY7f/585syZo/HaZ599xuzZs8vc7nBQCFeLrPVrYqRoJo5WFiRmqNcFd7Cy4HqM9p+BpmRlk3+/oMS3pw5WFs/kp4oP8uNgWSw/lhYkpmvPj7YrhRyKXB314F8HKwsSinwujlYWBJXyuTyuo9dC8P+mZJk4WFmQmKZZJjeitb/33UzlZ1DsigkHawsS09SfwZkbEfT9YiW2lmbcv19I+r0cDs95jTtJup0s3s3KJr+gAIfin7Fl6XUksdhVdaAsE+VVEp41q+FgacGRdyeq/m5kaMjU5zox2qsV3X9cobP8V8R2AkXKRVtbKatcSpRjySsJs/PyibibSsTdVK5ExbLvzbEMa9WU30/p5+aZ5b3dH74ewtU72tu9xntbWhBUyk/yVZ9BGXUsMT0LEyMjrM1MNa68cbSyIDE9E10q7+2+qAexFM+bo6UFCZmPHoujpTqWu1nZ5N2/T3Ci5jIYIYnJtK5RTYe511RauTg+pFxKpi/Z7o0MDflueF+q2lRm7Ootert6Gypm/aoIfXFpsTy0fhVPr+UK9eKx7H1rLMM8mvL7Sd3FUlH64iOBIfgXmbcYVyoyb0n/d/OWsuLwqleDGva2nPlM8yKl70f242JYFON+3/LEsTwpR3tILHazyKRksLIsxMxUsRxJpUqFJW4omXRXsa0ulSgXozLKpZQ5fqnlYq2e73jVV5bL7GLlMqofF0N1Uy5HAkO4GlHK8UrRWKwf43jFqvS5G4C/8n1rONrq9AS3Tsf6jIeM9UnJtK6u27G+ovRf8JBjr3/Zhz3KsZeFiTG/jxlMZk4eb6//m3zl+SHxmMrBxXK6MmLECGJiYjhw4AB5eXmMGzeO1157jT/++OOh237//fcl7kv4b8ga3Hpw+PBh/P39GTp0aKlpnJycSE9P17iR4uXLlzXSNGzYsMQNG4v/vzTOzs5UrVqV27dvU79+fY1H0RPvD9O8eXMOHTqk9W/16tXDxMSEU6dOqV7Ly8vj/PnzNG7cGIBGjRpx7tw5je18fTW//fPw8CAwMLBEPuvXr4+JiQnu7u7k5+dz8eJF1TY3btwgJSWlzLxPmzaN1NRUjce0adMeGnNWbh4RyamqR3B8EgnpmbSrV0OVxtLUhObVXbgcGa11H3n3CwiMjqNdXfU2BgbQrm4NLj+lG+UVz8+1mFLyc0d7fq5ExtCuruaNFX3q1VTl/87dVMXnUrfY51LNhSulfC6PKysnj8jEVNUjRHmlgpeb5ns3q+XClTDt751/v4CgO3Ea2xgYgFeDGlwJL/kZpGTeI/1eDm3r18DeyoKjAbr9OWNegaJMvGsXyQ/gXacGl0opk8t3YmhXp1iZ1KmpKsO//IMY8NtaBv2+TvWIS8tg+ZmLTPxju07zXxHbCRQplzpPWC51a5bath4wNDAo8y7nT6rct/vS6ljx965e+nvn3S/g2kPq2LXoOHLz72ukqe1oR1Xbyjqvh+W93T9SLLVLr1+Xo2Lw1hLLpagY1T79Y+Ko66B5BqWOgx3RqWm6DaCIB/VEo90/pK1cjtQSSz3Ndv/g5HYtB1vGrdmq96UjKmT9qgh9cYGyftXVjOVf169HjaWSbmOpKH1xVm4eEUmpqkdIvHIuWb9YHDVcuBJexrwlKo529YvNJeur55LLjp5n8A9rGbp4neoBsOCfY8x8Sjc2fJiWTcD3ouZrpy8oXgcwMYYmbpppCgrA10+dRldKlEtcGeUS8Rjlojzxu+zIeQZ/v5ahP6xTPQAW/K27csnKySMyKVX1eBBLuwaPXsfylbF4lVHHtHGvWgVA48IfXShzrI8qY6yv/QhjvX2xsd7ejug03Y71FaX/+rexXC6rrUTHaRyvGRhAu3o1uFzkyxlLUxOWjRtC3v37vLnuL437UwlRlqCgIPbu3cuyZcvw8vKiQ4cO/Pjjj2zcuJHo6LKPFS9fvsyiRYtYseLxL56QK7ifUE5ODrGxsdy/f5+4uDj27t3L/Pnz6devH6NHjy51Oy8vLywsLJg+fTrvvPMOZ8+eZdWqVRpp3n77bV599VU8PT3x8fFh06ZNXL16lbp16z5S3ubMmcM777yDjY0NvXr1IicnhwsXLnD37l3ef//9R9rHtGnTaNasGW+88QaTJ0/GxMSEI0eOMHz4cBwdHXn99df56KOPsLe3p2bNmnz99ddkZWUxYcIEACZPnsyiRYv46KOPmDhxIhcvXiwR59SpU2nXrh1vvfUWEydOxNLSksDAQA4cOMBPP/1Ew4YN6dWrF5MmTWLJkiUYGRkxZcqUh15d/ijLkTyqNaf9mNTFi/CkFO7cTeWd7j7Ep2dyKChElWbFuKEcDAzmj7NXAFh1yo/5Q3sSEB2P/51YRvu0wtzEmO0X1XdncbSywNHKkpr2tgC4OTuSmZNLTGoaqdm6vQnV6tN+zB9cJD/eyvz4KfLz1ZCexKVl8N1BxRcWa3wvsWb8cMb6eHDsZih9mjWkSVVnPtt5UP25nPFjcueSn8vB6yFa86BL64758dpzXkQkpBCVnMqbvX1ISMvksL/6vZe+PpRD/sFsPKkokzVH/fj8lZ4ERsbjHx7LyM6Kz2DHWXWZDGzbmNC4ZJIzsmlR25Wpg7uw9pgfYQl3i2fhia309WPBwJ4ExMRzNTqWMW1bYW5szLYrivwsGNiTuPQMvj2sLJNzl1g7ejjj2nlw7FYofZo0pGlVZz7dpSiTlOx7JU6g5BXcJzEjk9Dil+HoQUVoJwArz/ixYJAiT1ejYxnjpSyXy6WUy9lLrB1TpFyaKsvlH0W5mBsbMbmjF4dvhJCQkYmdhTkjPFvgXNmKvYG3dJ7/oipau19zxo/JXbwITy723kXr2NihHAxS17HVp/2YP6QnAVHx+EeV/AwycnLZ5hfAJ707k5p9j4ycXGb27cqliGiu3InVeQwVqd2vPOvHggElY9l6VRHL1/0VsSw6qohl9blLrBs1nPFeHhwNDqVv44Y0dXVm1m51/Vrue4HvBvflfMQdfMMj6VSvNl0b1GXU2s16jWXVGT++UraVq1GxjGmnLJdLyrYyuCfxaRl8e0gRy9qzl1gzdjjjvD04eiuUvk0VbeXTvxWxGBka8sML/WjsWoXJf+ygkqGB6oqp1Ox75N3Xz5VQFap+VaC+eJWvH18N0lK/lLF8Nagn8eml1K+bJeuXtlheafN0YoGK0RcDrD3lx6RuXkQkpnAnOZW3n/chPi2TQ4HqOJZPHMqha8H8cUYZx0k/vhzek2t34vGPjGVUB815S2JGltYr82NS0om6q58v6jKzoOiqDndiIOgW2FSGqs7w7e8QlwALZij+/tJA+GM7LFwCQ/soTlzvPQq/fqXex5gXYNp8aOoOzdxhzRbIzobBvfUSgoa1J4uUy90i5XKtSLm8OpRDAUXK5YQfX76gLJc7ynIxNmb7hWdXLg9iea2bF+GJiuOVt7TEsuxVRR3bcFp5vHLCjy+UsQRExjJSWcd2KGOpYW9Dn1bunLgeSkrWPdxcHZnavzPnb9/hZmyizmNYec6PBf3/xVh//hLrRg5nfFsPjoYUGev3aBnrI5VjfV3lWL9Ov2M9VJz+C2DNKT8mdS0yJ++h5dhrvPLYy7fYsVeU9mMvS1MTlo0dgpmJEVM378XK1AQrUxMAkjOzKfg/uhK5onvcJX3LcubMGWxtbTWWaO7RoweGhoacPXuWwYMHa90uKyuLV155hZ9//hkXF5fHfn85wf2E9u7di6urK0ZGRtjZ2dGiRQsWL17MmDFjMDQs/QJ5e3t71q1bx0cffcTSpUvp3r07s2fP5rXXXlOlGTFiBLdv3+bDDz/k3r17vPDCC4wdO7bEFdGlmThxIhYWFixcuJCPPvoIS0tLmjVrprqZ46Nwc3Nj//79TJ8+nbZt22Jubo6Xlxcvv/wyAF999RUFBQWMGjWK9PR0PD092bdvH3Z2ipsU1KxZk61bt/Lee+/x448/0rZtW7788kvGjx+veo/mzZtz7NgxZsyYQceOHSksLKRevXq8+OKLqjQrV65k4sSJdO7cGWdnZz7//HNmzZr1yHE8qeUnLmBuYsycgT2wNjPFLyKa11Zv0/g2s4a9DXaW6pPuewNuYm9pztvdvXFU/lRo0urtGjcNerFtc97spl6TfO2rLwAwfes+dlwK1GkMewJuYmdhzjvdFPkJik3gtbXq/LjaWGsMWJcjY/hoyx7e7e7Dez3aE56UwtsbdnIrXv1zsmUnlZ/LgB5UfvC5rN32VL7lXXlY8d6fvtADa3NTLoVG8/pvmu9d3VGzTPZdvomdlTlv9PLGsbIFN6ISeP237SQXmfDWrmLPu307YGNhRlRyGksPnGPtMT+9xLAn8Cb2Fua809kbJysLguISmPhHkTKprFkml+7E8OH2PUzp6sP7XdsTlpzCm3/u5FZCUmlv8VRVhHYCynKxNOedLqWUi42WctmmLJduynLZpC6X+wWF1HWwY/Dw/thZmJGSfQ//6DhGrPqTYD2XXUVr98tOXMDcuNh7r9F875r2NthZqOvYnoCb2Fma846yjgXFJPDaGs06Nn/PMQoKC/nhpf6YGFXiVHAYc//Wz1rJFand7w5StpXO3jhZKmKZsLGMthIVwwc79jCliw/vd1HGslkzlgM3QvhszyEm+bRh5vNdCU1O5u2tf3Pxjm5/IVDcnmvKvqirslxiE3h1nTqWqjbWGkvLXYqM4cOte5jSzYf3uitieWujuq04V7aiu3s9AP56fZTGe41etZlzYXf0E0cFql8Vqi++piiXt7sUqV/ry6hfRWJ5r1uR+lUkljqOdixuUSSWqDhGrNR/LFAx+mKA5ccU49nsIcp5S1g0k1YWm7c42GBbdN5yVVEv33rOG0drxbIZk1ZsL3EDuqfp2g0YM0X9k+4FPyueD+pVyPxpkJAEMfHq9NVdFSezv/oJ1m4FFyeY9xF0aKtO06cb3E2BxSsUN6VsVB9+X6j7JUq0UZXL0CLlsqLkfFJruTz/3ykXgBVHS8YyeXnJOqYxN76iaCtFY5m8XB1L3v37tGtQU/XlSmxqOgf8g/nt0Fm9xLA7SDmudCoy1m8qY1yJiuGDv/YwpbNyrL+bwptbio31N4uM9c89vbEeKk7/BUWOvQYp61d4NK+t0nLsVSSWvf5Fjr2slcdeq9SxNK5ahRY1Ffdl2/fBeI3367FwOdEp+vtCqCIz+A9+L/C4S/qWJTY2lipVqmi8ZmRkhL29PbGxpX/Z89577+Hj48PAgQMf+70BDArLw53ThMpzzz2Hi4sLa9eufdZZKdcaz/zuWWfhiQR+/p7qeaNPy3csQXPVsTR/r3zHcvU7dSwN55XfWG7MUsdRkdpKw7nlO5Ybn1aMdl+0zTeaVX7jAAiaVzHaPGi2e7cvyncsN2eoY3GfXX5juT67YtavitQXu88p37Fc/6xi9MdF++Imn5TfOACufaWOpSDW7Rnm5MkZuqjvo9Rkavktl2sL1GXS9OPyGwdAwNdFxvovy3csN6dXjP4LNPuwxjPKbyyBX7z38ET/p3p0/vJZZ6GEXfs/eOQruD/55BMWLFhQ5v6CgoLYtm0bq1ev5saNGxp/q1KlCnPmzOH1118vsd3OnTv54IMPuHTpkupGlAYGBnKTyYomKyuLX3/9lZ49e1KpUiU2bNjAwYMHOXDgwLPOmhBCCCGEEEIIIYQQopz5N8uRfPDBB4wdO7bMNHXr1sXFxYX4+HiN1/Pz80lOTi516ZHDhw8TEhKCra2txutDhw6lY8eOHD169JHyCHKC+z/NwMCA3bt388UXX3Dv3j0aNmzI1q1b6dGjB4Dq2w1t9uzZQ8eOHZ9WVoUQQgghhBBCCCGEEEWV84UznJyccHJyemg6b29vUlJSuHjxIq1btwYUJ7ALCgrw8vLSus0nn3zCxIkTNV5r1qwZ3333Hf379/9X+ZQT3P9h5ubmHDx4sNS/X758udS/VatWTQ85EkIIIYQQQgghhBBCCLVGjRrRq1cvXn31VX799Vfy8vJ46623eOmll6hatSoAUVFRdO/enTVr1tC2bVtc/sfefcfXfP0PHH8lEtmJLEkQIiGIkWGE2KM2tUfNFqW/aqtF0YVqq1r6bbW+Xahdam+1giCxiUhkEYLsKYMkkt8fN+7NTW7Q5l6+ad/PPm4f173n3nve93PW5+Tc83F01Li6u3bt2tStW/cvfb5McFdi9erVe9FZEEIIIYQQQgghhBBC/MutX7+eqVOn0rVrV/T19Rk8eDBLly5VPp+fn094eDg5Odq/CLBMcAshhBBCCCGEEEIIIYSW6RW+6Bw8PzY2NmzYsKHc511cXCh6ypYtT3u+PPp/61VCCCGEEEIIIYQQQgghxAsmE9xCCCGEEEIIIYQQQgghKiXZokQIIYQQQgghhBBCCCG07W9uuSH+GlnBLYQQQgghhBBCCCGEEKJSkhXcQgghhBBCCCGEEEIIoW2ygPu5kBXcQgghhBBCCCGEEEIIISolmeAWQgghhBBCCCGEEEIIUSnJFiVCCCGEEEIIIYQQQgihZXpykcnnQlZwCyGEEEIIIYQQQgghhKiUZIJbCCGEEEIIIYQQQgghRKWkV1Qka+WFEEIIIYQQQgghhBBCm7q3/vRFZ6GMg0GfvOgsaJ2s4BZCCCGEEEIIIYQQQghRKckEtxBCCCGEEEIIIYQQQohKyeBFZ0CIF8Hjo/+86CxUSOhn7yrvN51RuWO5ulgVi9uSb15gTiouevp7yvsNFlTe4xL+seqYNJxfeeMAuD5XFYvHB5U7ltAvVLHU/X7JC8xJxdx8a7ryfqNPKvcxCftUdUzcP6/csUR8qIql/sLKHUvkHFUsTd6vvLGEfPXPPCaVuX8E9T6yyczKHUvI1/+MMlayfDX6uPLGARC2QBVL41mVO5Zri1SxFMa7v8CcVIy+Y4Ty/j+p/XL/onLHEvFBiboyp3LHcm2hKhbXbyvv+fCNae89PdG/VeGLzsC/g6zgFkIIIYQQQgghhBBCCFEpyQS3EEIIIYQQQgghhBBCiEpJtigRQgghhBBCCCGEEEIILdMrKnrRWfhXkBXcQgghhBBCCCGEEEIIISolmeAWQgghhBBCCCGEEEIIUSnJFiVCCCGEEEIIIYQQQgihbbJFyXMhK7iFEEIIIYQQQgghhBBCVEoywS2EEEIIIYQQQgghhBCiUpItSoQQQgghhBBCCCGEEELbZIuS50JWcAshhBBCCCGEEEIIIYSolGSCWwghhBBCCCGEEEIIIUSlJBPc4oWIiYlBT0+Py5cvV+h9OnXqxLRp07SSJyGEEEIIIYQQQgghtKbwf/D2DyR7cD8HSUlJfPLJJ+zdu5eEhASsra3x9PTkk08+oW3bti86e+IZTe3ahqEtmmJhbMSl2/f4dNcRbqWkP/E1I309ea1dc+zMzQiPT+LzPf5cvZugfH5oi6b08WyAh1N1zI2N8P3sv9x/8FCncbzZow2DfZtiYWLE5Zv3WLDtCLeTnxzHCD9Pxndqjp2FGeFxSSzc7k9IbIJaGs86TrzVy4+mtZ0oLCwk/F4Sk3/ZxsOCRzqJY7SXJ5NatMDezIywpCTmH/UnOD5eY9r6trZM8/OjiUN1allZscDfn1UXL6mlaVmzJpNatqCJgwMO5uZM2bmTQ1HROsl7Sa+08GRCm+bYm5txPSGJBQf8uXovodz0PRvV551OftSsZklMajqLjwRwIipGY9r5vbsyonkzvvjzGKvPXtKYRpteaenJBD9Feb8en8Rn+58cSw+P+rzTWRHLrZR0Fh9WxWKgr887XfzoWK8utaytyHr4kNM3bvPN4ZMkZmXrPBaAqd2K67yJEZdu3ePTnc9Q51t78lr7EnV+tz9X7yi+AysTI6Z2a4NfvTo4VbMkLTuHI6HRLD10mqyHeTqLY0xTL173aYG9qRlhyUnMO3GUKwnl1BUbW9719aNpdQdqWVrx6Ql/frtysUw6BzNzZvu1p2OdupgYGhCTns77R/7kamL5x7uiXmnlyWtti8tXQhKf71VvT0vr0bg+b3cpLl+p6Sw5GMCJyBjl8y81qsfwls1oXKM61UxNGPjfdVyPT9JZ/ksa1dyTCa1L1PuD/gQ/qd43rM+0jiXq/dEAjkfHqKVxs7VhRpd2tKpdiyr6+kQnpzB16x7iMu/rNhYfTyb6FseSmMSnB/0JjntKLB38qGWliOXrY+qxRM55V+PrFh09wfIzF7Sd/TLe7N6GIa2K633MPRZsf4Y+so0nr3ZU9ZFf7FTvI3+bPISWbs5qr/kjKJhPtx3RRQj/qGPyT+ojobh8+ZYoX884BlMrXztKla8pGspXoJSvZ/VWF/Xx/fxdR7iVmv7E17zSSjW+vx5ftj+qalCFWT070LtpAwyrVOFU1C0+3X2UlOwcncYy9SX19uvT7Ue4/bRxSxtPXu2g3n49HreU9tNrA2jfoC5vrd7F0VDtj5HPXYGVv8O1CEhK0eP7z4ro1v7Jrzl7Cb5cBlEx4FQdpoyBgb3U06zfDis3QnIqNHSDD9+BZo20nv0y/knt16jmnkzwLTVueVq97+hHzeJ6v9hfvd5HfFBOvT9yghXPod5P7daGIS1LjPF3PENdaV1cV4rH+F/sUq8rcwd0pXW92lS3NCfnYR6Xb8fxzYEAbial6SSGMc2Kz4Ufj+/9/Ql+0vi+TfG5sKUVC47789sl9XIzqlkzRjX1pKalJQCRqSl8fyaI4zExOsm/ELogK7ifg8GDB3Pp0iVWr15NREQEu3btolOnTqSkpLzorIlnNKF9C0a39mL+zsOM+Ol3cvPy+WXcIKoaVCn3NT2buDOrVwf+6x/EkP+u53p8Mr+MH4SNmYkyjbGhAScjb/HLiXPPIwxe69yCV9p5sWDrYUYtVcTx86Qnx9HD052Z/Tvw06Eghn27noh7yfw8aRA25qo4POs48ePEgQSG3+aV735n5He/8/upKxTq6FoKfRq480HHjiwNDKL/2nVcT0pi1eBB2JqYaExvbGBAbEYGXwecJDErS2MaU0NDriclMe/IUd1kWoNeHu7MeakDy04EMfDX9VxPSGbFK4OwMdUch3ctJ5YM6s2WyyEM+HU9R8KjWDasP/Xtbcuk7dbADc+ajiRkao5X23o1dmd29w4sOx7EoJ/XE56QzPLRT4llcG+2XAph4M/rORwexQ8jVLEYGxrg4Vid/544w+Bf1vPWpt3UtbXmvyNffi7xTOjQgtFtiuv8j8V1/tWn1Pmm7szq3YH/HgliyLL1XI9L5pdXVXXe3tIcewtzvt4fwMvfreGDLQdp5+7CgsHddRZHn/oN+LB9R747G0jfjWsJS05idf/B5dYVEwMDYjMzWHQ6gMRszWXH0siILUNGkF9YyKu7t/HS+lV8cfI4GQ8e6CyOXk3cmdWzA8uOBTH4p/WExyfz61j19rQkL2cnFg/pzdaLIQz6cT1HwqL4fmR/6ldX1RWTqoZcvH2XJQdP6izfmvRu5M6cbh34ISCIASvWcz0xmRUjnlBXajrxzcDebL4SwoDl6zkcEcWyoer13rmaFRvGDuNGShqj122m369rWXbyDA8LCnQeywddO/DDySAGrFxPWEIyK4c/OZb/vNybLVdCeHnleg5HRvHfwf2pb6eKpc3Sn9Vus/f8SWFREX+GR+k0FoDXOrVgVFsvPt12mFe+L+4jJzyl3nu6836/Dvx4OIih360nPC6ZnyeULZubz1yl46c/K29L9gboJIZ/0jH5J/WRUFy+2pUqXxOfsXwdCmLot+sJv5fMzxM1lK8gKV9/x8Ti8f28XYcZ/vPv5OTl8+tTxve9isf3y/yDGPxjcX80Tv2YzOnVkU4NXJm2cS9jV26muoUZS0f202ksEzoq2q/52w8z8oficcvT2q9m7rzfVzFuGbq0/PYLYGw7b51fIy03FxrUg4+nPVv6O3EwZTb4esP25TB2CHz8NZw8q0qz7ygsWgZvjoOtv0IDN5g0A1J0M+eo9E9qv3o3cmdOiXr/TOOWAb3ZfDmEASuKxy1D1GPx++5ntdvjen/wOdT7CR1aMMrPi/k7DjPyv8V15bWnj/Hf71NcV34oriuvqdeV0LuJfLTlIP2+Wc3rv21HD/j1tUHo6+lpPYY+7u580KEjS4OC6LdhHWFJSaweWP65sImhAbczMvjq5Mlyx/dx97P46tRJXv59PQN+X09gbCw/93uZ+jZly6AQ/6tkglvH0tPTCQgIYNGiRXTu3Jk6derQqlUr5syZQ//+/ZVpJk6ciL29PZaWlnTp0oUrV64AitXfjo6OfPHFF8r3PH36NFWrVuXIkWdbmbFz5058fHwwNjbG1dWV+fPnU1DipFdPT4/ly5czcOBATE1NqV+/Prt27VJ7j2vXrtG3b18sLS2xsLCgffv2REcr/nJfWFjIp59+Sq1atTAyMsLLy4sDBw6ovf7s2bN4e3tjbGxMixYtuHSp7F+aQ0JC6NWrF+bm5jg4ODBmzBiSk5OVz2dnZzN27FjMzc1xcnJiyZIlzxS/Noz18+HnY2c5ev0GEQnJzN5ygOoWZnRt5Fbua8a39WHz+RC2XwwlOimV+bsO8yC/gEHNmyjTrA28xPIT57gSG/c8wmB0ex9+OXwW/2s3iIhL5oONB7C3NKNLk/LjGNvRh61nQthxLpQbCal8uvUwufkFDGypimNm/45sOHmJFf7niE5IISYpjT+vRJD/SDert19r3pxNV0PYeu0aUampfHRIkachTZtoTH81IYEvT5xgT3g4eeXk6XhMDN+cOs3BKN0PrB57tbUPf1wKYduVUKKTU5m7V1FGBntpjmNsK28ComJYEXiBG8mpfHcskNC4REa39FJLV93CjI97dmbGjgPkF+rmGJQ2vrUPmy+GsO1ycSx7imPx1hzLGF9vTkbFsPK0Ipal/opYRrXyAiDrYR4T1m3jQGgEN1PSuHI3ngX7/WlSwwEnSwudxzPWz4ef/c9yNOwGEfHJzN5cXOc9nlDn2/mw+VxxnU9MZf7OwzzIU9X5qIQUpm3Yw7HrN4hNzeDMjVi+O3iKzg3rUkVf+4NfgIlezdl07Spbwq4RlZbKh/6HyC3IZ6hHU43pgxMTWHjqBHsiy68rU5q3Ii7rPu8f+ZMrCfHcycwkIPYWtzMzdBIDwDg/HzZfCGH7JUV7Om93cXvqU05daV1cvk4Vl6+jgYTFJfKKr5cyza4rYfz32BlO37its3xr8qqvD39cDmFbsKKufLLvMA8KChjiqTmWca28CYiOYUXQBaJTUvnueCCh8YmMbuGlTPNep7aciI7h66MBhCUkEZuewdHIG6Tm5Oo0ltda+bDpSghbr4YSlZLKJwcOk1tQwJBm5cTSwpuAGzEsP6OI5dsTiljGNFfFkpydo3br6u5G0K1YYtN1V74eG9POh1+OnMU/VFHvP9h0gOqWZnRt/IQ+sr0PW86EsON8KDcSU/l0m6JsluwjAR7k5ZOSlaO8ZevoVxv/pGPyT+ojAca0Ly5fJcZgTy1fHcopX61Kla/8fFLu5yhvUr6ezdg2Pvx0vMT4fquir+/2hPH9OL/i8X05/ZG5UVUG+TRh0YETnLkZS+i9RD7YfhCfOjXwrOWos1jGtPPh56Oq9mvOH08vX+Pa+7DlrKJ8RSemMn97cSyl2q+GTvaM69Ccjzcf1Fn+ATq0hmkT4aUOz5Z+406o6QSz3gQ3Fxg1CLp3hNWbVWlW/wFD+8Kg3lDPBeZNB2Nj2LZPFxGo/JPar1dblRq37H/KuKVl8biluN5/V1zvRz+h3ner78aZ59XXt1WM8f3DStSVp4zxx7X3Ycu5EHZcKK4rO4rH+C1U38Hmc1e5EHOXe+mZhN1LZOmh0zhVs6SmtaXWY5jg05xNISFsCS0+Fz6iaIuHNtZ8TIITEvjy5An2RJQ/vj968wbHYm4Sk57OzfR0lpw+RU5+Pt5OTlrP/7+RXlHR/9ztn0gmuHXM3Nwcc3NzduzYwcOHmreeGDp0KImJiezfv58LFy7g4+ND165dSU1Nxd7enpUrVzJv3jzOnz/P/fv3GTNmDFOnTqVr165P/fyAgADGjh3LO++8Q2hoKD///DOrVq3i888/V0s3f/58hg0bRnBwML1792bUqFGkpqYCcPfuXTp06ICRkRFHjx7lwoULvPbaa8pJ8u+++44lS5awePFigoOD6dGjB/379ycyMhKArKws+vbti4eHBxcuXGDevHnMmDFD7fPT09Pp0qUL3t7enD9/ngMHDpCQkMCwYcOUaWbOnMnx48fZuXMnBw8e5NixY1y8WPan89pWy9oKewszAqNVkyBZD/MIvhOPl3MNja8xrKKPRw0Hgkq8pqgIAqNv4+X8YjqJWjZW2FuaERRZIo4HeVy9HY9nHc1xGFTRx6OmA0ER6nEERd7Gs44iDhtzEzzrOJGalcvaqcM5Nvd1fntjKN4umt+zogz19Wni4MDp27dUeQJO375VqTpgQ319Gjs5cPpmie8WOH3zNt61NMfhVcuJwJvqk3Enb9zCq0R6PeDrl3uyIvACUUnP51cihvr6NK7hoDZRWAQE3ritlreSvJydykwsnoq+VW56AAsjIwqLisjU8TY+tawVdUVjna/9lDofpaHO1y4/JnNjI7Ie5vFIBz93MNTXp0l1B07Gqh+XU7G38XH8+3WlW103ghMSWNazL+cmvMGeEWMY0VjzhLk2GFZR1JVATe1pOeXF09mJwFLl62TUrRfW/j72pHpfbl2p6aSWHhT13rumIr0e0LFeXW6mprFixEACp01m8/gRdHMv/0RNGwz19WnsqCGWmNvKvJXmXdOJ0zHqsQTcvIVXOeltTU3p5FaXLVdCtJbv8jzuIwNL9ZHBsc/QR0aV30c+1se7IQFzp7D9vTFM69kWY0Pt7xL4Tzom/6Q+Ep5Qvp5lDBb5jOVr3hS2Tx/DtF5Svp7Fk8b3nk8Y3zeu4aDWv5Qe3zeu4UBVgypq73szOY176Zk664PKG+MHx8bj+aRxS00HtTJZVARBUbfxLDFuMTY04KuRvfhsx1GSs3S7xcpfdfkatGmu/li7lorHAfLyFdudlEyjr6/49+M0uvBPar+UscRoGLeUU4+9NNT7kuOW0mzNTOlYry6bLz+nem9pptZvZz18hrpSw4HA0n19tHpdKcnE0ICBzRsTm5pBfIZ2t4p7PL4/Fat+LnxKi+fC+np69HVvgImBARfj7mnlPYV4HmQPbh0zMDBg1apVTJo0iZ9++gkfHx86duzIiBEjaNasGSdPnuTs2bMkJiZiZGQEwOLFi9mxYwdbtmzh9ddfp3fv3kyaNIlRo0bRokULzMzMWLhw4TN9/vz585k9ezbjxo0DwNXVlQULFvD+++8zd+5cZbrx48czcuRIAL744guWLl3K2bNn6dmzJ8uWLcPKyoqNGzdiaGgIgLu7u/K1ixcvZtasWYwYMQKARYsW4e/vz7fffsuyZcvYsGEDhYWFrFixAmNjYxo3bsydO3d44403lO/xww8/4O3trbZSfeXKlTg7OxMREUGNGjVYsWIF69atU07sr169mlq1av3lY/JX2ZmbApQZ1KVk5WBnYarxNdVMTTCooq/xNa521rrJ6FPYFuc15f6zx2FtpogjpXQc93OoW10RRy0bKwDe6N6aJXtOcP1uEv1beLB8ymAGLl771L0l/yprExMM9PVJLrWPYXJODq42Nlr9LF2yNlXEUea7zS6/jNiZm5WJOyUrGzsz1fGb1LYlBYVFrHlO+4lCiVhKH5PsHOo+IZYy6bOylfWttKpVqjCjWzv2Xr1Odp7u9qsGlPVBY50vJ39PrPP2mr+DaqbGvNHZl81nr2oh12Up60qO+p7lyTk5uFn//bpS29KK0U09WX75AsvOn8XTwYG5HTqT9+gR266HVjTbZTz+bkuXl5TsHOqW893amZtpOBbll6/n5XFdKdN+Zefgavvs9T45W1Xvbc1MMTeqyuttWvLt8VMs9j9Je1cXfhjSjzHrNnPu9l3dxpJT9ri4/cVY7Ms5LoOaepCdl/9ctip4XO819XdP7SM19KuP+0iAvZfDuZeWSVJmFu5O9rzbqx0u9tZMW7tHqzH8k47JP6mPhBLlSxtjsNLl61Kp8tW7uHytkfL1JI/7g9Lfb3J2Trn5U/ZHmo5Jcbm0szAlr6CgzDV1krNysLMw01b21Txx3PKUcxWNY/wSfeusfh25dOse/qE3tJzriktOhdLNga0NZGXr8eBhEZn34dEjPWyt1RcR2FpDqblkrfontV9aHbeUU68GFtf757E9iS7rCsCI1s2Y3rM9pkZVuZGYyqQVW8l/pN2r+anG92XPhd0qeC7cwNaOLcNHYGRgQE5+Hm/s2U1U8aJHUUH/0BXT/2tkgvs5GDx4MH369CEgIICgoCD279/PV199xfLly8nOziYrKwtbW/W9jXJzc5VbgIBiErlJkyZs3ryZCxcuKCfDn+bKlSucOnVKbcX2o0ePePDgATk5OZiaKhryZs2aKZ83MzPD0tKSxMREAC5fvkz79u2Vk9slZWZmcu/evTIXy2zbtq1ym5WwsDCaNWuGsbGx8vk2bdqUyae/vz/m5uZlPiM6Oprc3Fzy8vLw9fVVPm5jY0ODBg3Kjf3hw4dlVs0bGRk99bvr69mQef1Vq+OnrN3xxPT/q/p4N+STIao43lyxQyefo1e8r9jmoKvsOKeY3Lq+6zi+9ZwZ2LIx3+0/pZPPFWU1dqzO2FbeDPp1/YvOilYZ6Ovz7dA+oAfz9mp/j/S+ng2ZN6BEnV+zQ+ufUZqZUVV+GjeA6MQUlh0J0vnnaZOenh5XExNYHKjYuzo0ORF3WztGNfHUyQS3eLLHezseiYhmVfFJb1hCEt61nBjp00xnE9zPw2DPxuy6Flbuz2kroo93Q+YOUtX7//tth9Y/47EtZ1R/xIqMTyEpM5uVk4fgbGNFbKruf46tTbo8Jrr2PPvIPt4NmTu4RPlauUNnn6WxfE0ZgrOtFbEpUr4e69tMfXz/xrodWv+M56WPV0PmlWi/3tBR+9W5kSu+bs4M+e6fNa6sjP6pY3yAIZ6N2a2rvt5LfYz/xuodWv+MkvZcus7pyNvYW5jxavvmLHmlD6N/2kReQeXoM2+kpdJ3/TosjKrSq747X3fvwcgtf8gkt6g0ZIL7OTE2Nuall17ipZde4uOPP2bixInMnTuX//u//8PJyYljx46VeU21atWU96Ojo7l37x6FhYXExMTQtOmz/Rw8KyuL+fPnM2jQII15eqz05LWenh6FhYq/NpqUc7ECbcrKyqJfv34sWrSozHNOTk5E/Y19kRcuXMj8+fPVHps7dy7z5s174uuOhkUTXGJP7KoGimpiZ25KcpZqJaStuSnX45I0vkd6Ti4FjwrL/KXa1tz0uf28zz80muBvysZha2FK8v1ScdzTHEdatiIO29JxWJiSkqmI4/F73UhQ/6ncjcRUnKy1v1dyWm4uBYWFaisaAOxMTUnKzi7nVf970nIUcZT5bs3KLyPJpVZyANiWWCXRonZNbM1M8X9novJ5A319Zr3UgbG+3nT9fqWWo1BQxlL6mDwlljLpNay6NdDX5z9D+lDDypLxa7boZPX2E+t86bryd+p8qRV7plUN+WX8QLIf5vPW+t0UFGp3Zcdjyrpiqr5izM7UlKScv19XkrKziUpVr+9Rqan0dKv/t9/zSR5/t6XLi61Z2e/2MU2/BrDVUL6et8d1pUz7ZWZKUvaz13s7M1W9T8vJJf/RI6KS1Y9JdHIqzZ1rajH36pSxmJY9Lkl/oQ2zMzPTmL5FrZq42dowbcde7WW6BP/QaIJva+gjS9d7C1PCn9ZHWjy93pd0tfhzne2qaXWCu7Ifk5Iqex9ZbvnSMAZ7avl6hn6lJGX5sq2m1Qnuyl6+jl6PJviO5jqfVGJ8b2dmSlj8k/t6jcck6/G4OIeqBgZYGBupreIuPaaoCP/QaK6WGLcYPmncUk75KjcWC1X58q3njLNNNQLn/Z9amm/H9OXCzbu8+ssWrcTzd9nZQHKpi0WmpIK5WRHGRortSKpUKSpzQcmUNMVrdaWyt18laXXcoqneO9fE1daGadt119er1ZUqf3+M/6S68ljWwzyyHuZxOyWd4Ng4Tn/yf3RrXI99V8K1FVKJ8b32z4XzCwu5lZEOQEhiIs0cHBjv7cNHRw5X6H2FeF5kD+4XxMPDg+zsbHx8fIiPj8fAwIB69eqp3ezs7ADIy8tj9OjRDB8+nAULFjBx4kTl6uqn8fHxITw8vMx716tXD339Zzv8zZo1IyAggPz8/DLPWVpaUqNGDU6dUl+le+rUKTw8PABo1KgRwcHBPHjwQPl8UJD6ikUfHx+uXbuGi4tLmXyamZnh5uaGoaEhZ86cUb4mLS2NiIiIcvM9Z84cMjIy1G5z5sx5arw5efncTs1Q3qISU0i6n01rN2dlGjOjqjSr5cjlWM17UuU/KiT0XgKtXVWv0dOD1q7OXH5OF5TMeZhPbEqG8hadoFjV41tfPY6mtR25cktzHAWPCgm9m6D2Gj09aF3PmSu3FHHcTc0kISMLl1I/0apjb829NO3uOQaKjjckIQG/2rVVeQLa1K7Npbjn891qQ35hIdfiEmjjUuK7BdrUdebSHc1xXL4TR+u6tdUe86tbm8vF6XdeDaP/z2sZ8Ms65S0hM4sVgReYuGG7bmO5l0AbV/VYWrs6K/NWJpbYONqUjsW1tlr6x5PbdWyr8eraraTnPij9Nlqhsc5nllPnbz+lztcrVVfcnLlcYpLDzKgqy18bRP6jR7y5dqdOV3TkFxYSkphA21rqdcXPuTYX4/9+XTkfdxdXa/X6XreaNXfva7++g+K7vRZXTntaTvm6EhtHa9dS5cut9nNrf8tTbr13eUJduauhrtStzaW7ccr3vBqXgKut+tl6XVtr7mVkajeAEvILC7kWXzYWvzrOyryVduluHG3qqMfS1qU2lzWkH+rZmKtxCVxPTC7znDaU10e2LtVHNnN+hj6yVL33LdFHatKwRnUAkjO1+0fZyn5MSqrsfWS55ateqfL1LGOwv1q+ahaXLy1Npj5W2ctXueN717J9/ZUnjO+vPWV8f+1eAnkFj9TSuNhZU6Oapdb6oJy8fG6nZChvyjF+6fLl7MiVJ41b7pYdt/jWc+ZK8bhluf85Bn67lsHfrVPeABbtPs5HOr7g5LPwagxBF9QfO31e8ThAVUNo7K6eprAQgi6q0uhCZW+/nikWF2eN9RiKxy0u5Y9bShryPOp9ybpSPMb3LT3Gf1pduZegdl6gpwe+bqq6opkeeii2WdSmx+N7P+ey43ttnwvr6elpPf//WkVF/3u3fyCZ4NaxlJQUunTpwrp16wgODubmzZts3ryZr776ipdffplu3brRpk0bBgwYwMGDB4mJieH06dN8+OGHnD9/HoAPP/yQjIwMli5dyqxZs3B3d+e11157ps//5JNPWLNmDfPnz+fatWuEhYWxceNGPvroo2eOYerUqWRmZjJixAjOnz9PZGQka9euJTxc8ZfImTNnsmjRIjZt2kR4eDizZ8/m8uXLvPPOOwC88sor6OnpMWnSJEJDQ9m3bx+LFy9W+4w333yT1NRURo4cyblz54iOjubPP//k1Vdf5dGjR5ibmzNhwgRmzpzJ0aNHCQkJYfz48U+cpDcyMsLS0lLt9qxbu5S25vRFJnfypXNDV+o72PLl4B4k3s/mSJhqG5mVrw7mFV9P5b9XnbrIkBZNednbA1d7G+b274pJVUO2X1Bd1cTO3JSGjvbUtqkGgLuDHQ0d7bEy+Xv5fJp1AReZ3NWXTh6u1He05YuRPUjKzOZoiCqOXycPZmRbVRxrjl9ksG9T+rfwoG51Gz4epIhjxzlVHKuOneeVdt681Kw+zrZWTO3RhrrVbdh2VjcXC1l54QLDmzZlkIcHbjY2LOjWDVNDQ7aEKPK0uGdPZrRrp0xvqK9PI3t7GtnbY1ilCo7mFjSyt6dOiV9JmBoaKtMA1LK0opG9PU4W2l+F/thvQRcZ5tOUAc08cLWzYV7vrpgYGrLtiiKORS/34L0uqu1/1py9RHu3Orza2gdXW2umdmhNkxoOrDt3GYD03AdEJqWo3fILH5Gclc3N0stXtGxV0EWG+jRlgGdxLH2LYym+is+XA3rwXldVLGvPXKJdvTq82saHurbWTO3YmsY1HFh/VhGLgb4+3w3tS5MaDszctp8qenrYmZliZ2aK4TP+ca4i1py+yOTOJer80OI6H1qizk8YzCutS9T5k6Xq/MvFdf6i4jswM6rK8lcHYWJoyMfbDmFuVBU7c1PszE2V20xo2/LLFxjRuCmDGnrgZm3DZ527YWpgyJZQRd1c8lJPZrYpVVfs7GlkZ4+hfhUczc1pZGdPHatqqrgvX8DLwYn/a9GKOlbV6O/ekJFNmrE2WHd7Qq4+fZGhzZvyspeifM3tq/7dfjmoB+92K1FXghTla7yfD3XtrHmzs6J8bThzWZnGysSIho721LNXTAzXtbOmoaO9zvfp/u3MRYZ5N2VgUw/cbG2Y30tRV7YGK2L5ql8PpndSxbL67CXau9bhNV9FvX+rfWuaODmw7rwqlhVB5+nl4c4wrybUtrZidAtPOtd3ZcOFKzqNZeXZiwz3UsXyac9SsfTtwfSOJWI5XxxLKx9cbax5q50ilrUXLqu9r3nVqvRs6M7m53ChuZLWnrzI611K9JHDe5CYmc2Ra6p6v3zSYEb6legjAy4ypFVT+jf3wLW6DR8PLO4jzyu+A2cbKyZ39cWjZnVqWFvSycOVL0b04NyNO0TEa/+E/p90TP5JfSTA2oCLvF5yDDZCQ/l6vVT5OnGRIb4lylepMZizrRWTu2koX9F3iIiT8vU0awIvMkXD+P5wyfH9ePXxvVp/ZG/D3H7q/VHWwzy2XQxhdq+OtKpbC48a1fliYHcu3b7HlTvxOotl7cmLTO7iS+dGivK1UEP7tWLSYF5pUyKW4vbrZR9F+fpkoOJ4bi9uv5KzcohKSFG7AcSl3+dumvb/gJqdA2GRihvAnTjF/XsJin9/8wvMUu26yYiXFWm+/hFu3IIN2+HAMRg3VJVm3DDYvBd2HIDoGJj/DeTmwsBeWs++mn9S+/Xb2YsM8/oL45ZzJep9yXFLqXpv9rjeP4eLS5a09lSJuuJgy0INY/wVEzTUlZbFdcXehk9eVj+vr2VtxcSOLfGoUR0nKwu8ajvxn1f68LCggBPhN7Uew4qLFxjRpCmDGinG9wu6Fp8LhxafC3fvycy25ZwL61fBwaz4XLjE+H5m23a0rFmTmpaWNLC1Y2bbdrSu5cyu62Faz78QuiJblOiYubk5vr6+/Oc//yE6Opr8/HycnZ2ZNGkSH3zwAXp6euzbt48PP/yQV199laSkJBwdHenQoQMODg4cO3aMb7/9Fn9/fywtLQFYu3Ytnp6e/Pjjj2oXatSkR48e7Nmzh08//ZRFixZhaGhIw4YNmThx4hNfV5KtrS1Hjx5l5syZdOzYkSpVquDl5aXcd/vtt98mIyOD6dOnk5iYiIeHB7t27aJ+/frK72D37t1MmTIFb29vPDw8WLRoEYMHD1Z+xuNV4LNmzaJ79+48fPiQOnXq0LNnT+Uk9tdff63cysTCwoLp06eTkfF89hZcEXAek6qGzH+5GxbGRly8fY/XV29TW33pbGOFtZlqO5cDIRHYmJnwVtc22BX/7Gny6u1qF0ob3qoZb3ZR7Ue+dtIwAD7Y+ic7Lml/L9uV/oo45g7phoWJEZdu3mPKr6XisLWiWok4/rwSgY25CW/2aIOdheKnjlOWb1e70Ma6gEsYGRjwfv+OWJoaE3Evidd/3sodHe39uDc8AhsTU6a19cPO1JSwpCRe3bqNlOKLbThZWlBY4q+S1c3N2TN2jPLfk1q2YFLLFgTFxjLqj80ANHVwYMPwYco0H3XuBMDWkGu8/+efOoljf2gENqYmvN2xDfbmpoQlJDFxg6qMlI7j0p04Zmzfz7TOfrzXuS0xqem8+ccuIp/TldSfZP81RSxvdSqOJT6JSetVsdSwsqCodCzbFLG820URy9SNqlgcLMzp2tANgJ1Txqh91thVmzl7645O41lxorjODyyu87fu8fpvT6nzV4vrfLfiuhKXxOTfVHXFo0Z15dXW/5yh/kfKbl+t4F669k8W90aGY2tiwnu+bRU/u05KYvyurSTnFh8Xc0v1umJmzr6RY5X/ft2nJa/7tCToTiwjt/8BQHBiAlP27WJmm3a83bINsZkZLAjwZ2fEda3n/7H9IRFYm5rwdhdFexoWn8Tra0vUFSv1unI5No6ZW/bzTlc/3u3Wllsp6bz1+y4iE1V1pXMDNxYO6qH89zfD+gDwg38gy/x1ty/6vjBFOXm7YxvszRT1fsLG8mO5dDeO6Tv2M62TH+91Kq73m9Xr/aHwaObuP8Jkv5Z81L0zN1NTeWvrbi7c0bwaSauxmJrwTvviWBKTmPDHdmVbXMOyVL2/G8d7u/bzbgc/pndsS0xaOv+3dReRpbZX6ePRAD092B2quzKlycpjino/b3BxvY+5x5QVZftItXp/JQJrMxOmdi/RR65Q1fv8R49oXb82Y9p5Y1LVkPiM+xy6GsXPR86U+Xxt+Ccdk39SHwklyteQEuVr+TOWr3LGYPkFj2hdr0T5Si8uX4elfD2L5QHnMTE0ZH7/blg+Ht+vUT8mtW2ssDZVHZP9IYpj8nbx+D4sLonX16iP7xfuP05hURHfjehHVYMqnIqK4dPd2r+GSEkrjpdtvyavLDtuKTnGPxCs6I9Ktl+TV24vczG95+VaOIybpvqD/6JlivsDehaxcA4kpUBciR8x13KCn76EL3+AtVvB0R4WzIR2rVRpeneBtHRYulJxUcpG9eCXr3W7RQn8s9qvx/X+7Q4lxi2bnhDL3Tim79zPtI7F45a0dN7cUjaWvsX1fs9zrvePx/jzSozxJ5ce49taUc201Bjf3ISp5YzxHxYU0LxuTca09cbKxJjkrBwuxNxh1I+bSM3O1XoMeyMU58Lvtik+F05OYvyObcoLT9awtKAQ9XPhvaNU51Ovt2jB6y1aEHQnlle2KM6FbU1MWdKjJ/amZtzPyyM8OYnx27dy8rYOr8gqhJbpFRX9Q9emC/EEHh/950VnoUJCP3tXeb/pjMody9XFqljclnzzAnNScdHT31Peb7Cg8h6X8I9Vx6Th/MobB8D1uapYPD6o3LGEfqGKpe73S15gTirm5lvTlfcbfVK5j0nYp6pj4v555Y4l4kNVLPUXVu5YIueoYmnyfuWNJeSrf+Yxqcz9I6j3kU1mVu5YQr7+Z5SxkuWr0ceVNw6AsAWqWBrPqtyxXFukiqUw3v0F5qRi9B1VW2L+k9ov9y8qdywRH5SoK3MqdyzXFqpicf228p4P35j23tMT/Uv1bPrhi85CGQeufv70RJWMbFEihBBCCCGEEEIIIYQQolKSCe5KrnHjxpibm2u8rV+//kVnTwghhBBCCCGEEEIIIXRG9uCu5Pbt20d+fr7G5xwcHJ5zboQQQgghhBBCCCGEEAAUvugM/DvIBHclV6dOnRedBSGEEEIIIYQQQgghhHghZIsSIYQQQgghhBBCCCGEEJWSrOAWQgghhBBCCCGEEEIILdMrKnrRWfhXkBXcQgghhBBCCCGEEEIIISolmeAWQgghhBBCCCGEEEIIUSnJFiVCCCGEEEIIIYQQQgihbbJFyXMhK7iFEEIIIYQQQgghhBBCVEoywS2EEEIIIYQQQgghhBCiUpItSoQQQgghhBBCCCGEEELbCmWLkudBVnALIYQQQgghhBBCCCGEqJRkglsIIYQQQgghhBBCCCFEpSRblAghhBBCCCGEEEIIIYS2FckWJc+DXlGRfNNCCCGEEEIIIYQQQgihTb3cZ73oLJSxP2LRi86C1skWJUIIIYQQQgghhBBCCCEqJdmiRAghhBBCCCGEEEIIIbRNNs54LmSCW/wrNfrkPy86CxUS9um7yvt+w5e8wJxU3OlN05X3635fuWO5+ZYqlma7P3mBOamY4H6fKu83nlW568q1Raq60rHPVy8wJxV3fO/7yvt11y18gTmpmJuj5yjvu39euctXxIeq8uX2zTcvMCcVF/3ee8r7rt9W7lhuTFPF0mJC5Y3l/IoSx2TDFy8wJxV345UPlPddllXuvj7mTVVf36vRnCek/N+3P0zVl9RbVHnb46hZqrb4w+BBLzAnFfd5s23K+03er7zHBCDkK9VxabCg8sYS/rEqjsJ49xeYk4rTd4xQ3nf5cfELzEnFxbwxQ3nf5devX2BOKi5m0kzlfZe1X77AnFRMzJjZLzoL4l9OJriFEEIIIYQQQgghhBBC22QF93Mhe3ALIYQQQgghhBBCCCGEqJRkglsIIYQQQgghhBBCCCFEpSRblAghhBBCCCGEEEIIIYS2FcoWJc+DrOAWQgghhBBCCCGEEEIIUSnJBLcQQgghhBBCCCGEEEKISkm2KBFCCCGEEEIIIYQQQghtKyp80Tn4V5AV3EIIIYQQQgghhBBCCCEqJZngFkIIIYQQQgghhBBCCFEpyRYlQgghhBBCCCGEEEIIoW1FRS86B/8KsoJbCCGEEEIIIYQQQgghRKUkE9w6NG/ePLy8vF50Nv7nxMTEoKenx+XLlyv0Pp06dWLatGlayZMQQgghhBBCCCGEEKLykS1KigUGBtKuXTt69uzJ3r17tfKeM2bM4K233lL+e/z48aSnp7Njxw6tvL94Pl5p5clrbZtjZ27G9YQkPt/rz9W7CeWm79G4Pm938aNmNUtupaaz5GAAJyJjlM+/1Kgew1s2o3GN6lQzNWHgf9dxPT7pOUSiMHGoH/27NsXCzIjg8Ht8vfwwd+LTy00/ZkArOrWqT+0aNuTlFXA14h7/XX+C23Fpauma1Hdi8oh2eNRzorCwkMhbSUz7fCt5+QU6iWNMUy9e92mBvakZYclJzDtxlCsJ8RrT1rex5V1fP5pWd6CWpRWfnvDntysXy6RzMDNntl97Otapi4mhATHp6bx/5E+uJpZ/vCtquEsrxru1xc7InIjMBBaG7CUk/a7GtF0dGzGxfgeczWww1KvCrewU1tw4zZ47V5RpTKpUZVqjl+ji2BCrqqbczUljw80gNt86r7MYSpr6UhuGtGqKhYkRl2Lu8en2I9xOSX/ia0a28eTVDs2xszAjPC6JL3b6c/WO5u/8p9cG0L5BXd5avYujodE6iEDltdHt6NujGeZmRlwNu8s3yw5x915auelf7u3Fy729cHSwAiDmVjKrfz/NmQs3lWmmT+1Oc6862NmYk/sgn5Cwu/z823Fu30nVWRxj3H143cMXexNzwtISmXfuIFdS4jSmHVHPk0GuTXG3sgPgamo8iy8fV0tvamDILO/OvFSrPtZGJsRmZbAq/DwbIi/pLAaAUc09mdC6OfbFbfGCg/4E3yu/bvZsWJ9pHRVtcUxqOouPBnA8OkYtjZutDTO6tKNV7VpU0dcnOjmFqVv3EJd5X6exjPb0ZFKLFtibmRGWlMR8f3+C48tpv2xtmebnR5Pq1allZcUCf39WXVL/rqe0bEmP+vVxtbHhYUEBF+/dY1FAADfTyi+v2jKmWXEsj9tif3+Cn9QWt/GjiUN1allaseC4P7+VimVUs2aMaupJTUtLACJTU/j+TBDHY2J0HQoAk1/2Y2CHJpibGnMl6i5frj1CbGJ6uem93WsypkcLGrk4YF/NnOk/7OT4JfW2ycTIkLcGt6ejtxtW5ibcS85g0+FLbD0erJMYxtRvzqRGj+t8AvMuHCS4nDo/3M2LQXWb4l5NUedDUuP5+soxtfR2xma879WZ9o51saxqzNnE28y/cJCY+8+hfDXxYrJ3cflKSWLuiaNcSSy/fL3Xyo+m9sV9fYA/K4PV+/qTYyZSy9KqzGvXXL3MJyeO6CSGksa81Y2eQ1tiZmFC6KVb/DB/B/dupZSbftSbXRk9tZvaY7E3Enm9z3+U/35r3gC829TDprolD3IeEnrpNiuXHODOTd2MLUd7ezLRt7mi/UpM4tPD/gTHld8W92pQn2nt/ahlZUlMWjpfHQvg+I0Y5fO2pqa836kd7VzqYGlsxLnYu8w/7M+ttHSd5L+kqAMpROxK4UF6AVZ1jPF+zRGb+qblps/LfsS13xO4e+Y+eVmPMLU3xHO8I04+Fso0uSn5XF2fQPylLAoeFmLuWJUWb9bExs1E5/G82V19DLZg+xFuJ6c/8TUj2njyakf1MVhIrOp4/jZ5CC3dnNVe80dQMJ9u0119eaWFJxPalOjvD/hz9Un9faP6vNOpRH9/JIATUTEa087v3ZURzZvxxZ/HWH1Wd+OWc1dg5e9wLQKSUvT4/rMiurV/8mvOXoIvl0FUDDhVhyljYGAv9TTrt8PKjZCcCg3d4MN3oFkjnYWhNKaxF5O9Wqra4pNHym+LrW15r1VbmtoVt8WnjpZpi80MDZneqh3d69bHzsSEa8mJzD/pT3CS5vfUaiwe3kxu1hJ7EzPCUhOZe/oIV8r53BENmjHIvTENrIvHxckJfH3uhFr6Hi71GdXIi6Z2Dlgbm9B762pCUxN1HgcoxviTG/sqYklLZO7ZQ08Z4zehQTV7RSyp8Xx9SX2MHzNmtsbXfnHhKL+EntV+AP8mhbJFyfMgK7iLrVixgrfeeosTJ05w7949rbynubk5tra2Wnkv8WL0auLOrJ4dWHYsiME/rSc8Pplfxw7CxkzzINXL2YnFQ3qz9WIIg35cz5GwKL4f2Z/61VXlwKSqIRdv32XJwZPPKwyl0f1bMrSXN18vP8zEDzfw4EE+//lgMFUNq5T7Gu9Gtdj652Ve/2gD73y+BYMq+nz74RCMjVR/H2tS34lvPhjM2eBbTPxwPRM+WM+WA5co0tFeU33qN+DD9h357mwgfTeuJSw5idX9B2Nrovm4mBgYEJuZwaLTASRmZ2lMY2lkxJYhI8gvLOTV3dt4af0qvjh5nIwHD3QSA0CPGk2Y6dGTnyKOMfzET4RnxvOT71hsqpppTJ+Rn8uvkScYc/JXBh9fxs7YS3zqOQA/+3rKNDMb96Rt9XrMubSVAf7fs+5GIHOa9KGTQwOdxfHYhI4tGNXWi/nbDzPyh9/JzcvnlwmDqGpQfvnq2cyd9/t24L9Hghi6dD3hccn8PEFzHRvbzvu5bV82ckgrBvXzYcmyg0x5bx0PHuSzeMHQJ9aVpOT7/LzqBJPeWcPr76zhYvBtPv94EC61VfU/IiqBL/+zn7FTVjDj483o6emxeMEw9PX1dBJHnzqN+LB5V74LPknffSsJS0tgdZfh2BppPoH3dajDrphQRh7ewKA/1xCXc581XUfgYGKuTPNR8650qOHKu6d30233r/x2/RzzW3anW616Gt9TG3o3cmdOtw78EBDEgBXruZ6YzIoRg7Ax1VznvWs68c3A3my+EsKA5es5HBHFsqH9qW+vOhbO1azYMHYYN1LSGL1uM/1+Xcuyk2d4WKCbP8o91sfdnQ86dmRpUBD9163jelISqwYNKrf9MjYwIDYjg69PniQxS3P75evszLrLlxny+++M3bIFA319Vg8ejImBbtcx9HF354MOilj6bVhHWFISqweWH4uJoQG3MzL46uTJctviuPtZfHXqJC//vp4Bv68nMDaWn/u9TH0b3Y+nxvVqyYhuXixce4Txn2/gwcN8vn/vyW2YSVVDIu8ksWjd0XLTvDu8I22auPDJ8v0M/WgVvx+6yMxRXejg6ar1GPrUbsQHPl1ZGnKSfvtXEpaeyOrOI8qt860darP71jVeObyewQfXEJedyZrOI9Xq/E8dBlPbvBqTT2yh7/4V3M3OZG2XVzCpYqj1/JfUt14DPmrXke/OBdLnj7WEJiexpt+T+/rbmRksCiy/r++/eT0tf/tReRu1czMA+6LCdRbHY0MndqD/aD++n7eDacP/y4OcPD779TUMqz65nsZExvNK+8+VtxmjflZ7PuraXb75cAuv9/mGDyf9hp4efL78NZ30K70buvNBlw58fyqIl1cp2uLfhj25Lf5P/95sDg6h/6r1HIqM4sdB/alvp6rPPw3qh3M1K6Zs20X/Veu5m5nJmuGDMTHUbfsVeyqD4NUJeAy1p9siV6rVMSbg81s8yNDcBxTmFxKwIIbsxHxaT3emx3f1aD65BiY2qnqQl/UI/49voldFj3Yf1KbHf+rRbJwjVc3Kb0O05bVOijHYp9sO88r3ijHYz08bg3m6836/Dvx4OIih35U/Btt85iodP/1ZeVuyN0BncfTycGfOSx1YdiKIgb+u53pCMiteeUIZq+XEkkG92XI5hAG/rudIeBTLhqn39491a+CGZ01HEjI1tw/alJsLDerBx9OeLf2dOJgyG3y9YftyGDsEPv4aTpaYU9x3FBYtgzfHwdZfoYEbTJoBKTr+W2NftwZ81LYT350PpM+WtYSmJLKm7xBsTTT3KyYGhoq2+MyJctviRZ160K5WHd47so8em1YTEHuLdf2G4mBmrjG9tvR1bcBHrTvx3cXT9Nm+htCUJNb0GoqtcTl9ZA1ndkWFMXLPJgbtXE9cViZrew3FwVSVT1MDQ87H3+HLs8d1mvfS+tZpyEctuvBd8En67P2N0LRE1nQdXn4sjrUVY/xDGxh0QNHfr+02XK2/b7n5e7XbzNN7KSwqYv9t3feRQmiDTHADWVlZbNq0iTfeeIM+ffqwatUq5XNpaWmMGjUKe3t7TExMqF+/Pr/99pvy+Tt37jBy5EhsbGwwMzOjRYsWnDlzBlDfomTevHmsXr2anTt3oqenh56eHseOHQMgNjaWYcOGUa1aNWxsbHj55ZeJKbFS6dixY7Rq1QozMzOqVatG27ZtuXXr1jPFtnPnTnx8fDA2NsbV1ZX58+dTUOLkXU9Pj+XLlzNw4EBMTU2pX78+u3btUnuPa9eu0bdvXywtLbGwsKB9+/ZERytWJxUWFvLpp59Sq1YtjIyM8PLy4sCBA2qvP3v2LN7e3hgbG9OiRQsuXSr71/KQkBB69eqFubk5Dg4OjBkzhuTkZOXz2dnZjB07FnNzc5ycnFiyZMkzxV9R4/x82HwhhO2XQolOSmXe7sM8yC9gkE8TjenHtvbmZFQMK09d4EZyKkuPBhIWl8grvl7KNLuuhPHfY2c4feP2c4mhpGG9fVi17QwB56OJvp3Mp8v2Y2dtToeW5U9MvbdwG/uOX+PmnRSibiXx2X8P4GhvSUNXB2Wat8d1YvP+i6zdeZabd1K4HZfG0aAI8gse6SSOiV7N2XTtKlvCrhGVlsqH/ofILchnqEdTjemDExNYeOoEeyLDyXukOU9TmrciLus+7x/5kysJ8dzJzCQg9ha3MzN0EgPAWFc/tt6+wM7YS9zISmJB8G5yH+UzoLaPxvTnU2I4Gh/Gzaxk7uSksf5mEJH3E/C2qa1M42XtzK7Yy5xPieFebjpbb18gIjOBJtVq6SyOx8a08+Hno2fxD71BRHwyc/44QHVLM7o2div3NePa+7DlbAg7zocSnZjK/O3Fdayleh1r6GTPuA7N+XjzQV2HAcDQl1uwdlMgp4KiuBGTxBdL9mJrY067NvXLfc3ps9GcOX+Du/fSuHMvjeVrAsh9kIdHwxrKNLsPXCH42h3iEzOJjE5g+ZoAHKpb4li97IpCbZjYqBWboq6w5cZVojJS+PDMAXIfFTC0XjON6d89tYt1ERcJS0vkRmYqs4P2oYcebR1dlGl87Gux7cZVziTc5m52Br9HXSYsLQFP2xoa31MbXvX14Y/LIWwLDiU6OZVP9h3mQUEBQzw1t8XjWnkTEB3DiqALRKek8t3xQELjExndwkuZ5r1ObTkRHcPXRwMIS0giNj2Do5E3SM3J1VkcAK81b86mkBC2XrtGVGoqHx0+TG5BAUOaaI7lakICX544wZ7w8tuvV7dtY2toKJEpKVxPTub9P/+kpqUlTRwcNKbXlgk+ili2hBbHckQRy9DGmmMJTkjgy5Mn2BNRfixHb97gWMxNYtLTuZmezpLTp8jJz8fbyUmXoQAwsps3K/ac4fjlaKLuJPPJigPYVzOnk0/5feTpkBh+3H6aY5eiyk3jWa8Ge05f40L4HeJSMtl+4iqRsUk0dnXUegwTGrZiU/RlttwIJiozmY/O7lccEzdPjenfPb2LdZEXCUtP5EZmCrPP7kNPTw+/4jpf18IGH7tafHzuAMGpcdy8n8rH5/ZjVMWAfi4eWs9/SRO9mrPx2lU2Xy/u648p+vphjZ7Q158+we6o8stX6oNcknJylLeuLq7EZKQRdO+OLkMBYMDYtmz8yZ+go2HERMSzePYf2Fa3wK/bk7/HRwWFpCVnKW+Z6Tlqz+/ffI6Q8zEk3ksnOvQeq787RPUa1XCoaa31GF5r6cOmKyFsvRpKVEoqH/95mNz8AoY21Vznxzf35sSNGJafVbTF3wYEEpqQyBgfLwBcrKvhXbMGcw8e5Wp8AjdT0/jkzyMYGxjQr1FDree/pIg9KdTtao1LZ2ssnY3xed2JKlX1iTmqebbwpn86eVmP8Hu/NnYNTTGrXhX7xmZUczFWpgnfkYyJrSEt36yJTX1TzByq4uhpjrljVZ3GAoox2C9HVGOwDzY9fQw2tr0PW84oxmA3ElP5dJtiDDaw1BjsQV4+KVk5ylv2wzydxfFqax/+uBTCtiuK/n7uXkWeBnuVc+7VypuAqBhWBCrOvb47FkhoXCKjW3qppatuYcbHPTszY8cB8gt1c35SUofWMG0ivNTh2dJv3Ak1nWDWm+DmAqMGQfeOsHqzKs3qP2BoXxjUG+q5wLzpYGwM2/bpIgKViZ4t2Bh6lc3hIUSlpfDh8UPk5uczrGE5fX1SPAsDj5fbFhtVMaCnqzsLA09wNu4OtzLT+fb8aW5lpjG6sea+SmuxNG3BxuvBbI4IISo9hQ9PHlT0Kw00xzLNfy/rwi4TmppIdEYqswL+RE9Pj7Y16yjTbI8KZemlQE7dfbb5GW2Z6NGKjZFX2BxdPMYPOkDuo3yGuWke4087uZt1EZcITUskOjOVWUH7FWN8JxdlmqQH2Wq3l5zrExh/i9gs3Z0PC6FNMsEN/PHHHzRs2JAGDRowevRoVq5cqVx5+vHHHxMaGsr+/fsJCwvjxx9/xM5O8ROVrKwsOnbsyN27d9m1axdXrlzh/fffp7CwsMxnzJgxg2HDhtGzZ0/i4uKIi4vDz8+P/Px8evTogYWFBQEBAZw6dQpzc3N69uxJXl4eBQUFDBgwgI4dOxIcHExgYCCvv/46enpPX5UREBDA2LFjeeeddwgNDeXnn39m1apVfP7552rp5s+fz7BhwwgODqZ3796MGjWK1FTFz+Xv3r1Lhw4dMDIy4ujRo1y4cIHXXntNOUn+3XffsWTJEhYvXkxwcDA9evSgf//+REZGKr+jvn374uHhwYULF5g3bx4zZsxQ+/z09HS6dOmCt7c358+f58CBAyQkJDBs2DBlmpkzZ3L8+HF27tzJwYMHOXbsGBcvlt1iQpsMq+jT2MmBwGjVRHRREQRG38arluYTbU9nJwJLTVyfjLqFl7PuT8yfpkZ1K+yszTl/VdX5ZufmERoVR5P6zz4xZWZqBEBmlmJls7WlCU3q1yAtM5efPx3Jnp+nsGzuMJo1qKndAIoZ6uvTpLoDJ2NLHBfgVOxtfBz//vfcra4bwQkJLOvZl3MT3mDPiDGMaKz5JFobDPSq0MjKiaBk1U/ZiyjiTHI0ntbPNhnta+eKi5kdF1JUx/RyWiydHBtS3Vjxc9mWtnWpY25LYFL5ky/aUMvGCntLM4IiVccl60EewbHxeNbWXL4Mq+jjUdOBwEj1OhYUdRvP2qpjaWxowFcje/HZjqMkZ+VoeiutcnK0wtbGnAuXS9SVnDzCwuNo3PDZ6oq+vh5dOjTE2NiQa2GafxVkbGRIr5eaci8+ncTkTK3kvSRDfX2a2DhyMk61RUoRcCouBh+7Z6ufJlUMMdTXJz1P9UuGi0l36FqrvnLFR2uH2tS1tCGgxOdok6G+oi0+fVO9zp++WX5b7FXTSS09wMkbt/CuqUivB3SsV5ebqWmsGDGQwGmT2Tx+BN3cy58I0AZDfX2aODhwusQfqYuA07duaXUC18JI0U7r8hcoj9viU7HqsZy6rb1Y9PX06OveABMDAy7GaefXdeWpaWeFXTVzzoaqyk12bh4hN+Jp6laxeK5E3aODlxv21RR1pnkDZ2o7WhN0Tbsnw4o678Sp+BjlY0XAqfibeP+VOq+nT8ZDRdmpqq9Y/fnwkWpxRBGQ9+gRLeydNb2FVhjq69PE3oFTd0r19Xcq1teX/owB7h78ERailfd7Esda1tjYW3IpUNUX52Q9JDw4loaetZ/wSqhZx451x+ew8uBM3v9qOPZO5f9B1MjEkO6DmhMXm0pSvHYnJAz19Wni6MCpW6Xa4pjbyra1NO+aTpy+pd4WB9xUtcVVqxSXr4Ky5at5Ld390bQwv5D0G7lUb6b6xZyevh4OzcxIidD8R8648/exdTfl0vI4dk+8zsH3ogjblkTRI9VPy+6dv4+1mzGBS2LZPeE6h2dGc+Ow7rYge+zxGCxQ0xisjubv0aB4DBYUVWoMFnkbzzrqx7OPd0MC5k5h+3tjmNazLcY6Wl3/pP7eu7z+vpYTgRr6+5LjAz3g65d7siLwAlFJ5W8J9CJdvgZtmqs/1q6l4nGAvHzFdicl0+jrK/79OI0uqNriUn393dv4OPy9Omqgr4eBvr5avwLwoKCAlo66W5BjqK9PEztHtYloRSy38Kn+bLGYGBgoxsUPdbsY4mkej/HL9PdxMfjY/8Uxfjmx2Bmb0rmmG5uidLOd2r9OUdH/3u0fSPbgRrE9yejRowHo2bMnGRkZHD9+nE6dOnH79m28vb1p0aIFAC4uLsrXbdiwgaSkJM6dO4eNjQ0A9eppXuVjbm6OiYkJDx8+xNFRtWJn3bp1FBYWsnz5cuWk9W+//Ua1atU4duwYLVq0ICMjg759++LmpjjxbtTo2Tbamj9/PrNnz2bcuHEAuLq6smDBAt5//33mzp2rTDd+/HhGjhwJwBdffMHSpUs5e/YsPXv2ZNmyZVhZWbFx40YMDRU/wXN3d1e+dvHixcyaNYsRI0YAsGjRIvz9/fn2229ZtmwZGzZsoLCwkBUrVmBsbEzjxo25c+cOb7zxhvI9fvjhB7y9vfniiy+Uj61cuRJnZ2ciIiKoUaMGK1asYN26dXTt2hWA1atXU6uWblekVjM1waCKPinZ6hNqKdk51LXXvCrGztyszARcSlY2dubl7+f3vNhUUwziUzPU85eakaN87mn09GDauE5cuX6XG7GKAWINh2oATBjShh/WHScyJomeHTxY+vEQRs9Y/cT9vf8OaxMTDPT1Sc7JVns8OScHN2ubv/2+tS2tGN3Uk+WXL7Ds/Fk8HRyY26EzeY8ese16aEWzXYZ1VVMM9KuQ8lA9jpSH2dQ1ty/3deYGRhx+aQaG+gYUFhXy+dU9apPkC0P2MrdZfw6/NJP8wkcUFRUxP3gnF1J1u6rAzkJRxsuW/xzlc6Up61jp19xXr2Oz+nXk0q17+Ife0HKuNbOxLq4raerHJi09GxvrJ/900rWOHcuWjKZqVQNyc/P46LMd3IpVP5ka0MeLya92wtSkKrdiU5j+4R8UFJT9w2hFWRuZKurKA/XvN/lBNm5Wz7bdwyzvziTkZqlNks87d4gvfHsRNPgt8gsfUVhUxAdB+zmbGKvV/D9mbVpc50u1xcnZObjaPqEtLpM+GzszRVm0NTPF3Kgqr7dpybfHT7HY/yTtXV34YUg/xqzbzLnbmvfBr3AsyvarVN5ycnC1+fvtV0l6wEedOnH+7l0iUnR3Iv+kWNwqGEsDWzu2DB+BkYEBOfl5vLFnN1Gpup0ksrVSlI2UzFJ9ZGY2tpbP1keW5+sN/nw4thv7l7xOQYGizny++hCXIrRbzlR1vlT/+CAbN8tnrPNexXU+XlHnozNTuJudwUzPznx4dj+5j/J4rUEraphZUt1Edz8ltzbW3NcnVbCvL6m7az3F9mRhOpwdKmZtp/ijc1qK+s/105KzsLa30PQSAMKDY1nywWbu3EzGxt6CUW925et1k3mj37fk5qhW0fYZ2ZoJ03tiYmZE7I1EPpywgoJ87a5SfdwWlx4XJ+c8oS0209wW2xe3xTdS07ibkcmMju346MBhcvPzebWlD06WFlQ3r1i9e5KH9x9RVAjGVuqnwkZWBmTe1fyH9OyEPBJD8qndzop2c+qQFZ/HpeVxFD0qwmNodUWaxDxuHMyjfl9bGg6yIy0ql8sr49E30MelUzWdxfN4nKVpPFXeGMzarHgMdr/suK1uddXx3Hs5nHtpmSRlZuHuZM+7vdrhYm/NtLV7tBxFiTJWOo7sHFztnr2/T8lS9fcAk9q2pKCwiDU63HO7opJToXSItjaQla3Hg4dFZN6HR4/0sLVWn5SytYabOvxRsLItzi3dFmfjVu3vtcXZ+flciL/L283bEJWWQnJuDv3rNcTHoQYxmelayLVmqljUy0tSbs4zxzK7VUcScrKf+2rt0pT9fenj8hfG+LN9OpGQm8WpuBiNzw92bUp2fh5/yvYkohL5109wh4eHc/bsWbZv3w6AgYEBw4cPZ8WKFXTq1Ik33niDwYMHc/HiRbp3786AAQPw8/MD4PLly3h7eysnt/+OK1euEBUVhYWF+uD2wYMHREdH0717d8aPH0+PHj146aWX6NatG8OGDcPpGVZHXblyhVOnTqmt2H706BEPHjwgJycHU1NFx9+smepnLGZmZlhaWpKYmKiMsX379srJ7ZIyMzO5d+8ebdu2VXu8bdu2XLmiuOhdWFgYzZo1w9hY9fO9Nm3alMmnv78/5uZlT5Sio6PJzc0lLy8PX19f5eM2NjY0aPDkPYUfPnzIw4cP1R4zMjLCqHhl2z9d93YNeX/SS8p/z/hye4Xfc/prXXF1tmPK3I3Kxx7/YWbH4WD2HlOcJEbEJNKiSW36dm7CT78//73G/w49PT2uJiawOFCR39DkRNxt7RjVxFMnE9x/V3ZBHkOP/4ipQVV87VyZ0bgnd3LSOJ8SA8ArLq1pZu3MW2fXcy8nnea2dfigaV8SH9znTLL2Joj7eDVk3qCuyn+/8dsOrb13SZ0bueLr5syQ79br5P0BunXyYPrU7sp/z5639W+/1+27qUx8axVmZkZ0bNuAD97rzduzfleb5D7kH8q5S7ewtTZjxOBWzJvTn6kz1pOn5cmIiprSuDX9XBox8tB68kr8nHdcg+Z429dgov9m7mZn0Kp6bea36q4YJJdYSfK/TL+43ToSEc2q4hPesIQkvGs5MdKnmc4muJ+H+V274m5ry/BNm150Vv62G2mp9F2/DgujqvSq787X3XswcssfWp3k7unbkA/Gqi7eN+27HVp779KGd/WiqZsT7y7dQVxKJj7utXh/dFeS0rM5G/b8tysrzxSPNvSt48ErR9Yp63xBUSFvnNjKl637cHnoexQUFnIq/ibH7kWh+HNK5TW8UVOO3bpJYqlJdG3o3NeLt+YNUP577hur/9b7nA+IUN6PiYgnPDiW1Udm0b5XMw5uVV082n/3JS6djsTG3oLBr7Znzn9eYforP5Gfp9trClRUQWEh/7d9Nwt7vcTFaf9HQWEhp2Nucyz6Js/wY9XnqqgIjCwNaD65BnpV9LB2MyE3NZ+IXSnKCe6iQrB2M6bpK4rtoazrmpAZ+5AbB1O1OsHdx7shc0uMwf5PR2MwgC1nrirvR8ankJSZzcrJQ3C2sSI29X9/24LGjtUZ28qbQb/qbhwp/rp3j+zj6849OTvuDQoKCwlJSmBX1HWa2ut2a7WKeMOzFf1cGzJi7yYelrMNVmXxRvEYf8TBDTwsZ8ueYfWaseNmaLnPC/G/6F8/wb1ixQoKCgqoUUP1s5SioiKMjIz44Ycf6NWrF7du3WLfvn0cOnSIrl278uabb7J48WJMyrnIzV+RlZVF8+bNWb++bKdrb69Yxfnbb7/x9ttvc+DAATZt2sRHH33EoUOHaN269VPfe/78+QwaNKjMcyUnnEtPXuvp6Sm3WdFGjE+TlZVFv379WLRoUZnnnJyciIr6e1srLFy4kPnz56s9NnfuXObNm/dMr0/PyaXgUSG2ZuorH2zNTEm+r3l1R7KG1dq2GlZ1Pw8nz0dzLVJ1hefHF8ezsTIlJV11MmdjZUpkTNJT3++9V7vQ1seN/5u3kaRU1QqklDTF/Zg76isFY+6m4mBnWaEYNEnLzaWgsBA7U/WVPXampiRV4CQ1KTubqFT1GKJSU+npVv6eyxWRlpdDQeEjbI3U47A1MiP54f1yX1dEEbE5ikme8Mx4XM3tmVCvA+dTYjDSN+DtRl2Zdm4jAYmKk+LI+wk0tHRivFtbrU5w+4dGczVWddVtw+KL2dmZm5J8X3UcbM1NuX5Pc/lS1rHSdcZCVcd86znjbFONwHn/p5bm2zF9uXDzLq/+sqXCsZw6E0VYuGr7A8PHdcXaTG0Vt3U1M6JuJDzxvQoKCrkblw4oLijZ0N2RIS83Z8kPqr3Ds3PyyM7J4+69NELD77Fn09u093PnyPGwCsdSUtrDHEVdKXWxGTtjM5Jyn3yBpUmNWvFG4zaMPvw719NVx8+oigEzvDox5cRW/O8qfjlwPT0JD5vqTPLw1ckEd1pOcZ0v1RbbmZmSlP2EtrhMetUqr7ScXPIfPSIqWb3ORyen0txZN9srQcn2q1TeTE1Jyq74JNvcLl3o4urKiE2biC/ngpTaostY8gsLuZWRDkBIYiLNHBwY7+3DR0cOV+h9SzpxJZqQ+SX6yOILsdlampKSUaKPtDQjIjbxb3+OkaEBbw5qx4xluzgVrFgVHXUnGXdne0b3aKHVCW5VnS/VPxqbkfTgycdkYkNfpni0YczRDWp1HiAkLZ6++1dgYWiEoX4VUh/msK37OK6mxpfzbhWX9kBzX29fwb7+sZoWFrStVZspB3Y9PfHfEHQ0lOvBql+1GFZVlC9rW3PSklR9vLWdOdFhcWVeX57s+w+4G5NMjdrqK/Rysh6Sk/WQe7dSuH4lls1Bn+DXrTHH912pYCQqj9vi0uNiO1PTMitoHyv5yxllejMztbb7WkIi/Vetx7xqVapWqUJqbi5bxowgJP7J/W1FGFlUQU+fMheUfJhRgHE1zafHxtUM0DfQQ6+KaubdopYRD9ILKMwvRN9QHxNrAyxrqS+ksahpxJ0g7W5D5h8aTfBtVbmpWjwGsy09BrMwJbycMVhadvEYzKL0eUv55zkAV4s/19mumtYnuJVlrPS40My03HMpTf29bYlV3S1q18TWzBT/dyYqnzfQ12fWSx0Y6+tN1+9XajWGv8vOBpJLbf+ekgrmZkUYGym2I6lSpajMBSVT0hSv1RVlW2xSui02q1BbfDszg+E7N2FiYIh51aok5WTzw0t9dXrtI1Us6uXF3uTp/cqkpi15w9OXUfv+4Hrq08+bdU3Z35c+LsZmJOU+JRaPVrzRpDWjDm0s098/1rJ6LdysbJkasFNref7X+4duCfK/5l+9B3dBQQFr1qxhyZIlXL58WXm7cuUKNWrU4PfffwcUE83jxo1j3bp1fPvtt/zyyy+AYuXz5cuXlftVP03VqlV5VOqvfT4+PkRGRlK9enXq1aundrOyUu2x5+3tzZw5czh9+jRNmjRhw4YNT/08Hx8fwsPDy7xvvXr10Nd/tkPfrFkzAgICyM/PL/OcpaUlNWrU4NSpU2qPnzp1Cg8PxQVzGjVqRHBwMA9K7AMaFBRUJp/Xrl3DxcWlTD7NzMxwc3PD0NBQefFOUFz8MyIigieZM2cOGRkZarc5c+Y8U9wA+Y8KuRaXQGtX1R6TenrQ2tWZy3c0n4xciY2jtav6Xop+brW5HPvsJy/akvMgn7sJ6crbzTspJKdl0aKpKn+mJlXxqOdESOST9zZ979UudGxVj7cW/EFckvogPS4pk6TU+9Suof67utpO1sQnaXdAD4qJj5DEBNrWUsWhB/g51+Zi/N//ns/H3cXVWj2GutWsuXu//MnmiigoekRYRhy+dq7Kx/TQw9fOlStpz36xKz09PeUeqQb6VTDUN6AI9Q70EYXPtG//X5GTl8/tlAzlLTpBsarHt56qvpgZVaWZsyNXbmsuX/mPCgm9m0Dreup1zLeeM1eKT6CW+59j4LdrGfzdOuUNYNHu43ykpQtO5ubmcTcuXXmLuZ1CSmoWPp6qC8iYmlSlUQMnrl3/a/sA6+vpKSfMNdEr/u9Jaf6u/MJCQlLj1S4QqQf4OdbhYnL5K5Qne/gytWlbxh3dVGYCy1Bfn6pVqlBYapD2qKgIfR2t5swvVLTFbVxKlBOgjUv5bfHlu3G0qVuqLa5bm0t345TveTUuAVdb9bPCurbW3MvQfrv1WH5hISEJCfjVVm+/2tSuzaW4ivUTc7t0oXu9eozevJk7mbqL4bHHbbGfc9m2uKKxlKanp6fcq1dbch7kcycxXXm7cS+F5PQsWjZSxWNmXJUmro5cjf778RhU0cfQoApFhep1prCwiGccij0zRZ2Pw8/BRfmYos67cOkJdf71Rq15q0lbxvtvfOKk9f38h6Q+zMHFwpqmNk4cuvPkcVhF5Bev6PMr3dfXqlhf/9jQhk1Iyc3haIxutr7Kzckj7naK8nY7KpHUpEy8Wqv2+Tc1M6JBM2euX3n2P3IYm1bFydmG1KTyxyZ6xf97PKmuLfmFhYTEJ+BXR70t9nNxVratpV26G4dfHfW2uK1LbY3ps/LySM3NpY51NZo6OnA4MrpMGm3RN9SnmqsJiVdVE0FFhUUkXs3G1l3z4h7bhqZkxeep1eWse3kYWxugb6iozLYNTLl/T/0CjPfjHmJqX/aXsBWR8zCf2JQM5e3xGKx1fQ1jsFuaxy0FxWMwX01jsFvl17GGNRSr1ZMztf/Lh3L7+7rOXCqvv78TR2sN/f3j8cHOq2H0/3ktA35Zp7wlZGaxIvACEzdU/Net2uLVGIIuqD92+rzicYCqhtDYXT1NYSEEXVSl0YVy2+KatbmYUPFrY+QW5JOUk41lVSM6OLtw6KburhmUX1hISHI8fiUuEKkH+NWow8XE8mOZ3KwVb/m0YdyBLVxN1t0f3v6Kx2N8P01j/KQnj/HfaurHuCN/PLG/H17Pk+CUOMLS/v4f+MW/V2pqKqNGjcLS0pJq1aoxYcIEsp5h4U1gYCBdunRR7irRoUMHcnP/2n73/+oJ7j179pCWlsaECRNo0qSJ2m3w4MGsWLGCTz75hJ07dxIVFcW1a9fYs2ePcg/skSNH4ujoyIABAzh16hQ3btxg69atBAYGavw8FxcXgoODCQ8PJzk5mfz8fEaNGoWdnR0vv/wyAQEB3Lx5k2PHjvH2229z584dbt68yZw5cwgMDOTWrVscPHiQyMjIZ9qH+5NPPmHNmjXMnz+fa9euERYWxsaNG/noo4+e+TuaOnUqmZmZjBgxgvPnzxMZGcnatWsJD1fsxTRz5kwWLVrEpk2bCA8PZ/bs2Vy+fJl33nkHgFdeeQU9PT0mTZpEaGgo+/btY/HixWqf8eabb5KamsrIkSM5d+4c0dHR/Pnnn7z66qs8evQIc3NzJkyYwMyZMzl69CghISGMHz/+qZP0RkZGWFpaqt3+6vYkq09fZGjzprzs5YGrnQ1z+3bFpKoh2y8qtuL4clAP3u2m2qJlTdAl2tWrw3g/H+raWfNm59Y0ruHAhjOXlWmsTIxo6GhPPXvFxEpdO2saOto/l326/9h3kXEDW9OuuRuuznZ88mYvktOyOHFONZhY+tEQBvfwUv57xoSu9GjfiLlL95GTm4eNlSk2VqZULXGBmfW7zzO0lw+dfetT06Eak4b5UaemNXv8r6ILyy9fYETjpgxq6IGbtQ2fde6GqYEhW0IVF4pa8lJPZrZpp0xvqK9PIzt7GtnZY6hfBUdzcxrZ2VPHqpoyzcrLF/BycOL/WrSijlU1+rs3ZGSTZqwN1t1+fWtunGZw7eb0r+VFXXM7PmrWF5MqVdlxW3EB1c+9BvF2Q9VP6CfUa09rOzdqmlpT19yOsa5+9K3lyd67ihVa2QUPOZd8k/cadaeFrQs1TarRv5YX/Wp5cTROu6uDNVl78iKTu/jSuZEr9R1tWTi8B4mZ2Ry5pjpJXTFpMK+0UV0hfXXARYa0asrLPh64Vrfhk4FdMTE0ZPt5RR1LzsohKiFF7QYQl36fu2m6m8TbvPM8Y0e0wc+3Hq517Phgeh9SUrM4GRipTPPN58MZ2Ndb+e9J4zrQrHEtHKtb4lrHjknjOuDVtDaH/RVb3Dg5WjFqqC/u9Ryobm9B40Y1mP/ByzzMKyDonG4mWZaHnWVEfS8GuTbFzdKWz3x7KupKtOKCMUv8+jLTq6My/WSP1rzr2YFZgfu4k5WBnbEZdsZmmBooTs6z8vMISrjFHJ8u+DrUppaZFYNdmzKobhP+jNXdHn2/nbnIMO+mDGzqgZutDfN7KcrJ1mBFOfmqXw+md1K1xavPXqK9ax1e8/XB1daat9q3pomTA+vOX1amWRF0nl4e7gzzakJtaytGt/Ckc31XNlzQ3opHTVZeuMDwpk0Z5OGBm40NC7p1w9TQkC3XFLEs7tmTGe1KtV/29jSyt8ewShUcLSxoZG9PnWrVlGnmd+nCgIYNeXffPrLy8rAzNcXO1BQjA93+UG/FxQuMaNKUQY0UbfGCrsWxhBbH0r0nM9uWE4t+FRzMimMp0RbPbNuOljVrUtPSkga2dsxs247WtZzZdV33bdjvhy8xoa8vHTxdcatpx/yJPUlKz+LYRVUf+d8ZQxjWxUv5bxMjQ9yd7XF3VvzqrqadFe7O9jjYKLaey36Qx4XrsbwzrAPNG9Sihp0lfdt60NvPA/+L2j+RX3H9LCPqeTGorqLOL2jZS1Hnbyjq/OI2/Zjp2UmZfnKj1rzbrAOzzuzlTnbZOg/Qy7khvtVr42xWjW4167Om80gO3YlQ7tOtK8svX2CkR1MGN1CUr887Kfr6zcUXhVzStSfvt1YvXx529njYKeqKg7k5HqX6elBMAgxp1ISt10N59BxXVO1Yc4oRU7rg27kRLvUdmP7lUFIS73P6sGobtIUrJ9DvFdVWfhNn9qJpy7pUr1GNRl61+fj70RQWFnJ8r6KdcqxlzbBJHannUQN7JysaedXmg29fIe9hAedOaL9NXnnuIsM9mzKwiaIt/rSHoi3eclVR57/u04MZHVRt8aoLl2hftw4TWvrgamPN221b08TRgbUXLyvT9GpQH1/nWjhbWdGtniurhw/iUGQ0J2N0u32Pe19bbh5JI+ZYOpl3HnLx1zgKHhbi0lmx2OHs93e4ul41meXW3Ya8rEdc/i2e+/ceEnfhPte3J+HWQ/WH0vp9bUmNzCFsWxJZcQ+5HZDOzcNp1OupwyW2xdaevMjrXXzp5KEYg32hYQy2fNJgRvqpxmBrisdg/ZsrxmAfD1Sc5+woHoM521gxuasvHjWrU8Pakk4ernwxogfnbtwhIj5ZJ3H8FnSRYT5NGdBMce41r7eijG27osjTopd78F6XEudeZy/R3q0Or7ZW9PdTO7SmSQ0H1p27DEB67gMik1LUbvmFj0jOyuZm6eXQWpSdA2GRihvAnTjF/XvFReqbX2CWahdRRrysSPP1j3DjFmzYDgeOwbihqjTjhsHmvbDjAETHwPxvIDcXBvbSWRgALL9ynpGNmjG4QWPcqtnweYeXMDU0ZPP14ra4Sy/e922vTG+or4+HrT0etsVtsZkFHrb21LGspkzTwdmFjs4u1LKwol2tOmx8eTjR6alsDtftRX+XXz3PyAbNGFy/OJZ23RWxRBTH0qk377dUxTLFsxXvtWjL+8cPcOd+JvYmZtibqPeRVkbGeNhUp5614pc1rtWs8bCpjr2J7q4jALA89Cwj63sy2LUJbpa2fO7bA1ODqmwuMcZ/31s1xp/S2Jf3vNrzfuB+7mRlYG9shn2p/h7A3LAqves0YFOkbsfD4p9r1KhRXLt2jUOHDrFnzx5OnDjB66+//sTXBAYG0rNnT7p3787Zs2c5d+4cU6dOfeaFuY/9q7coWbFiBd26dVNbKf3Y4MGD+eqrr+jXrx9z5swhJiYGExMT2rdvz8aNiv2Hq1atysGDB5k+fTq9e/emoKAADw8Pli1bpvHzJk2apLxwZFZWFv7+/nTq1IkTJ04wa9YsBg0axP3796lZsyZdu3bF0tKS3Nxcrl+/zurVq0lJScHJyYk333yTyZMnPzW+Hj16sGfPHj799FMWLVqEoaEhDRs2ZOLEiU997WO2trYcPXqUmTNn0rFjR6pUqYKXl5dy3+23336bjIwMpk+fTmJiIh4eHuzatYv69RXbOpibm7N7926mTJmCt7c3Hh4eLFq0iMGDBys/4/Eq8FmzZtG9e3cePnxInTp16Nmzp7JAf/3118qtTCwsLJg+fToZGbrf921/SATWpia83aUNduamhMUn8fra7coL7DhZWaitZLwcG8fMLft5p6sf73Zry62UdN76fReRiaqfwXdu4MbCQT2U//5mWB8AfvAPZJm/+up2bVu36xzGRobMev0lzE2NCA6/y3sLt6nt/VvToRrVLFSrVwZ19wLgv/OGq73XZ/89wL7jisHmH/suYmRowNtjO2NpbkzUrSTe+WwrdxN0c4z2RoZja2LCe75tsTMzJSwpifG7tiovGlLD3FLtuFQ3M2ffyLHKf7/u05LXfVoSdCeWkdv/ACA4MYEp+3Yxs0073m7ZhtjMDBYE+LMz4rpOYgD4814I1lVN+b8GXbAzMic8M543zqwlNU+xKsbRxIrCEquxTapU5cOmfXEwseTho3xuZiXzwaWt/HlPNRh8/+Jm3mnYjYXeQ7CqakJcbjrfXz/CH7fO6SyOx1YcP49JVUPmDe6GhbERF2PuMXnlNvIKVOXL2caKamaq8nUgOAIbMxOmdm+DnYViO5PJK7eXucDQ8/b7lrOYGFdlxlvdMTcz5mroHWZ+vFmtrtRwqoaVpeoPU9bVTPlgeh9sbczIzn5IdEwSMz/+g/OXFReiyct7RLPGtRjycgsszI1JS8/mSsgd3pyxnvQM3cS791YYtkamvNesPXYmZoSlJTL+6B/KC0/WMFOvK6PdvTGqYsCPHdW3tvo2OIDvghX7078VsJP3vTvxbdv+VKtqzN3sTBZfOc76SN39MWhfmKKcvN2xDfZmpoQlJDFhY/lt8aW7cUzfsZ9pnfx4r1NbYlLTeXPzLiKTSuyFHh7N3P1HmOzXko+6d+Zmaipvbd3NhTsVX5H0JHsjIrAxNWWanx92por269Vt20gpvlijk4V6LNXNzdkzZozy35NatGBSixYExcYyavNmAEZ7eQHw+7Bhap/1/oEDbA3V3TUE9kZEYGNiyrttimNJTmL8jm3KC0/WsLRQa8Oqm5uzd5QqltdbtOD1Fi0IuhPLK1sUsdiamLKkR0/sTc24n5dHeHIS47dv5eRt3e9VvXr/OYyrGvLBuJewMDXicuRd3v6PehtWy96KauaqNszDxYGf31d97++N6ATA7lPXmL/yTwA++Hkvbw5ux4JJvbE0MyY+JZMft59k67Fgrcew93YYNsamvNusA3bGZoSlJTDef5PywpM1TNXr/Kj6PhhVMeC/7Qervc93VwP47moAANVNzPnQp1vxVidZbLt5lR9CdH99jT1R4diYmPCub1vsi8vXuD2qvr6mhSVFJWJxMDNn33BVXz/ZuyWTvVsSdDeWETv+UD7ezrkOtSws+SNMtxMppW1efgJjk6q8PX8g5pbGXLt4i49f/01tn2yn2rZYWqv6FTtHK2YtHoFlNVMyUrO5djGGd0f8SEbx9ll5Dwto0qIuA8a2xdzShPSULELOx/DeyB/JSNX+Ctt91yOwNTVhWjtFWxyamMRrf2xXtl81LMu2xe/t3s+77f2Y3qEtMWnpvLFtF5EltoeyNzfjgy4dsTUzJSkrm+3XQll26kyZz9Y257ZWPMwsIHRTIg/SC7ByMabdh3WUW5TkJOer/frN1M6Q9h/W4crqeA7NiMbExoB6vW1p+LKdMo1NPRPazKxNyPoEwrYkYVbdEM/xjtRuX03n8aw8VnYMNmVFqTGYrRXWJcdgVyKwLjUGm7JCNQbLf/SI1vVrM6adNyZVDYnPuM+hq1H8fER3x2d/aAQ2psX9vbmiv5+4oUR/X7qM3Yljxvb9TOvsx3udi/v7P9T7+xfhWjiMm6YqP4uWKe4P6FnEwjmQlAJxJRbH1nKCn76EL3+AtVvB0R4WzIR2rVRpeneBtHRYulJxUcpG9eCXr3W7RQnAnuhwRV/fsmRbvEXVFptraIuHjVP+e7JXSyZ7FbfFuxTXB7GoasT7vu1xNDcn48ED9t+IZPHZAAoKtX/RdbVYboQr+sjmbbE3NSMsJZFx+0vEYmahFsvoRl4YVTHgp5deVnufby+c4tuLpwF4qbYbizv1Vj73Q9f+ZdLoJJZb1xWxeLbHvniMP+7oJuUYv6aZpdqveke7K/r7nzoOVI/lykm+DVb16f1cGqGHHrtidL+w4F/lX7JFSVhYGAcOHODcuXO0aNECgO+//57evXuzePFita2hS3r33Xd5++23mT17tvKxp11zTxO9oqJ/yTctRAmNPvnPi85ChYR9+q7yvt/wJS8wJxV3etN05f2631fuWG6+pYql2e5PXmBOKia436fK+41nVe66cm2Rqq507PPVC8xJxR3f+77yft11C19gTirm5mjVVlHun1fu8hXxoap8uX3zzQvMScVFv/ee8r7rt5U7lhvTVLG0mFB5Yzm/osQx2fDFC8xJxd145QPlfZdllbuvj3lT1df3avTsW9/9L9ofpupL6i2qvO1x1CxVW/xhcNlrD1Umnzfbprzf5P3Ke0wAQr5SHZcGCypvLOEfq+IojHd/gTmpOH1H1dZSLj8ufkLK/30xb8xQ3nf59esXmJOKi5k0U3nfZe2XLzAnFRMzZvbTE/1L9ar51ovOQhk7bizm4cOHao8ZGRn95V0PSlq5ciXTp08nLU31C5mCggKMjY3ZvHkzAwcOLPOaxMREHBwcWLp0Kb///jvR0dE0bNiQzz//nHYlftX6LP7VW5QIIYQQQgghhBBCCCHEv8XChQuxsrJSuy1cWLFFVPHx8VSvXl3tMQMDA2xsbIiP17zv+40biq06582bx6RJkzhw4AA+Pj507dqVyMhIja8pj0xwV2KNGzfG3Nxc4239+vUvOntCCCGEEEIIIYQQQvx7FRb+z93mzJlDRkaG2m3OHM2/TJs9ezZ6enpPvF2//ve2di0s3ppo8uTJvPrqq3h7e/Of//yHBg0asHLlyr/0Xv/qPbgru3379pGfn6/xOQcHh+ecGyGEEEIIIYQQQgghxP+yv7IdyfTp0xk/fvwT07i6uuLo6EhiYqLa4wUFBaSmpuLo6KjxdU5OTgB4eHioPd6oUSNu/8Vr8MgEdyVWp06dF50FIYQQQgghhBBCCCGEJpX80of29vbY29s/NV2bNm1IT0/nwoULNG/eHICjR49SWFiIr6+vxte4uLhQo0YNwsPD1R6PiIigV69efymfskWJEEIIIYQQQgghhBBCiL+lUaNG9OzZk0mTJnH27FlOnTrF1KlTGTFiBDVq1ADg7t27NGzYkLNnzwKgp6fHzJkzWbp0KVu2bCEqKoqPP/6Y69evM2HChL/0+bKCWwghhBBCCCGEEEIIIcTftn79eqZOnUrXrl3R19dn8ODBLF26VPl8fn4+4eHh5OTkKB+bNm0aDx484N133yU1NRVPT08OHTqEm5vbX/psmeAWQgghhBBCCCGEEEIIbavkW5T8FTY2NmzYsKHc511cXCjS8H3Mnj2b2bNnV+izZYsSIYQQQgghhBBCCCGEEJWSTHALIYQQQgghhBBCCCGEqJRkixIhhBBCCCGEEEIIIYTQtsJ/zxYlL5Ks4BZCCCGEEEIIIYQQQghRKckEtxBCCCGEEEIIIYQQQohKSbYoEUIIIYQQQgghhBBCCC0rKip80Vn4V5AV3EIIIYQQQgghhBBCCCEqJZngFkIIIYQQQgghhBBCCFEp6RUVFcnlPIUQQgghhBBCCCGEEEKLetpMetFZKONA6q8vOgtaJyu4hRBCCCGEEEIIIYQQQlRKMsEthBBCCCGEEEIIIYQQolIyeNEZEOJFaPTJf150Fiok7NN3lffbDV78AnNScSe3zlDed1vyzQvMScVFT39Ped/19y9eYE4q5sbID5T3Xb+r3MfkxjuqY9J26JIXmJOKO7V5uvK+y9ovX2BOKiZmzGzlfdf/VPLy9a6qfLn88vULzEnFxbw+U3m/7veVu67cfEtVV1q+VnnL2LmVJcrX6kUvMCcVFzNulvJ+rxPvvMCcVNz+Dt8p7/uOqbzlC+DM2hLjlkrc35fs612WVe72K+ZNVfvl/kXlPl+J+EB1vlKZYykZh8uPlfu8K+YN1XlXYbz7C8xJxek7Rijv19/82QvMScVFDv1Ied9zz8cvMCcVc6Xvghedhf9dsjP0cyEruIUQQgghhBBCCCGEEEJUSjLBLYQQQgghhBBCCCGEEKJSki1KhBBCCCGEEEIIIYQQQtsKC190Dv4VZAW3EEIIIYQQQgghhBBCiEpJJriFEEIIIYQQQgghhBBCVEqyRYkQQgghhBBCCCGEEEJoW1HRi87Bv4Ks4BZCCCGEEEIIIYQQQghRKckEtxBCCCGEEEIIIYQQQohKSbYoEUIIIYQQQgghhBBCCC0rKix80Vn4V5AV3EIIIYQQQgghhBBCCCEqJVnBLYQQQgghhBBCCCGEENomF5l8LmQF9/8YFxcXvv322xedDZ1atWoV1apVq/D76OnpsWPHjgq/jxBCCCGEEEIIIYQQonL6Syu4x48fT3p6eplJxWPHjtG5c2fS0tK0MnH5LFatWsW0adNIT09/Lp8n/r1eaeXJa22bY2duxvWEJD7f68/Vuwnlpu/RuD5vd/GjZjVLbqWms+RgACciY5TPv9SoHsNbNqNxjepUMzVh4H/XcT0+6TlEojBhRFv6dWuKhakRV8PvsfiXQ9yJSy83/eiBrejY2p06NW14mFfA1fC7/Lj2BLH30pRpbKqZ8n9jO9KymQumJlW5fS+VNVuDOB4UqbM4Rnt5MqlFC+zNzAhLSmL+UX+C4+M1pq1va8s0Pz+aOFSnlpUVC/z9WXXxklqaljVrMqllC5o4OOBgbs6UnTs5FBWts/w/NqZ+cyY19MXexJywtATmXThIcGqcxrQ9ajXg/zz8qGNhjYG+PjH301h+/Qw7YkLU0k1r2oERbl5YGhpxIfkOH587QExWmsb31GoszTyZ1LwF9qZmhCUnMe+YP8EJ5RwTG1vebeNHk+rVqWVpxYLj/vx2+ZLGtABTWrTk/bbt+e3SRRacOKajCNRNHO5Hv65NsTAzIvj6PRb/epg78enlph8zoBUdfeuXqCv3+HH9CW4X1xVHe0u2/neSxtd+tGQ3/kERugiDMe4+TG7si72JGWFpicw9e4grKZrL2Ih6ngxybUKDavYAXE2N5+tLx9XSx4yZrfG1X1w4yi+hZ7UfQLExnsXlq7jOz/N/QvmyLVG+rKxYcMyf3y6pl69RzZoxqpknNS0tAYhMSeH7M0Ecj4nRWQyPjfHwZrJnS8UxSU1k7qkjXEnSHMuIhs0YVL8xDWzsALialMDX506ope/hUp9RHl40tXPA2tiE3ltXE5qSqPM4AMY09eJ1nxL1/sRRrjyp3vv60bS6A7Usrfj0hD+/XblYJp2DmTmz/drTsU5dTAwNiElP5/0jf3I1sfy+V1smD/BjQIcmmJsaExx1ly/XHCE2Mb3c9N7uNRnTswUNXRywr2bOjO93cvySet9hY2nKW0Pa49ukDhYmRlyKuMvX648+8X0rYkwDbyY38VWVr7OHuZJcTp2v78kgt8aqOp8Sz9eXTqilX9y2N0PqNVV73fG7Nxh3eLNO8l9SX6d2DHHugnVVS25k3eXH6K1E3L+tMW03h1ZMbzBK7bG8wnxePjlD7bExdXrR07ENZgYmhGbe5IfIzdx78HzGYa8P8uPlzsXlK+IuX606QmxCernpx/VrSacW9anjZMPD/AKuRt7jh40B3I5X9CuWZsZMGtQG36Z1cLC1JD0zh+MXo/l5yymyc/N0EsM/qa8f08SLyd7FsaQkMffEUa4klh/Le638aGpf3H4F+LMyWL390tfTY1rLNgxs4IG9qSkJ2dlsuX6N788H6TyWUc09meDbHPvi85UFB/0Jjiu/zezZsD7TOvpR08qSmNR0FvsHcDw6Ri2Nm60NMzq3o1XtWlTR1yc6OYWp2/YQl3m/UsUS8cG7Gl+36MgJVpy5oO3sK41p7MVkr5aq8nXySPnly9qW91q1paldcfk6dbRM+TIzNGR6q3Z0r1sfOxMTriUnMv+kP8HljB+05dwVWPk7XIuApBQ9vv+siG7tn/yas5fgy2UQFQNO1WHKGBjYSz3N+u2wciMkp0JDN/jwHWjWSGdhKI1ya87EBm2wNzbnenoCn176k+C0exrTdq/ZgCkN21LH3AYDfX1uZaWyIvwMO29fVaZ5y6MDfZw9cDK1JL/wESFp8fwnxJ8rqZrfU5uG12nFOLd22BmZE5EZz5fX9hKSfvepr+tZoymLfIZxND6Md89vUHvu/9y7MKh2CywMjbmcepvPQ3ZxOztVVyEIoVWygluIJ+jVxJ1ZPTuw7FgQg39aT3h8Mr+OHYSNmYnG9F7OTiwe0putF0MY9ON6joRF8f3I/tSvbqtMY1LVkIu377Lk4MnnFYbSqAGtGNLbm8U/H+L1OevJfZDPNx8PoaphlXJf493YmW0HLjF5znrenb8ZgypV+M8nQzE2MlSm+eit3tSuYcPsL7cz7r1VnAiK5NP3+lG/bnWdxNGngTsfdOzI0sAg+q9dx/WkJFYNHoStiebjYmxgQGxGBl8HnCQxK0tjGlNDQ64nJTHvyFGd5FmTPrUb8YF3V5aGnKTfgZWEpSeyuvMIbI1MNaZPz8tlWegpBh9aTe/9y9lyI5ivfPvS3rGuMs3kRq0Z796Cj87tZ9ChVeQU5LOq8wiq6pd/jLUSS313PmjfkaVnguj3+zrCkpJYPaD8Y2JiaMDtjAy+OnWSxGzNx+SxZg4OjGzSjLCk5/eHoFEvt2RIL2++/uUwk+Zs4MHDfL75aPAT64pX41ps+/Myr3+wgWkLtmBgoM9/PhqCsZHib8mJKffpN+lHtdvyTafIyc0j6PJNncTRt05DPmrRhe+CT9Jn72+EpiWyputwbI01l7HWjrXZFRPKyEMbGHRgDXHZmaztNhwHE3Nlmpabv1e7zTy9l8KiIvbfDtdJDAB93N35oENHlgYF0W/9OsKSk1g96Anly6C4fJ0sv3zFZWXx1cmTvLxhPQM2rCcwNpaf+79MfVtbjem1pa9rAz5q04nvLpymz7Y1hKYksab30PKPiZMzu6LDGLlnE4N2rFcck95DcTBVHRNTQ0POx9/hyzPHdZr30vrUb8CH7Tvy3dlA+m5cqzgu/Qc/8bjEZmaw6HRAucfF0siILUNGkF9YyKu7t/HS+lV8cfI4GQ8e6DIUAMb2asnwbl4sXHOEVz/bQO7DfL6fPoiqBuXXexMjQyJik/hqXfl9x9dT+1PD3ooZS3cyev464lIyWTZjCMZVtb9TYF+XhnzUsgvfXTlFn92rFHW+27An1Hlndt0MY+SfvzNo31ricu6z9qVhauUL4NidG7Tc9IPy9taJXVrPe2kd7L153W0g62/9yVsXv+Zm9j0+a/IGVobm5b4muyCXVwI/Ut7GnZmv9vzQWl3pX7MD30f9wbTL/+HBozw+azoFQz3d79o4pk9LhnX3YtFvR5gwT9GvfPf+oCePwRo6s+XwZSbM/523F23BoIo+S2cNVvYrdtZm2Fubs/T3E7wyZzWf/vonbZq68NHE7jqJ4Z/U1/et14CP2nXku3OB9PljLaHJSazp9+T263ZmBosCy2+/pvi0ZHQTLz45cYRuG1bxZeAJJnu3ZHwzb12GQu9G7szp2oEfTgYxYOV6ricms2LEIGxMNcfiXdOJbwb0ZvPlEAasWM/hiCiWDelPfXtV/+dczYoNY4ZxIyWN0es302/5WpadOsPDgoJKF4vfdz+r3Wbv+ZPCoiIOhkfpLI6+bg34qG0nvjsfSJ8tawlNSWRN3yHYmmhui00MDBXl68yJcsvXok49aFerDu8d2UePTasJiL3Fun5DcTArv03UhtxcaFAPPp72bOnvxMGU2eDrDduXw9gh8PHXcLLEGoh9R2HRMnhzHGz9FRq4waQZkKLj9Ti9a3nwgedL/BAawIBDywnLSGBlh5HYlHvu9YAfw04x7Ohv9Dv4K1tvXuHLlv1o5+CqTBNzP4VPL/1J34O/MMJ/NXez0/mtwyvYVNX8ntrSw6kJMzx68XOEPyMCfiQ8M54fW43DpqrZE19Xw6Qa7zXqwYWUmDLPverWnpF1W/PZ1V2MPvkzuY/y+LHVOKrqy87GFVZY9L93+wfSyQT3yZMnad++PSYmJjg7O/P222+TnZ2tfN7FxYUFCxYwcuRIzMzMqFmzJsuWLVN7j2+++YamTZtiZmaGs7Mz//d//0dW8cTUsWPHePXVV8nIyEBPTw89PT3mzZsHQFpaGmPHjsXa2hpTU1N69epFZKRqFenj7TH27NlDgwYNMDU1ZciQIeTk5LB69WpcXFywtrbm7bff5tGjR8rXPXz4kBkzZlCzZk3MzMzw9fXl2LFjann+9ddfcXZ2xtTUlIEDB/LNN9+orWiPjo7m5ZdfxsHBAXNzc1q2bMnhw4fL/R5fe+01+vbtq/ZYfn4+1atXZ8WKFU89DoWFhSxcuJC6detiYmKCp6cnW7ZsUT5/7Ngx9PT0OHLkCC1atMDU1BQ/Pz/Cw9UnKXbv3k3Lli0xNjbGzs6OgQMHKp972vf9+DuvXbu28ntJSUkpk9edO3fi4+ODsbExrq6uzJ8/n4ISA6jIyEg6dOiAsbExHh4eHDp06Knxa8M4Px82Xwhh+6VQopNSmbf7MA/yCxjk00Rj+rGtvTkZFcPKUxe4kZzK0qOBhMUl8oqvlzLNrith/PfYGU7f0LwCSZeG9vVhzZYgTp6LJvpWMp99vw9ba3Pat6pX7mumf7aV/f7XuBmbQtStJL74YT+O9pY0cHNQpmnSoAZb918iLCqeewkZrN4aRFbOQxq4OpT7vhXxWvPmbLoawtZr14hKTeWjQ4fJzS9gSFPNx+VqQgJfnjjBnvBw8krU65KOx8TwzanTHIzS3WC3tAkNWrEp+jJbbgYTlZnMR+f2k1tQwFBXT43pzyTe5uCdCKIzU7idlc6qiHNcT0+khb2zMs2rDVrxw7VTHL4byfX0JGYE7cbBxILutRroNhaf5my6FsKW0OJjcvSwIpbGmo9JcEICX548wZ6I8o8JKCbu/tOjNx8cOUTGQ91PcD02rI8Pq7ee4eT5aKJvJ7Pgh/3YWZvTvuUT6srn29h37Bo37yjqyufLDijqSnE9KCwsIjU9R+3WoVV9jgSGk/sgXydxTPRoxcbIK2yOvkpURgofBh0g91E+w9yaaUw/7eRu1kVcIjQtkejMVGYF7UcPPdo6uSjTJD3IVru95FyfwPhbxGZl6CQGKC5fISXK1+Hi8tXkCeUroLh8FWguX0dv3OBYzE1i0tO5mZ7OktOnyMnPx9vRSWdxAExs1oKN14PZHBFCVHoKHwYcJLcgn2ENNMcyzX8v60IvE5qSSHRGKrNO/Imenh5ta9ZRptkeGcrSi4GcuntLp3kvbaJXczZdu8qWsGtEpaXyof8hcgvyGerRVGP64MQEFp46wZ7I8uv9lOatiMu6z/tH/uRKQjx3MjMJiL3F7Uzdla/HRr7kzcrdZzhxOZqoO8nMXX4Au2rmdPQpv96fvhrDT9tPc+yi5r6jtkM1mtWrwaK1RwiNSeBWfBpfrj2MUVUDevg21HoMEz1aKup8VHGdD/xTUefraT4m0wL2sC68RJ0/XVznHeuopcsrLFCr95l5D7We99IG1uzE/rjTHEo4w+2cBL6P/IOHhXl0d2xd7muKKCIt/77ylp6vvtJ0QM2ObLx9kKCUEGKy77E4fB22Rlb42Wn+frRpRE9vftt1hhMXo4mKTWbez8Xlq3n55Wva19vYGxDKzbspRN5O5tNf/sTJzpKGLop+5cadFGYv3c3JSze4m5jBhdBYftxyknberlTR19N6DP+kvn6iV3M2XrvK5uvF7dcxRfs1rNET2q/TJ9gdVX4szR1rcOhmFP63bnLnfib7oyMJiI3Bs7qjLkPh1VY+/HE5hG3BoUQnp/LJ/sM8KChgiKfm4zKupTcB0TGsOHOB6JRUvjsRSGh8IqObeynTvNepLSeiY/jaP4CwhCRi0zM4GnmD1JzcShdLcnaO2q1bfTfO3IolNl13/cpEzxZsDL3K5vAQotJS+PD4IXLz8xnWsJy6khTPwsDj5ZYvoyoG9HR1Z2HgCc7G3eFWZjrfnj/Nrcw0RjfWfN6gLR1aw7SJ8FKHZ0u/cSfUdIJZb4KbC4waBN07wuoSP/pZ/QcM7QuDekM9F5g3HYyNYds+XUSg8pq7L5tuXmJrzBWi7ifzyYV95D7KZ4iLl8b0Z5NuceheONH3U7idncbqqHOEZyTQwk517rU79hqnE28Sm51OVGYyC68cwsLQmAbVdLPQ67Exrn5siz3PzjuXuJGVxGdXd/OgMJ8Bzj7lvkYfPb7wHsKPEUe5k1N2Vfaoum34NfI4xxKuE3k/gY8ub8Xe2IIujs9hab0QWqD1Ce7o6Gh69uzJ4MGDCQ4OZtOmTZw8eZKpU6eqpfv666/x9PTk0qVLzJ49m3feeUdt0lJfX5+lS5dy7do1Vq9ezdGjR3n//fcB8PPz49tvv8XS0pK4uDji4uKYMUPx88Px48dz/vx5du3aRWBgIEVFRfTu3Zv8fNXkQU5ODkuXLmXjxo0cOHCAY8eOMXDgQPbt28e+fftYu3YtP//8s9pk8NSpUwkMDGTjxo0EBwczdOhQevbsqZzMPXXqFFOmTOGdd97h8uXLvPTSS3z++edqMWdlZdG7d2+OHDnCpUuX6NmzJ/369eP2bc0TnRMnTuTAgQPExal+Jrpnzx5ycnIYPnz4U4/FwoULWbNmDT/99BPXrl3j3XffZfTo0Rw/rr7C68MPP2TJkiWcP38eAwMDXnvtNeVze/fuZeDAgfTu3ZtLly5x5MgRWrVqpXz+ad/3mTNnmDBhAlOnTuXy5ct07tyZzz77TO3zAwICGDt2LO+88w6hoaH8/PPPrFq1Svn9FRYWMmjQIKpWrcqZM2f46aefmDVr1lPjryjDKvo0dnIgMFp1fIqKIDD6Nl61NE+AeDo7EVhq4vpk1C28nHU7YfIsajhYYWdtzrlg1QRIdk4eoZFxNGlQ45nfx8zUCIDM+6oTkJDwe3Txa4CFuTF6etC1bQOqGhpw6Vqs9gIoZqivTxMHB07fVsVRBJy+fQtvpxf/PT8rQ319mtg4cSo+RvlYEXAq4SbedjWf6T38HFxwtbThXJKizDmbVaO6iTmn4lWrge/nP+Ryyr1nfs+/w1BfnybVHThV6picun2rwpOF8zt1wT/mBqdin98fhGpUV9SV81dL1ZWov1lXsjSfrDdwrY573ersORKi8fmKUpQxx7JlLC4GH/tnKw8mVQwx1Ncn/aHmE1o7Y1M613RjU1SwFnKs2eM6r7F8aanO6+vp0de9ASYGBlyM091PSg319Wli58ipO6ViuXsLH4dnK1smBgZPPCbPy+N6f7JE3SwCTsXexqcC9b5bXTeCExJY1rMv5ya8wZ4RYxjRWPeTjzXtrbCrZs7ZUFU82bl5XLsRTzO3vx+PoYFi1dPDfNUf7YuKIL/gEV71tdsuG+rr08TWkVP3SpWve3+jzuept1utHWtzfthUjgyYyGetu1PNyFibWS/DQK8K9S2cuZyu2rqpiCIup0fQyMKl3NeZVDFiVau5rPGdxyceE6ltqppYdDS2xcbIiktpqvfMefSA8MxbNLSsq+nttKbG4/IVUrZ8Na337OXL3KS4X8kufxLY3MSI7Nw8Hml5ddY/qa831Nenib0Dp+6Uar/uVKz9uhB/j7a1alPXyhqARrb2tHCqybHbuvmVFihiaezkwOkY9VhO37yNV03NsXjVdFJLD3Dyxi28i9PrAR3d6nIzNY0VIwYS+M5kNo8bQTd3N12FAegmltJszUzpWK8umy/rZuwFJctX6b7+9jP39aUZ6OthoK/Pw0fqK+gfFBTQ0rFWRbKrdZevQZvm6o+1a6l4HCAvX7HdSck0+vqKfz9OowuGevo0tnbidIKqPhYBpxNi8LZ9tj6yTXUX6lrYKs+9NH3GcFcfMvMecD1dd9uqGehVoZFVDYKS/p+9+46K6ngbOP6lw9KbgIoiqCgWigoC9hJ777HGnqrGHpOoMcZoNMUUU0zsRqPGEntvKHawgAgIUqT33t8/FnZZmhhYDe9vPufscd2dvczszHPn3tm5c5/KXiuiCO+4YNoaW1f6uVnNu5OUm8HB8PLLwzWQGGOurc+NePkya+n5OTxIjqhym4LwX/LS1xocPXoUPT3Fy2BKz3Res2YN48ePZ+7cuQA0a9aMjRs30rVrVzZt2oS2tvSA2NPTkyVLpOt4Nm/eHC8vL7755ht69+4NIPs8SGd8f/7558yePZuffvoJTU1NDA0NUVFRwdJSfuAaGBjIkSNH8PLywsPDA4Bdu3ZhbW3NoUOHGDVqFCCdBb1p0ybs7KSd9MiRI9mxYwcxMTHo6enh4OBA9+7duXDhAmPGjCEsLIwtW7YQFhZG/frSTmnBggWcPHmSLVu28MUXX/D999/Tr18/2UB78+bNuXbtGkePHpXlz9HREUdH+S+sq1at4uDBgxw5cqTcDwAgHci3t7dnx44dssH9LVu2MGrUqHJ1UFZOTg5ffPEFZ8+exd3dHQBbW1uuXr3KL7/8QteuXWVpV69eLfv/kiVLGDBgANnZ2Whra7N69WrGjh3LypXySzxLylCd7/u7776jb9++svyXfC8nT56UbW/lypUsWbKEyZMny/K5atUqFi1axPLlyzl79iyPHz/m1KlTsu//iy++oF+/Mgt51TIjiQ7qaqokZGQqvJ6QkUkTc+MKP2Omp0t8epn06RmY6Sn3EqXqMDGSXq6UlKyYv6SUTNl7L6KiAh+81Z37/hGEhMfLXv90wz+snD+QE9veIz+/gOycfD5ad4jIKtYr/reMdXRQV1Ulvky9xGdmYmtiUut/T1mMtSTScmRnKLwen52BnX7lSyToa2hxbcj7aKqpUVhUxKe3T3K1eADTXEdXto2y2zTXrl4d/xuyOsksXyd2NaiTgc3taV3PgiF7dtU0iy+lJB4Sy8RKYnImpi8RK3OmdMP3cSQh4eWvWgEY2KMNIREJPHyinAFVWRvLUmwPcdkZ2BlWbxmOJS7diMlKxysqtML3R9i2ISMvl1NKXJ6kyvZlXLOYtzc1Y//YsWipq5OZm8vb//xDUKLy1hk01i4uS5ZiWeKyMrEzql5Zlrh2JSYz45XP1i5LXi9l9jc1rJdGBoZMaOPIZp87/Hj7Jo4WFizv0p3cggL+fuxX02xXytRA2k8npJbpw1MzMDX89/vP0OhEouJTeXdkJ9ZsO0tWTh5vvtEOCxP9au9PqquyfiUuO7P6Md+uqzTmn4fKXrsUGcLJsCeEpyXTWN+YhS5d2NprFMOP76SwSDmXuBpo6KKmokZSruIM7KTcNBoaVjwrLiIzlm8C/iQk4zm66tqMaNiDr53mMvv2GuJzUzDW1Jduo8ys7qS8NIw19JVSjhKmRtL2lZhSpl9JycCkmu1LRQXmTeiGb0AkTyMq7lcM9bSZOrQjhy48qPD9mvj/1NfL9sVl9l9xNdx/bbpzE30NLc6Nf4uCwkLUVFVZ732Vw08e1zTLlTKWVHJcnJGJrWkV5yvl0svPV0x1JehpaTLTvQPfXvJi/fmrdLaz4YcRg5i4ax+3wl68xu9/pSxlDWvjQEZunlKXJ5H39WXbV0a1+/qyMvLyuBMdyQft3AlKSiA+K5PBTVvgYlGf0NTkWsh17YlPBLMy1WVqAukZKmTnFJGaBgUFKpgaK/YfpsYQosTfuCrrIxOy06s899JT1+LqoDloqkrPvVbcPYFXrOKPVt2tmvJNx+HoqGkQm53GlMu7SMpV3kQEY00J6qpqJOQoLmeTkJtOEz2zCj/jbNyIYdYujL78U4Xvm2lJx5fKbTMnQ/aeUANFha87B/8TXnqAu3v37mzatEnhtRs3bjBhwgQAfH19uX//Prt2yQ9SioqKKCwsJCQkhJYtpZc3lAy6lnB3d+fbb7+V/f/s2bOsWbOGx48fk5qaSn5+PtnZ2WRmZiKRVNxh+fv7o66ujpubm+w1U1NT7O3t8ff3l70mkUhkg9sAFhYW2NjYKAwaW1hYEBsrvUHTgwcPKCgooHnz5gp/LycnB9PitToDAgIUlu4AcHV1VRjgTk9PZ8WKFRw7doyoqCjy8/PJysqqdAY3SGdx//rrryxatIiYmBhOnDjB+fMvXiM4KCiIzMxM2Q8GJXJzc3F2VlwHrm1b+aXqVsWz4WJjY2nUqBE+Pj7MmFHxTdGq8337+/uX+17c3d0VBrh9fX3x8vJSmPFeUFAgq29/f3+sra1lg9sl23iRnJwccnIUL6HV0tJCS0vrhZ/9/6B355YsnCWv/0Vf/F3jbX44oxe2jcx4Z9mfCq9PH+eJvkSbOSv+IiU1i86uTfls/iDe/XgPT8PiK9ma8G+k5+Uw8OTvSNQ18LC0YZlzL8LSk7kR++qXvFEmKz09Pu3ajUkHD1R5WXNteKNTC4VYWbjmYI23OX96T2ytzXj7kz0Vvq+pqU7vTi3Yul/5N576t95u1ZFBNi0Ze3o3OYUV18Hopm05FOJX6fv/dU+TEhm4cyf6Wpr0a9acr/r0Ydy+v5Q6yF0Tbzu6MsiuBWOP7iVHyXHxuqioqPAgNob116X3qfCLj6W5qRnjWzvW6gB3344tWDqpl+z/8749VGvbLq2goJBFPx7hk7fe4PwP75JfUMgtvzC87oegUvsrSNTI263dGNSkJWNP/akQ0/+Eyo+hA5Lj8U+K5cqI2XS0aMS16Nf7Q0tpj9NCeZwWKvu/X2oIv7b/iH5Wnux4puTr3svo49GCJW/J29eHGw7VeJsLJ/fEtqEps1btrfB9XW1Nvl4wjJDIBH47eL3Gf+9VeJV9/aswsKk9Q5q3ZM7pYzxJTMDBzJxPO3cnJiOdAwHK+4GutqkW75zOBQaz9Zb0pqD+sXE4N7BinHNbpQ1wvwojHVvxzyP/Otne5p07zlfd+3Jz8tvkFxbyMC6GI0GPaWOunCUhBamM/BwGn/4NXXVN3C1sWOrYm7CMZG7Gyfs/79hnDD79GyZaEkbbOvOd+whGnvuDxJzMKrb86kjUNFntPJKV9w+TnPffyJMgKMNLD3Dr6urStKniWnERERGy5+np6cyaNYsPPvig3GcbNWpUrb8RGhrKwIEDefvtt1m9ejUmJiZcvXqVadOmkZubW+kAd3VpaGgo/F9FRaXC1woLpb+ypKeno6amxp07d1BTU7wRzItmUpe2YMECzpw5w/r162natCk6OjqMHDmS3NzK73I+adIklixZwvXr17l27RpNmjShc+cX3La4OM8gXWKkQQPFS27KDvCWLrtK8QFNSdl1KrnRSm1KT09n5cqVDB8+vNx7JTP+/401a9YozDwHWL58uWy99hdJzswiv6AQU13F9maqKyE+reKOIb6C2dqmFczqfhWu3grCL1C+vE3JTYyMjSQkJMt/uTY2lBAUGvvC7c2b3hOPdra898le4hLlv+zWtzBkZH8XJs7dIpupGvQsDkeHhgzv68T6XytfZ/7fSMrKIr+wELMy9WImkRCXkVHJp/57knIypeUoM7PaTFuXuOzKy1EEPEuX3oHFPzmWpgZmvO3gwY3YMOKKZ4qU3YaZti5+Scq7TE5WJ5Laq5PW9Swwk+hyZNwE2Wvqqqq4NmjIREcnWvzwXa3NHLx6O5hHQfI70JfcUM6kTKyYGEkIDH3xza8+nNYDDxc73l2+RyFWSuvesRnaWhqcvKy8E15ZG9NRbGPm2rqytlKZGQ6uvN26I+PP7OFxcsVl7lCvIXaGprx35XCt5bkiVbavzJrFfF5hIc9SkgF4GBtLW0sLpji78PG52t1vlUjKLi5LmZtMmeu8uCwz2nbgbSc3xh/7i8eJr+6Gq5WR10uZfVgN6yUuI4OgRMXZqUGJifS1a/avt1mRyz7BPHxaPu5NDSQkpMjzb2qgy5OwF/eRVXn8LJbxK3aiq6OJhroayWlZbPl4HP6htbtfrqxfMdeWvDjmW7nydpuOjD+9l8dJVbev8PQUErIzsTEwUtoAd2peBgVFBbJZ1yWMNfXLzequTEFRIcHpEdTXkc5mK/mcsYY+Sbmp8m1q6BOcUbsDdlfuKvYrGsXHYCaGiu3LxFCXwGcvbl8LJvWgk5Mts1bvJTapfL8i0dbg20XDyczKZfF3RygoqP2ZYnW9ry9Nti8us/8yr+H+a6lHVzbdvck/QdKrmgIS42mgb8A77dyUNsCdlFnJcbGuhLiMKs5XyqWXn68kZWaRV1BAULzivjg4IZF2DZW35J0yylJae+sG2JqaMPfgsdrLdAXkfX3Z9qVbo/YVlprCmMN70VHXQE9Tk7jMDH7oPfCV3KPiZZiZQHyZm0UmJIKebhHaWtLlSNTUisrdUDIhSfpZZamsjzTV1iMuu/Kb4BYBYRnF514pMdjpmzG7hYfCAHdWQR5hGUmEZSThkxjJmb7vMKqJE788vqacsuRmkl9YgGmZmdWmmnrE55Qvi7WuCQ0kxmzsMF72WskPWXf6r2DIxe9knzPVUtyGqZYuAanRCEJdUOtrcLu4uODn50fTpk3LPTQ1NWXpvL0VZ615e3vLZnffuXOHwsJCNmzYQMeOHWnevDnPnytewq2pqamwNApAy5Ytyc/P58aNG7LXEhISCAgIwMHB4V+XydnZmYKCAmJjY8uVqWSJFHt7e27duqXwubL/9/LyYsqUKQwbNow2bdpgaWlJaGholX/b1NSUoUOHsmXLFrZu3cpbb71VrTw7ODigpaVFWFhYuTxbW1d/DaW2bdty7ty5Ct+rzvfdsmVLhfehfN27uLgQEBBQYZtRVVWlZcuWhIeHK6xFXnYbFVm6dCkpKSkKj6VLl1a77HkFhTyKiqGjrfz7UlGBjrbW+EREVfgZ3/AoOtoq/pDjYdcIn/CK0ytTVnYekdHJskdIeALxSem0byO/cZRERxOHZlY8DKh6iYR503vSxbUpc1b8RVSs4kGUtpb0B5LCMms9FhQWoqqEGxzlFRbyMCYGj1I/mKkA7o0acS/q1X/P/1ZeYSEPE6PwsLSRvaaCdF3te/HVP9FWVVFBU1V64hyekUxsVrrCNvXUNXEyrf9S23xZeYWFPIyNwcNasU48rBtxL/rf1cm18DD67tzGwN07ZI/7MdEcfuzPwN07avWEN7NsrERIY6Vda3l5JDqaODR9cax8OK0HXVyb8sHKv4iKTa003cAebbh6O5jkVOVdvihtY9Hl25hlY+7GVd4eZjm48X4bDyaf+4sHiZUf0I5p6sj9hCj8k2o2+PcispivqH3VcsyroIJmmR+ya1NeYSEP46PxKHWDSBXAo35j7sZU3rZmObryvos7k0/s50G88n6sehklce/ZsHy93P2XcQ9wOyoSW2PFa5ubGBkTmVa9Qc3qyszOIyI2WfZ4+jyB+OR0OjjIy6OrrUkrW0vuB9dOO8vIyiU5LQvreka0tLHg0r3gF3/oJeQVFvIwIRoPqzLty8qm6phv5cr7bT2YfGYfDxJefBJrKdHHWEuH2BcMmtdEflEBgWnhOBnJr55UQQUno+b4l5qlXRVVVLDRrU9i8WB2dHYCiTkpCtuUqGlhb9CYx6m1u0Zy2fYVElncvlqVb18PgqpuXwsm9aBru6a8u2YfUXHl+xVdbU02LhpBXn4BC745TG6ecmam1vW+vrS84tmvHmX3Xw1rtv/S0VCnqEyeC4uKlHq1Rl6h9HzF3abU+QrgbmONT2TFZfGJjMLdpsz5SpNG3CtOn1dYyIOomHJL/zUxMeZ5auXHNjWljLKUNtKxFQ+iYngcq9yrSyttXw0aVdnXV1dWfh5xmRkYaGrRxdqGMyHKW27l33BqBd53FF+7dlv6OoCmBrRqrpimsBC878rTKENeUSGPkqJwrye/54IK4FHPhnsJL3vuVfU80eqkqYn8ogL8U57jZmYre00FFdzMbLmfVP4eWCHp8Yy49D1jrvwke1yMCeBWQghjrvxEdFYqkZlJxGWnKWxTV12LNkYNK9ym8HKKCov+c4//j2o96hYvXkzHjh157733mD59Orq6uvj5+XHmzBl++OEHWTovLy/WrVvH0KFDOXPmDPv27ePYMemvqU2bNiUvL4/vv/+eQYMG4eXlxc8//6zwd2xsbEhPT+fcuXM4OjoikUho1qwZQ4YMYcaMGfzyyy/o6+uzZMkSGjRowJAhQ/51mZo3b8748eOZNGkSGzZswNnZmbi4OM6dO0fbtm0ZMGAA77//Pl26dOHrr79m0KBBnD9/nhMnTshmRIN0PfK///6bQYMGoaKiwieffCKbKV2V6dOnM3DgQAoKCmTrVL+Ivr4+CxYsYN68eRQWFtKpUydSUlLw8vLCwMCg2ttZvnw5PXv2xM7OjrFjx5Kfn8/x48dZvHhxtb7vDz74AE9PT9avX8+QIUM4deqUwvIkAJ9++ikDBw6kUaNGjBw5ElVVVXx9fXn48CGff/45vXr1onnz5kyePJmvvvqK1NRUli1b9sK818ZyJNuu3WXNsD48fB7Lg4hoJrk7o6OpwcG70jtgfDm8DzGp6Xxz1guA7d732D51FFM8XLj0JIT+bexpVd+C5UfkswENdbSwMjSgnr701+MmxYuUxadnKH2m976jd5k8siPhUUlExaYwfZwnCUnpXLkpPzD6dvkoLt8M4u8T0ksS58/oRa/OLVj65SEys3IxKV5HMj0zl9zcfJ5FJhIelcTC2b35cdslUtKy6OLajA5tbVi0pubLolTkjzt3+KpvXx5Ex+AbHc1bLi5INDTY/1BaL+v79iU6PZ31V6WXuGuoqtK0eDkhDTU1LPX0aWluTmZeHs+SkwGQaGjQ2MhI9jcaGhjS0tyc5Oxsomp5YKXE7wE3Wd9xEA8So/BNeM5b9q5I1DXYHyK9Yd/6joOIyUrjK9+LALzt4M6DxCiepSWjqaZGt/p2DLVpzSe35DG1JeAm77XyJDQtiYj0ZOa17UJMVhqnI5S3RjLA73fvsP6NvjyILa4T5+I68Suukzf6EpOezlfXStWJSXGdqKphoadPS7PiOklJJiMvjycJijOHMvPySM7OLve6Mvx17C6TR3QkIjqZ57EpzBjjSXxSOlduyWPlu09HcvlmEAdO+gDSZUl6d2rBknWHycwuHyslGlga4dSyIQuUFB+lbfa7yQbPgTxIiMInPoppLdsjUddkX7C0jW3wGEhMVhrr7klvPjy7lRvzHDsz5+o/RKSnyNZuz8jPJTNffrNmPQ1N+je2Z/XtFy+ZVRt+v3uH9X0qaF+PittXn+L25VVxzFuUxHxunmzG9kLPTlwMDeF5Whp6GpoMbtGCjtbWTPn7gFLLsvn+bTZ068+DuGh84qKY1qY9Eg0N9j2R3vBqQ7f+xGSkse7WFQBmO7oyr70nc84fIyItVbbWfkaevE4MtbRpoGdAveLZiLbFNziLy8x44czdGpXF5w4bevXlfmw0vjHRTHVyke7D/IrL0lu6L/7qesVxb6mnpxD3AH/43GH/yHG8096VY4FPcLSwZFzrtnx0/rTSylHizzP3mDrQjfCYJCLjUpk9zIP45HQu3ZXH/U8LRnLhbhD7zvsAoKOlgXU9I9n79c0MaW5tTkpGNjGJ0r6jZ/tmJKVlEZOYhl0DM+a/2Y1Ld4O58aj2Zz9v9rvFhk4DeJAQXSrmNdgXJF2TeUOnAcRkprHu7mUAZrd2Y55TJ+ZcrjjmJeoazHH05OSzJ8RlpdNI35il7bsRmprE5Ujl3TgP4GDkRebbjycwPYyA1DCGNuyKlqomZ6KlEyfm248nISeFraHS5QDfbNSHx2mhPM+KR1ddh5ENe1BPy5hT0fLlOg5FXmJsozeIzIojJjuBiTb9SchJ4Vp87a9ZXdaek/d4a4gb4dFJPI9LZdbI4vZ1R96+flgykou3g9h/1geAhZN70Me9BQu/PUJGdi4mhtJ+JSMzl5y8fOng9uIRaGmqs/znE+jqaKKrI51QlJyaVesDxP+f+vrNPnfY0LMvD2Kj8YmNZpqjdP+1z794/9WzLzEZ6azzlpelmUnpfkUPBzNzMkrtv86FBPNuezci01MJTEyglVk9pjm1k21TWbbcvMvaQX14GBXL/efRTHZ1RkdDgwP3pfWyblAfYtLS2XBRer6y7dY9dk4YxVRXFy4GhzDAwZ7WVhZ8ckJ+vvK7922+GTaAW+EReD8Lp4utDd2b2TJx5746VxYAXU1N+rZozpfnLis1/yU2+95mQ49+PIiLwScmimlt20n7+sfF7atHP2n7uiHt6zVUVWlmXKp96erjYFrcvorX2O5ibYMKEJychI2hER+5dyU4OZF9AcptXxmZUHpVmogo8A8EQwOobwFf/woxcbC2+PR87BDYfRC+2gQj+ksHrk9ehJ+/lG9j8mhYugZat4A2LWD7fsjKgmHKvcUWfzy5wTrXwTxMiuJ+YiRTmrmho67BgVBfANZ1GExMVhobHl4AYFYLDx4mRhGWkYSmqhpdrZoypHEblt89AUhvzPx2y06cf/6E2Ox0jDV1mNC0PRY6+pyIUO6yRDueXmOV03AepUTyMDmSCU3c0VHT5FDxDSQ/dxpBbHYqGx+fIbcwn6A0xQkpaXnSSTalX98Vcp0ZTbvxLCORyMwk3rXvSVx2Guej/RGEuqDWB7jbtm3LpUuXWLZsGZ07d6aoqAg7OzvGjBmjkG7+/Pncvn2blStXYmBgwNdff02fPn0A6U0Mv/76a9auXcvSpUvp0qULa9asYdKkSbLPe3h4MHv2bMaMGUNCQoJs6YktW7YwZ84cBg4cSG5uLl26dOH48ePlliB5WVu2bOHzzz9n/vz5REZGYmZmRseOHRk4cCAgvWnmzz//zMqVK/n444/p06cP8+bNUxjU//rrr5k6dSoeHh6YmZmxePFiUqvxK3ivXr2wsrKiVatWCutQv8iqVaswNzdnzZo1PH36FCMjI1xcXPjoo4+qvY1u3bqxb98+Vq1axZdffomBgQFdunRR+F6q+r47duzIb7/9xvLly/n000/p1asXH3/8MatWrZJto0+fPhw9epTPPvuMtWvXoqGhQYsWLZg+fToAqqqqHDx4kGnTpuHq6oqNjQ0bN26kb9++1S7Hv3Xi4ROMJTp80MMdMz0J/tFxzNxxUHbjSStDfYWTB5/wKBbuP8Gcnh7M6+XJs4Rk3v/zCIGx8oP07vZ2rBneR/b/r0cPAOCHC9f58YJy1+Pddegm2toaLJr9Bnq6Wjx4HMn8VQcUZvs0sDTCSF++NM2wvk7S/K0aq7Ct1T+c4MSFRxQUFLJw9QFmT+jC2qXD0NHWJDI6idU/nMD7rnJOfo8FPMFER8JcTw/MJBL84+J468DfJBTf+MjKQLFe6unpcXTSRNn/Z3Roz4wO7fEOD2f8X9ID9TYWFuweM1qW5uPu3QA48PARi06dUk45wvwx0ZIwr00XzLR18U+KYcrFvbKbn9SXGCiUQ0dNk8/a98VSR5/sgnyCUxP48PoRjoXJDzp+8fdGR12TLzr0w0BTm9tx4bx1cS+5Sl4j+VigtE7mdSyuk/g4phz6W3Yzqvr6ZepEV49j4+V1MrNde2a2a493RDhvHlDuyVN17Dp8Cx1tDRbN6o2eRIv7jyOZv/pvxVixMMKwVKwM7+MEwI8rFfu71T+e5PhF+W3hB3ZvTWxiGjd9Q5VaBoCjzx5joi1hnmNnzHV08U+KZfL5vcRnS+ulga4BRcjrZUJzF7TU1Pm5q+K9E771vcq396/K/j/IpiUqqHAk9NUc8B57Uty+3OUxP+VgFe1LT49jE0q1r/btmdleGvNv7pe2L1OJhA19+mKuq0tabi4B8XFM+fsAV6u4L0ZtOPo0QFqW9p6YS3TxT4hl8vH9shtPNtDTV5gBOMHBSVonvRV/qP/2jhff3pFe+tq7sR3ru/WXvfdDr8Hl0ijDscAATHV0+NDNEzPd4no5ckBWlvp6BuXi/vg4+bHcTJcOzHTpgHdEOOMO/gXA/dgYZh8/wkL3TnzQwZ3w1BRWXbmg1Ju0ldh+4hY6Whp8NFka976BkXzw9d/k5peK+3qGCn1kSxsLflks7zs+HNcNgKNXH7HyD2nfYWakx7yx3TAxkBCfnMHx635sPqKc/v5oaHHMO3WSxnxiLJPP/qUY86Xbl72ztH11LxPzPlf51teLgqIiWhrXY4Rdaww0tYnNSufy8xC+vndF6f3K5bh7GGroMaFxf0w0DQhOj+CThz+TXHyTyHpaxgpl0VOX8EGzsZhoGpCWn0lQWjjzfb4lLFN+1cO+iHNoq2nyQfMx6Knr8CjlKZ88/Jm8ovxyf7+27TgmbV9Lpxa3ryeRzPmqTL9Spn2N7OUEwM/LRits67NfT3Lsih/2NvVo3VR6/5y/N0xTSDN03mai4mt3tu3/p77+aFAAJjo6zHPzxLy4LJOPyvdfDfQVY8VCV4/jY+T7r1nOHZjl3AHvyHDGHpLuv5ZfOc98N09Wde2FmY4OMRkZ7H50n423lLsm+nH/J5hIdPigizvmuhL8Y+KYtrfU+UqZ4+J7kVHMP3yCuV09+LCbJ6FJyby7/wiBcfLzlTNPgll+4hyzPDrwce/uhCQm8v6Bf7gToZwbYyuzLAADHexRUYGjfsrvSwCOBhf39R1Kt6/SfX0F7Wu0fALaLKcOzHIqbl9HpOvu62tqscitM5Z6eqRkZ3PiaSDrb14hvxoT5mriUQBMniuftLf2R+nzoX2LWLMU4hIgqtTYaUMr6WD2lz/AjgNgaQ6rFkInV3ma/j0gKRk2/iG9KWXLpvDrV8pdogTgeIQfJloS5rTqirm2Lv7JMUy78icJOSXnXoYKx8USNU1WuPTDUiI993qaGs+CG4c5Xjx4XVBUiJ2+KcM8RmCiKSEpN4sHic8Zd2EbQanKvVLgVNRDjLV0ead5T8y09AhIjeKdm9tJzJWWxVLHkMKXvLHhluAr6Khp8GmbwehraHMvMYx3bm4nt1D5faQg1AaVorLXUb0CNjY2zJ07l7lz577qP/1KzZgxg8ePH3PlypUabSc9PZ0GDRqwZcuWCtepFl5ey0+/ed1ZqBH/z+bJnncasf415qTmrh5YIHtut+Hr15iTmgue/6Hsue2fX7zGnNTM03HyH8Fsv6vbdfJ0jrxOPEdteI05qTmvffNlz212fFlFyv+20IlLZM9tv6nj7WuevH3Z/PrVa8xJzYXOXCh73uT7uh0rIe/LY6XD1Lrbxm79Uap9bVv7GnNSc6GTF8ue97s85zXmpOZOdPlO9txtYt1tXwA3dpQ6bqnD/X3pvt7mx7q9/wp9V77/av5F3T5fefKR/HylLpeldDlsNtXt867Qt+XnXYXRzatI+d+navlE9rzZvs9fY05qLnDUx7Lnjkc/eY05qRnfgatenOh/1BsaY1+c6BU7nbfndWeh1ilvYaD/QevXr6d3797o6upy4sQJtm3bxk8//fSvt1dYWEh8fDwbNmzAyMiIwYMH12JuBUEQBEEQBEEQBEEQBEEQ6jYxwF2Lbt68ybp160hLS8PW1paNGzfKltn4N8LCwmjSpAkNGzZk69atqKurK7xX1Y0z/fz8aNSoUaXvC4IgCIIgCIIgCIIgCIIg1HWvZYA7NDT0dfxZpfvrr79qdXs2Njbl7sRdon79+vj4+FT62ZdZq1sQBEEQBEEQBEEQBEEQhNpVVPjKV4b+nyRmcNdR6urqNG3a9HVnQxAEQRAEQRAEQRAEQRAE4bVRfd0ZEARBEARBEARBEARBEARBEIR/Q8zgFgRBEARBEARBEARBEARBqG1Fha87B/8TxAxuQRAEQRAEQRAEQRAEQRAEoU4SA9yCIAiCIAiCIAiCIAiCIAhCnSSWKBEEQRAEQRAEQRAEQRAEQahlZwr3ve4s/E8QM7gFQRAEQRAEQRAEQRAEQRCEOkkMcAuCIAiCIAiCIAiCIAiCIAh1khjgFgRBEARBEARBEARBEARBEOokMcAtCIIgCIIgCIIgCIIgCIIg1EligFsQBEEQBEEQBEEQBEEQBEGok8QAtyAIgiAIgiAIgiAIgiAIglAnqRQVFRW97kwIgiAIgiAIgiAIgiAIgiAIwssSM7gFQRAEQRAEQRAEQRAEQRCEOkkMcAuCIAiCIAiCIAiCIAiCIAh1kvrrzoAgvA4tln/zurNQI49XzpM9d5389WvMSc3d3Pah7Hnz1XW7Xp4sk9eLzba1rzEnNRM6ebHsuf2qul0nAZ/I68RtYt2OlRs75LFis70Ot69J8vbVbE3dbl+BS+Xty3bjhteYk5p7+sF82fOma+t2vQQtltdLuxl1tyx3fivVp+z48jXmpOZCJy6RPW+yc81rzEnNhUxYKnvuMaZux/21vfK4t/227vaRT+fK+8fGv697jTmpuWfTFsmet/yk7u6/APxXyfdhrZbW3bI8WlNqX/zbV68xJzUXOmOh7HmzfZ+/xpzUXOCoj2XPC6Obv8ac1Jyq5RPZ87pcL6XrRBBeBzGDWxAEQRAEQRAEQRAEQRAEQaiTxAC3IAiCIAiCIAiCIAiCIAiCUCeJAW5BEARBEARBEARBEARBEAShThID3IIgCIIgCIIgCIIgCIIgCEKdJAa4BUEQBEEQBEEQBEEQBEEQhDpJDHALgiAIgiAIgiAIgiAIgiAIdZIY4BYEQRAEQRAEQRAEQRAEQRDqJDHALQiCIAiCIAiCIAiCIAiCINRJYoBbEARBEARBEARBEARBEARBqJPEALcgCIIgCIIgCIIgCIIgCIJQJ4kBbkEQBEEQBEEQBEEQBEEQBKFOEgPc/1JoaCgqKir4+PhUmubixYuoqKiQnJz8yvJVV0yZMoWhQ4fWaBvi+xUEQRAEQRAEQRAEQRCE/23qrzsDr0tcXByffvopx44dIyYmBmNjYxwdHfn000/x9PR84eetra2JiorCzMzsFeRWeJ3edHVkmkc7zPR0eRwTx+fHL/AgMqbS9H0cmjGnhwcNjAx4lpjM+jNXuBwYKnu/d8umjG3fllb162Ek0WHopp08jo57BSWRmjnMg6HdWqMn0eZ+YCRrt50jPCa50vSTB3age7tmNLYyIScvnweBz/n+ryuERSfJ0gzt1oY+HVtgb1MPPR0terz9I+mZOUotx/h2jkzr2A7z4npZdfoC959XXi99WzRjbldpvYQmJrP+/BUuBYcqpLEzNWFBj064NmqImqoqwfEJvHfgKFGpaUorx0R7Z2a1dsNcRxf/xFiW3zyLb3xUhWnHNnNkuF0r7I3MAXiQEM1X9y6XS29naMqSdl1xs2iEuooKgSkJvH3xIM8zlFcOgDfbOzLNvVSdnLzAg6rqpGUz5nQrVSfnrnA5KLTCtCv792Rsu7Z8ceoi227eU1IJFM0c7sGQ7sWx8iSSdVtfECuDOtCtvWKs/LBHMVaWvNWLDq0aYWasR1Z2rjTN3is8i0qqdLs1NdHemVmtyrSxhCramG2pNpYYzVd3L5dLb2doyhKXMm3sknLb2HgXR6a7Fbev2Dg+O32B+1EviPkuHjQ0lLavry4qxnzg0nkVfm7t+ctsvnGntrOvYGJbJ2a4tMdcoot/fBwrLp3nfkx0hWmbmZgyr6MHretZ0NDAkFWXL7DF565Cmjlu7sxx81B4LTgxkd47tyitDCUmOBfXi64u/rFxfHa26nrpZ9+MuZ2L6yUpmXUXr3DpaajsfYmGBgu7dqJ3czuMtHWISElh2x0f/vS5r/SyAMwe7M6wzm3Qk2jhG/ScNbvOER6bXGl652YNmNSnPS0b18PcSI/5Px7hok+wQpo7v1Xc1r7dd5kdp2u/rU1s7iKP+aRYlt88U3nMN3VkuG1rxZi/d0khvURdg8XO3XjDuhnGWjqEp6ew9fFtdgX61HreKyrLTAc3zHX08E+KZcWt0y8oSxuaG5rJyrLep6KydKd3w1JlCbjN7sBX069MH+XB4J5t0NfV4n7Ac77afJaI6ORK008c6ko312Y0qm9Cbm4+D54856ddlwkr02e0bmbFrLGdcGhqRWFhIYHP4pi7+gC5efm1XoaJbR2Z0b7U/uvChar3X+4etLaoJ91/XbrAlnuK3/X4tm0Z38aRBgYGAAQmJvD9DW8uhYbWet7LmtTSmZltXOX94/Wz+MZXXJax9m0Z0bQV9sbFsRIfzbrbl2Xp1VVUWdC+M90b2tJI35C03FyuPg/ly9uXic1MV3pZAN7v4c6o9m3Q19biXthzVh45x7PE5Co/86arI1M7FZ/nRMex+pjieY6muhqL+3ahfxt7NNTU8Ap6xmf/nCchI1OpZXmvlzsjO7RBX0eLe8+e89mhc4QlVF2WcR0deauLtCwB0XF8ceQCDyLkZVk+tCcdmzainoEemTm5+IRF8fXJK4TEKecYbKKDM7PadpC3r2vn8I2rvH0Nb94Ke+Pi/Vd8DF/duqyQvo9NM8a3dKKNmQXG2jr0P7ANv8RYpeS9rPF27Zhu7465th6Pk2P47N4p7ic9rzDtGw3smd3Ck8Z6JqirqvIsPZHfA25wOOyBLM37Dl0YYO2AlcSAvMICHiZF883DC/gmVrzN2nDLF/74Ex49gbgEFb7/vIhenav+zM178OWPEBQKVvVg9kQY1k8xza6D8MceiE+EFnawbA60bam0YiiozXpRV1FlXutudLVqirWuEWl5OVyLCWH9g/PEZr+afZgg1NT/7AzuESNGcO/ePbZt28aTJ084cuQI3bp1IyEhoVqfV1NTw9LSEnV15f5GkJubq9TtC1Xr16o5S/p04ceL3gz/ZRcB0fFsnjgcE12dCtM7W1uxYWR/9t97yLCfd3H2cRA/jB1Ms3qmsjQ6GhrcCYtk/Zmrr6oYMpP6d2BMbye+3HqOqZ/tJisnj40LhqOpoVbpZ1zsrdl3zodpq/7k/XX7UVNT5fuFI9DWlLd9bU11rj8IZes/N19FMejfsjlLe3XhhyveDP19F49j4/l97HBMJJXUSwMrvh7Wn32+Dxm6eRdnnwTx46jBNDOX14u1kSG7J43maUISE3buY9BvO/jx6g1y8mv/5LDEQJsWfNyhB9/5ejHgn634JcWyvddoTLUlFabvaGnNkRB/xp36k+HHdxCVmcaO3qOxkOjJ0jTSN2J/3/EEpyQy7tRu+v6zhe/vXyOnoEBp5QDo59Ccpb278ONlb4b9tovHMfH8/mYVddLQig3D+7Pf5yFDf9vFuYAgfhytWCcletnb4djAkpjUV3dwNXFAB0a/4cTaLeeYtmI32Tl5fLeo6lhxbmHN/rM+TFv5Jx+s3Y+6miobF49AW0seK49DY1j12ynGLt7KnHV/g4oKGxeNQFVFRSnlGGjTgo/bF7exo9VoYxbWHAn1Z9zpPxl+YgdRGcVtTKdUG9Mr1cZOv5o21r9lcz7q2YUfrnoz9I9d+MfE88eYqmP+myH92e/7kCF/7OJsYBA/jRhMMzN5+3Lf+IvCY8nRUxQWFXEqIEhp5QAY0Myejzp3ZeON6wzaswP/+Di2DRmBqU7FZdFRVycsJYV1XleIzag8BgIS4nHdvEn2GL1/j7KKINO/RXM+6tGF7728GbJVui/eMvoF9TK4P/vuP2Tw1l2cCQxi03DFevmoR1e62Now/5+T9Nm8jS2377G8d3d6NrVVenkm923P2J5OfLHzLJO/+JOs3Dx+mDscTfXK415HS4MnEXGs3X2+0jRvzP9F4bFiyykKC4s4f7f229rAxsUxf/8qA45tkcZ8zzFV9CuNOBLqx7gzuxl+cjtRGans6DVGIeY/bt+TrvVtmed1lF5HNvPH41usdH2DXg2b1nr+SxvQuCXL2vXku/tXGXj8D/yTYtjWYwymWhWXxc2isbQsZ3cz/NR2ojLT2N5zrGJZ2vWkS31b5l37h17//MaWx7dY2UH5ZQGYMLgDo/o589Xms0xftpvs7Dy++WhE1f1Ky4YcOOXDzI93M2e1tF/5dtlIhX6ldTMrvv5oBDfvP2P6sl1M+2gX+0/eo6ioqNbLMKB5cz7q0pWN3t4M2r0T/7g4tg0bXvn+S6N4/3X1aqX7r6i0dNZ5XWXIn7sY+ucuroeH88ugITQzKX88UJsGNmnBx27d+e6eFwMPb8M/MY4dfSvvH90tG3HkqT9jj+9h2D87eZ6Rxo6+8mMwHXV1WptasNHnGgMOb2fWuYPYGprwe6/hSi1Hiemd2zOhoxMrjpxlzC9/kpmbx2+Tq95/9WvdnMX9uvDjBW9GbJKe5/w2WfE8Z2m/rnSzt2XunmNM+mMf9fR12ThukFLLMq1Le8Z7OLHy0FnG/STdF/86teqy9G3TnEUDuvDTOW9G/bCLgKh4fpmqWBa/yFg+3n+aQV9vY+aWg6gAv00drpRjsIG29nzcsRvf3b3GgIPb8UuIY3u/UZXvi+tbcyTIn3FH9zL88C6i0lPZ0W+UwjG+RF2D29ERfHnzUq3ntyr9GzrwkWNvfvC7wtAzm/FPieGPLuMwqWRfnJybzSZ/L0af38Kg079xIMSXLzsMopOFvB8PTUvgs3unGHj6V8Ze2EZkRjJburyJiWbF26wNWVlg3xQ+mVu99BFRMHsJuDnDwc0waSR88hVcLXW6e/w8rP0R3p0MB34DezuYsQASlDdvRaa260VbTYNWxpb8WLy9967tx1bflJ89Ryu/MIJQS/4nB7iTk5O5cuUKa9eupXv37jRu3BhXV1eWLl3K4MGDAVBRUWHTpk3069cPHR0dbG1t2b9/v2wbFS1Rcvz4cZo3b46Ojg7du3cntIKZB1evXqVz587o6OhgbW3NBx98QEZGhux9GxsbVq1axaRJkzAwMGDmzJnk5uby3nvvYWVlhba2No0bN2bNmjXVLuv06dMxNzfHwMCAHj164OvrK3t/xYoVODk5sWPHDmxsbDA0NGTs2LGkpcln4RUWFrJu3TqaNm2KlpYWjRo1YvXq1bL3Hzx4QI8ePdDR0cHU1JSZM2eSni4/iC0oKODDDz/EyMgIU1NTFi1aVO6gu7CwkDVr1tCkSRN0dHRwdHRU+L6r+/3WtikeLuy785C/ffwIjktk+dGzZOflM8K5dYXpJ3Z05mpQKH943eFpfCIbz1/HLyqW8a5OsjRH7vvz06UbXH8apvT8lzW2jzN//HODy/eCCQqPZ8WvJzEz0qOrS+UndnM2/M2xq348jUwgMDyezzafwsrMgJZNLGRp9py+x/Zjt3gYXPGsqtr2lpsLf/k85O/7fgTHJ/Lp8bNk5+cz0rHiepns6syV4FB+975DcEIi3126jl90LBPaO8nSfNjNk8vBoXx1/gr+MXGEJ6dwPvApiZlZSivHdIcO7An0ZV/QA4JSElh2/RRZBXmMbtqmwvRzrxxlZ8A9/JJiCU5NZPG1E6iggqdlY1mahc5duBAZzJd3LvIoMZawtGTOhgeRkK3cmTZvdXThr3sP+dtXWifLjxXHilPFdTLJ1ZkrQaH8fl0aK99dlMbKhA5OCunq6evySd/uLDh0krxC5Q7Slza2rzNbjtzg8t3iWPmlOFbaVR4rc7/6m2NX/AiJTCAwLJ7PfpXGSgsbeawcuvAAn4BIouJTCXgWyy/7vbA0M8DK3EAp5ZjesriNBRe3Me8XtLGrZdrY9eI2ZlWmjUUE8+Xd4jaWnszZCOW2samuLuz1fciBB34EJSTy6cmzZOXnM7JtJTHf3pkrT0PZfEMa899elsb8xHZOsjTxGZkKj57N7fB+Fk54corSygEwzbkdex8+YL//I4ISE/n4/Bmy8vMY5VBxndyPjeFLr8scDQwgt4ofEQoKC4nPzJQ9krKVt+8qMbWDYr18cuosWXn5jGpTcb1MaefM5aehbL5ZXC9XruMXE8tEFydZGpcGVvz90I8b4RFEpqay1/cBj2PjaGtlqfTyvNnThd+P3eSS71OCIuNZ/sdJzI106eZsV+lnrj0MZdOha1y4F1xpmoTUTIVHNyc7bgeEExlf+21tuoNrmZg/KY15u7YVpp979R92PikV894lMW8jS9POvAEHnj7AOyaMiIwU/gz0xT8pFkczq1rPv0JZWrqyN8iX/U+Ly3LjJFkF+YxqWnFZ5nkdYeeTu/gnxfI0NZEl3seL+0h5WVzMG/L30wfciAkjMiOFP4N88E+KwdG0vlLLAjC6vwtb/77BldvBBIfF89mPJzAz1qNLh8r7lQ/X/M3xS48IiUgg6Fkcn/90EktzA1rYyvuVDyZ3Y9+Ju+w4fJOQiATCopI47/2EvPza7zOnubRj78OH7Pcr3n+dk+6LR7WqOObvx8Tw5dXLHH1S+f7rfMhTLoaGEJqcTEhyMhuueZGZl4ezlZLbV+v27Am4z77AhwQmJ/CR1ymy8vMY3bziffGcS0fZ4e+DX2IswSmJLL56ElUVFTzrS/vHtLxcJpz8i2MhATxNSeReXBSfXj9LW3NL6uvqK7UsAJPcXfj50k3OP37Kk5h4lhw4ST19XXq1rHz/NdnDhX23H3LwnvQ8Z8U/0mO34S7S+tTT0mS4S2vWnrzMjZBw/J7H8tHB07g0ro9jQ+Xtkyd6uvDLhZtc8H/Kk+h4lv4lLUtPhyrK0tmF/bcecuiOH8Gxiaw8dJbs3HyGt5e3zX23HnAnNJLnyan4P49l45lrWBkZ0MC49o/Bprdpz57H99n35CFByQksu3pa2r7sK46VuReOsbN0+7pyChUVFTwbyI+/Dgb5sfHedbwin9V6fqsytbkbe0PucSDUl6C0eD69c5ysgjxG2jhVmP5m3DPOPA8gOC2BsIwktgXdIiAlhvZm1rI0/4Q/4lpsCOEZyQSlxrPG9wz6GtrYG9VTWjm6dIS506F3l+ql33MYGljB4nfBzgbGD4c3usK2ffI02/6CUQNheH9oagMr5oO2Nvx9XBklUFTb9ZKen8OUy7s5EeFPSHoiPomRrLx3kjYm9bHSUc55iiDUtv/JAW49PT309PQ4dOgQOTmVL6PwySefMGLECHx9fRk/fjxjx47F39+/wrTh4eEMHz6cQYMG4ePjw/Tp01myZIlCmuDgYPr27cuIESO4f/8+e/fu5erVq7z33nsK6davX4+joyP37t3jk08+YePGjRw5coS//vqLgIAAdu3ahY2NTbXKOmrUKGJjYzlx4gR37tzBxcWFnj17kpiYqJCvQ4cOcfToUY4ePcqlS5f48ssvZe8vXbqUL7/8kk8++QQ/Pz92796NhYX0wDojI4M+ffpgbGzMrVu32LdvH2fPnlUo04YNG9i6dSt//PEHV69eJTExkYMHDyrkc82aNWzfvp2ff/6ZR48eMW/ePCZMmMClS5eq/f3WNg01VVpZWXCt1EB0URFcfxqGk3XFB91ODa0U0gN4BT+rNP2rVN/cEDMjPW4+kucvIyuXR0+jadO0+vnT09ECICU9u9bzWB0aqsX1ElKqXoBrIWE4NaykXhpYKaQHuPr0Gc4NpOlVgK5NmxCSmMTvY4dxfe4s9k0ZS6/mlR9I15SGqiqtTS3xei4/SC0CvJ6H4mLeoFrb0FHTQENVleRcaV2oAN0b2hKSmsT2XqO5Pfo9DvWfyBvWzZRQArmq6sS5sjppaMX1CuqkdB2qAF8N6cvv1+8QFFe9q2tqgyxWHtZOrKRmVBwr2lrqDOzSisjYZGISan9pD1kbiyrTxqL+RRvLqaSNjXqPQ/2U28Y0VFVpZVlB+woNk8VwWc4NrLgWqti+roQ8w6mS9KYSCd3smrDf92Gt5bsiGqqqtK5ngVe4Ylm8wsNqPJhjY2TM9amzuDh5Gt+80Z/6esodUNFQVaW1pQVez16yXp6Vr5fS6e9GRtGzqS0WeroAdGzUEBtjY66GKPeEvoGZIWZGutzwl+cvPSuXh0+jaWtbe4OfJvoSOrVpwuGrtd/WNFRVaW1iiVd0qOy1fx/z8h9I7sRF0qthM9lMaHeLRjQxMObK89BKtlJzJWW5GhUie01WFrN/10cC3I2LoGepsnS0aEQTAxOulPo7ylC/niFmxnrcfiBvxxlZufgFRdG6WfXbl66kuF8pPgYzNtChdbP6JKVm8ctn4zj6y2x+XD6atvbV+45ehnz/VaZPCXtWa4PRqioqDGxuj466OnejlLdUgYaqKm3MLLlaqg0XAVefP8OlXvXqQ0ddsX+siL6mFoVFRaTmKnfZvobGhpjr63I9uNT+KyeX+xHROFpXXB4NNVVa1bdQmHBTVATXg+XnOa3qW6Cprqaw3ZD4JJ4npyrt3KahsSHmBrp4B5UpS3g0jo0qL4tDfQuuBymWxTs4DMdGFedTR0OdYe1aEZ6YQnRK7R6Daaiq0trMUmEgugjwinyZ9qVebl/8OmioqNLK2IprMYr74msxoTibVm8/417Phib6ptyKq3hyl4aKKmNsXUjNzeZxcuVLnL1qPo/AvZ3ia506SF8HyM2TLndSOo2qqvT/JWmU5VXUC4C+hjaFRUWk5b2e835BeFn/k2twq6urs3XrVmbMmMHPP/+Mi4sLXbt2ZezYsbRtK58VMmrUKKZPnw7AqlWrOHPmDN9//z0//fRTuW1u2rQJOzs7NmzYAIC9vT0PHjxg7dq1sjRr1qxh/PjxzJ07F4BmzZqxceNGunbtyqZNm9DW1gagR48ezJ8/X/a5sLAwmjVrRqdOnVBRUaFxY/kvuVW5evUqN2/eJDY2Fi0t6QHx+vXrOXToEPv372fmzJmAdPb01q1b0deXngxPnDiRc+fOsXr1atLS0vjuu+/44YcfmDx5MgB2dnZ06tQJgN27d5Odnc327dvR1ZWejP7www8MGjSItWvXYmFhwbfffsvSpUsZPlx6id7PP//MqVOnZPnMycnhiy++4OzZs7i7uwNga2vL1atX+eWXX2Tfz4u+39pmLNFBXU2VhHTFWYnx6Zk0MTOu8DNmeroVpM/ATE95l1tVl6mhNA+JKYr5S0zNwNRQt1rbUFGBD8d3w+dJJE8jX92AY2nGEh3UVVWJL7P2X3xGJramlddL+fQZmOlKvxNTXQl6WprMdO/At5e8WH/hKp1tbfhh5CAm7tzHrbDI2i+HlkRajuwMhdfjsjOxM6zeZblL2nUlJisdr+ITNDNtXfQ0tHi7tRsbfK7w5Z2LdG3QhJ+7D2PcqT+5ERNe28UA5HVStu0nZGRiW0WslK2ThHR5nQDM8OxAfmER21/RmtslTI0qiZWUDExeIlbmTeiGb0AkTyMUY2VET0feG9sZibYmoc8TeX/tAfILCmsn86XI2lhWmTaWlYmdwUu2sahQoIo21m0Y404rp43JYj6zfPuye8mYN69kXzy8jQMZuXlKX57EWKekLIp1Ep+ZiZ2xyb/erk90FAvPnCQkKRFzXV0+cPNg78ix9N21lYy8vJpmu0KyuC/7PWdWsS/WraReSsX9Z2cv8HmfXni9O5O8ggKKior46ORZbkXU/n64NFkfmVom7tMyZe/VhoEeDmTkUuJI2QABAABJREFU5ClleZJKYz47o/r9iks3hZgHWHHzDGs69uXGyPfIKyygsKiIpd4nuRmrnD4FSveRZdrLS5RlsXN3YrLSFQbJV9w6wxdu/fAe8b6sLB95n1BqWQBMjKR9R/l+JVP23ouoqMDcyd3wfRzJ03Bpv1LfwgiAaSPd+WHnJQJD4+jbxYGNn4xkwoJtVa7v/bLk+6/yMW9n8u/3XwD2pmbsHzMWLXV1MvNyefvoPwSVmoxT24y1S2KlTFmyMrAzrF5ZlnboSkym/BisLC01NZZ26MqRYH/S85S75GTJeUa5c5CMzEr7PaNKznMSSp3nmOlLyM3PJy1bcYA+Pj0TM/3qtduXZaYvkf2Nsvkqea+sSsuSlkkTc8X+aGzHtszv2xmJliZPYxOZ8fsB8mr5GMxYW6fC9hWXlYmdUfXa1xLXrsRkZrzy2dplVXa+kpCdjp1+5ftiPXUtrg6ag6aqGoVFRay4ewKvWMUfErtbNeWbjsPRUdMgNjuNKZd3kZT7egf0S4tPhLKnMaYmkJ6hQnZOEalpUFCggqmx4pXppsYQouQLtZVZLyU0VdVY2LYHR8MekZ4vls0V6ob/yQFukK7BPWDAAK5cuYK3tzcnTpxg3bp1bN68mSlTpgDIBltLuLu7KyxJUpq/vz9ubm7l0pfm6+vL/fv32bVrl+y1oqIiCgsLCQkJoWVL6d0I2rdvr/C5KVOm0Lt3b+zt7enbty8DBw7kjTfeeGEZfX19SU9Px9RUcSeXlZVFcLD8UlobGxvZ4DaAlZUVsbGxsnLl5OTQs2fPSsvt6OgoG9wG8PT0pLCwkICAALS1tYmKilL4btTV1Wnfvr1smZKgoCAyMzPp3bu3wrZzc3NxdnaW/Z0Xfb9l5eTklJuhr6WlJRvs//+uj3sLlk7pJfv/vK8P1Xibiyb1xLaBKTNX763xtv5LStbeO/ckmK3Fg6n+MXE4N7RinEtbpQxw19Tbrd0Y1KQlY0/9SU7x0h0qxeU4Ex7E7363AfBLisWlXgPG2zspbYBbGVpZ1mOSqzPDf9v14sQ11MejBUveksfKhxsO1XibCyf3xLahKbNWlY+Vk9f8ufnwGaZGuozv354v3hvIjFV7yM17dUuwVMfbrd0YZFNJG4sI4nf/Um3MvAHjm9etNlbaCMdWHHnkX+USIP9ll56Fyp4/TojHJzqaq2/NYEAze/7yU+6s9No2sZ0TTvUtmbn/MJGpqbhaN2BF7x7EpmeUm/1dE/3cWvDRBPmxzZzvD9XatqsyxLMVJ274k6uE5SNq6u1WHaUxf3q3LOYBJrdoh5NZfaZd2E9kegquFtZ85tqbmMw0vKJf7+BLZWYXl2XcmV3kli6LfTuczesz/cI+IjNScK3XiJWub0gH9UvNfK+pNzq1YNEM+XHtgi8PVpG6euZP7YmttRmzl8vX1y/ZJx86e59jF6VTBp+ExtK+dSMGdm/Nz3+++vu9/BtPkxIZuGsn+lqa9GvWnK/e6MO4/X8pdZC7Jt5u68Yg2xaMObanwvtPqKuo8mP3IaigwrJrp2v97w9s24IVg+X7r7d3Hqr1v/GqDHBqwYqhpcqy7ZBS/97Re4+5FhiGub4ub3Vux4Y3BzDh573/qX3y246uDLJtwdhje5V+Dx1lycjPYfDp39BV18Tdwoaljr0Jy0jmZpy8z/COfcbg079hoiVhtK0z37mPYOS5P0jMUe6yiv/LqlMvIN2HbXQfgQqw/O4rWG9FEGrJ/+wAN4C2tja9e/emd+/efPLJJ0yfPp3ly5fLBrhrW3p6OrNmzeKDDz4o916jRo1kz0sPFgO4uLgQEhLCiRMnOHv2LKNHj6ZXr17l1qiu6O9ZWVlx8eLFcu8ZGRnJnmtoaCi8p6KiQmGh9JdsnUpuGlObStbrPnbsGA0aKF5SU5PB6DVr1rBy5UqF15YvX86KFSuq9fmkzCzyCwoxLTPzwUxPUm5WQYn49IwK0utWml6ZrtwL5lGw/M7bJTcxMjGUkJAi/7XXxECXJ2EvvgP3gok96ORoy6wv9hKb9PrupJyUmUV+YaHCTF8AM10JcZXc0T2+zMxgaXr5TMKkzCzyCgoIilecaRscn0g769q/zBcgKSdTWg5txXg315YQV2b2XVkzWrnydpuOjD+9l8dJcQrbzCssIDAlXiF9cHIC7S0a1l7myyipk7Jt31S36lgpWyempWbdtm/UAFNdCRfmTJe9r66qyuLeXZjk5kzP7/+otfxfuRvMoyB5rGhUFiuGugQ+q0asTOpBJydbZq2uOFYysnLJyMolPCaZh0FRnP3lXbq1a8pp74BaKI2crI3plGljOhLisl/Qxhxcebt1R8af2cvj5AraWHKZNpaSQPt6ymljspiXlG9fcS/Rvsx0dStM375hA+xMTZh76FjtZboSSVklZVGsEzOJhLjMquvkZaTl5hCSnETjUn19bZPFfdnvWSIpN0u7ROkrZ2TpdXVl+24tdTXmd/Hknb//4eJT6YyigLh4WtYzZ7pru1od4L7kE8yDp/L7RmhqSA+JTQwkxJeOe30JT8Ljyn3+33Bq1gAbKxOW/KqctlZpzGvrvrhfkcX8HoWY11JTZ6FTV2Zd+psLkdLJEY+T43AwtmCmg5vSBrjlfWSZ9qKtS1xW1ccgM1q68nYrdyac/bNcWRY4dWP25QOKZTGpxwwHt1od4L56O5hHgZUcgyWX7lckBIa+uH19+FYPPF3seGfFHuIS5eVPKO5jQstcKRQamYiFWe2umSrff5WP+biMmu2/8goLeZaSDMDD2FjaWlgwxdmFj8+drdF2K5OUXRIrZcqi8+JYmdm6A2+3dWP8yb8UjsFKqKuo8mOPwTTQM2DciT1Kmb19/nEw9yNK7b/UpfsvUz0Jceny/JvpSvCPrrh9JVdynmNa6jwnPi0TTXV19LW1FGZxm+lJiE+rnT7rgl8wD8LlZdFQU6/wb5jqSXgc9ZJl0ZcQn6bYH6Xn5JKek0tYQjL3w6O49uk79GrVlOO+tXcMlpSdVWH7Mtd5cV8/o00H3nZ0Y/zxv3icWDt9T01Udr5iqq1HXHbl++IiICxDeqdF/5QY7PTNmN3CQ2EgNasgj7CMJMIykvBJjORM33cY1cSJXx5fU0pZXpaZCcSXuVlkQiLo6RahrSVdjkRNrajcDSUTkqSfVSZl1ou6iirfuQ+nvsSQSZd2itnbQp3yP7kGd2UcHBwUbvjo7e2t8L63t7dslnVZLVu25ObNm+XSl+bi4oKfnx9NmzYt99DU1KwybwYGBowZM4bffvuNvXv3cuDAAYV1tCvi4uJCdHQ06urq5f6emZlZlZ8t0axZM3R0dDh37lyF77ds2RJfX1+F783LywtVVVXs7e0xNDTEysqKGzduyN7Pz8/nzp07sv87ODigpaVFWFhYuXxaW1vL/s6Lvt+yli5dSkpKisJj6dKl1So3QF5BIY+iYnC3ld8QQ0UFOjaxxie84psp+kRE4W7bSOE1D9tGlaZXpszsPCJik2WPp5EJxCen08Gh1I8p2pq0srXkQVDV+VswsQfd2jXlnbX7eB6fquysVymvsLhebErVC+BuY41PRCX1EhmFe5My9dKkEfcio2TbfBAVg62p4tFIE1Njnqcop7x5hYU8TIjGo9TN+1QADysb7sZVPmN8VitX3m/rweQz+3iQEK3wXl5hIffjo7E1KFMOQxMi05VXb5XWSRNr7lVWJxFRdKygTkrq8PADfwb/soOhv+6UPWJS0/n9+h2m7675TLjSysZKSEmstPoXsTKpB13bNeXdNfuIinvxd66iooIK8kH12lRpG7OsZhs7+xJtzMCEyAzlxcqj6PLty6OxtSyGy7oXGYV7Y8X25WnTCJ8K0o9ybMWDqBgex8aXe6+25RUW8jA2Bg9red5UAA/rRtyLqr1+QqKhQSNDQ2JrOOhUlbzCQh5Gx+DRuEy92FRdLx4V1EtJeg1VNTTV1ChE8XLfgqIi2ZU2tSUzJ4+IuBTZ4+nzBOKTM3BtIS+PrrYmrW0tuf+0dtYCHtqpFX6hMQRGKKet5RUW8jAxGo9SN1WUxnzjqmPewY3323gw+dxfPEhUjHkNVVU01dTK3xy8qFA2e1gZSsriWVFZ4qsuy3ttPJl8fm+lZSksqqB9UcvtKzuPyJhk2SMkIoH4pHTat5G3f4mOJg5NrXgYWHX7+vCtHnR1bcr7q/4q169ExaUSl5hGo/qK19E3sjImuhp90Mt4VfsvkPaNmmq13y+WyCss5EF8tMINlFUAz/qNuRtbeX3MauPK+84eTD61jwfx0eXeLxncbmJozPiTe6tcn7smMnPzCEtMkT2CYhOIS8ugY6lzFl0tTdo2tMQ3vOLy5BUU8uh5jMJnVFSgo638POfR8xhy8wsU0tiYGVPfyKDWzm0yc/MIS0iRPYJjE4hLzcDNrkxZrC3xDau8LH7PY+hop1gWNztrfMOqyqf0GKy221peYSEP46PxaFDm+OtF7autK++7uDP55H4exP831qLOKyrkUVIU7vWayF5TATzq2XAvofpXuKqqqKCpWvXcyuqkeZWcWoH3HcXXrt2Wvg6gqQGtmiumKSwE77vyNMqirHopGdy20TNhyqVdJP+HlowRhOr4nxzgTkhIoEePHuzcuZP79+8TEhLCvn37WLduHUOGDJGl27dvH3/88QdPnjxh+fLl3Lx5s9wNIUvMnj2bwMBAFi5cSEBAALt372br1q0KaRYvXsy1a9d477338PHxITAwkMOHD1e6zRJff/01f/75J48fP+bJkyfs27cPS0tLhVnYFenVqxfu7u4MHTqU06dPExoayrVr11i2bBm3b9+u1nelra3N4sWLWbRoEdu3byc4OBhvb29+//13AMaPH4+2tjaTJ0/m4cOHXLhwgffff5+JEyfKbkQ5Z84cvvzySw4dOsTjx4955513SE5Olv0NfX19FixYwLx589i2bRvBwcHcvXuX77//nm3btlX7+y1LS0sLAwMDhcfLzgjfeu0uo1zaMNTRAVszE1YM7ImOpgZ/35NeBvrlsD582MtTln6H9z06NW3MWx4uNDEz5r1uHWlV34JdN31kaQx1tGhhaY6duXSAqImpMS0szV/JOt17Tt1j6mA3OjvbYtfQjBUz+xKfnM6lUmuB/rhoJKN6Ocn+v2hSD/q5t+CTTcfJzM7F1FCCqaEELQ15Z2hqKKFZI3Osi9eCbNrQjGaNzDHQ1VZKObbcuMto5zYMa+OAnakJK/v1REdDgwP3pfWyblAf5neT18u2m/fobNuYqW4u2Joa837njrS2smDnbR9Zmt+9b9PPoTmjnVrTyNiQCe0d6d7Mlt13fJVSBoDNfrcY19yREXatsTM0ZXXHPkjUNdgX9ACADZ0GsMhFfqvv2a3d+NC5M4u8jhORnoK5ti7m2rpI1OVXYfz66AYDbVoytpkjjfWNmNTChZ4Nm7Ij4K7SygGwxfsuo13aMLRtcaz0l9bJ377SOlk7pA8f9pDXyfab9+hs15i3Okrr5L0uHWld34Kdt3wASM7KJjAuQeGRV1hAfHoGIWWnSijBnpP3eGuIPFaWzy6OlTvyWPlhyUhGloqVhZN70NejBZ9uOk5Gdi4mhhJMSsVKfXNDJg/qQAubeliY6tOmmRVfvD+QnNx8rvkq5wZnm/1vMa6ZIyNsK2ljngNY5FyqjbVy40Onziy69hJtzF75beyPm3cZ4ySP+c/6lon5gX2Y37VUzN8ujnlXF2xNjHm/kzTmd9zxUdiunqYmfVs0Z5+Sby5Z2u/37jC2VRuGt3DAztiEVd17IVHXYH/xUiLre/dloUcnWXoNVVVampnT0swcDVU1LHT1aGlmTmNDI1mapZ264tqgIQ30DXCxrM/PA4ZQUFTEP08eK7Usf9y6yxjHNgxrXVwvfaT1sv+BtF6+GtCHBV3k9bL1zj06N2nMtA7SevnAsyOtLS3YcdcHgPTcXG6EhbOkW2fcrBvS0NCA4a0dGNbKgdNPlLs+OsDuc3eZNsCNLo62NG1gymdT+xCXnMHFe/Jl3TZ9OILR3R1l/9fR0qC5tTnNrc0BqG9mQHNrcyxNFG/yqautSa92zTmkhJtLlrbZ76Y85g1MWe3WB4m6JvuC7wOwwWMgi5y7ytLLYv76iQpjPj0vF+/oMJa2605Hi0Y01DNkpG0bhtu25nT4E+WWxf8mY5s5Mdy2DXYGpnzu1lcaK6XKstBJXpZZDh2Z59iFxdel+y8zbV3MypYl5hlLXXrgZtGIhrqGjLBtw/AmrTkVXrtX0FTkr+N3mTysI53a2WFrbcan7/YjPimdy7fkbXvjxyMZ0cdJ9v8F03rSp3NLlm88TmaWvF/RLHUMtuuf24zq50J3t2Y0sDBixmgPGjcw5uiFB7Veht/v3mFs6zYMb1m8/+rZC4mGBvv9pDG//o2+LPQss/8yN6elecn+S5+W5or7r4WenejQoAENDAywNzVjoWcnOja05shj/1rPf2mbH95mrL0jI5q2oqmhCas935D2j0+k39vXXfqzqH2p/rGtK/PbdWLRlRNEpKdirqOLuY68famrqLKp5xDamlky5+JR1FRUZWk0VJV/yr39+l1md3OjewtbmlmY8uWIPsSmZXDWX77/+mPKCN50k++/tl27y6h2bRji5ICtuQnLB0nPcw7eldZnek4uf999yJJ+XXFt0hCH+vX4Ytgb3At7jm9E+QH+2rLD6y6zerjRvaW0LGtGSctyzk9elt+njeBN91JluXKXkR3aMMRFWpZPhxSX5Y60LA2NDZnetQMO9ethZaiPUyMrvnlzADn5+VwOqP1jsM0PbjPOvi0jmrXCzsiE1Z3eQKKhwb4n0j5gQ7f+LOrQWZZ+tqMrH7b3ZNGlk0SklW9fAIZa2jiY1KOpsXT5UVsjYxxM6mGuo5z10Ev88eQGY2ydGda4LXb6pnzm0h8ddQ0OhErPkdZ1GMz81t1l6We18MCzXhOsdY2w0zdlanM3hjRuw+EwaWzpqGnwYevuOJk0oL7EkFZGlqxpPxALHX1ORPgprRwZmeAfKH0ARERJnz8v/i3h619h8Wp5+rFDpGm+2gRPn8Hug3DyIkweJU8zeTTsOwaHTkJwKKz8GrKyYFg/pRVDprbrRV1Fle/dR9DGuD7zbxxCVUUFMy1dzLR00VD5nxw2FOqg/85PZK+Qnp4ebm5ufPPNNwQHB5OXl4e1tTUzZszgo48+kqVbuXIle/bs4Z133sHKyoo///wTBweHCrfZqFEjDhw4wLx58/j+++9xdXXliy++YOrUqbI0bdu25dKlSyxbtozOnTtTVFSEnZ0dY8aMqTK/+vr6rFu3jsDAQNTU1OjQoQPHjx9H9QUHSyoqKhw/fpxly5bx1ltvERcXh6WlJV26dJENPlfHJ598grq6Op9++inPnz/HysqK2bNnAyCRSDh16hRz5syhQ4cOSCQSRowYwddffy37/Pz584mKimLy5MmoqqoydepUhg0bRkpKiizNqlWrMDc3Z82aNTx9+hQjIyNcXFxk9VGd71cZTjx6gomuDu/3cMdcT3qZ34wdB2U31apvqK8wq+leeBQL9p9gbk8P5vX0JDQhmff2HCEwVn7paA97O9YM6yP7/zejBwDww4Xr/HCx6lnpNbX9+C20tTT4aEpv9CRa+AZGMmf93wpr/zaoZ4iRnnxpmpE9nQD45aPRCtta+dtJjl2VHoQM7+7IjGHyNdF/XTamXJradNxfWi8fdHXHXFeCf0wc0/bI68XKUF9hhta9yCjmHzrB3G4efNjNk9DEZN7dd4TAOHm9nAkIZvmJc8zy6MDHb3QnJDGR9w/8w52I2pm5V5GjoY8x0ZYwz6kT5jq6+CfGMvnsX7KbajXQNVBoXxPsndFSU+fn7sMUtvOtz1W+9fUC4FRYIMu8T/FOm46scO3J09RE3r54kNuxyl1H/ITfE0wkxXWiJ62T6btL1YlBmTqJiGLBwRPM7e7Bh92L6+QvxTp5nXYcu4WOlgZLpxbHypNI5nxVQazol4qV4sHun5cpxspnv57k2BU/cvPycbJvyNg+LujrapOYksm9gAimf7aHpFTlzJA4GvoYE60ybexcNdpYtzJtzLdUGwsPZNmNU7zTuiMrOhS3sUvKbWPH/aXta07n4piPjWPaXwdJKL7ZWX2DMvviyCg+PHKCeV08mN/Vk9CkZN45cITAMssQDXCwR0UF/vFT7kBwaccCAzDR0WFeR0/p5eNxcUw5fEB2M6r6+gYKsVJPV49jb06S/X9muw7MbNcB74hw3vz7LwAs9fT4rs8AjHS0SczK4vbzSEb8tZvELOXOvDn++AmmEh3mdpLWi19sHFPL1EvZffGH/5xgXmcP5neR1svbfyvWy5wjx1nQtRMbBvXDSFubyNRUvr7ixW6f+0otC8C2k7fR0dRg2cRe6Eu08Al8zvvf/a2wNmtDc8U+0qGxBb8ulJ/tzh/TDYB/rj1ixRb52rtvdLBHBTh1U7lt7eiz4n7FsbM05pNimXx+r2LMl5ohP6G5izTmu1YQ8/el6ze/f+Uwi5y78m2nQRhpahOZkcpXPpfZ+US5NwA+9swfUy0JH7btjFlxWaacl++/6usqxsqE5tL916auwxXLcv8K3ymUpRvfeg6WlWW97yV2BSr/ZsY7j0iPwRbPlPYr9wMi+XBNmX7FwkihXxn+hhMAP61QPFf4/KeTHL8kHbj76/hdtDTU+WBSdwz0tAl6Fseczw8QGZNCbTv25AkmOhLmuXtgJpHgHx/HlEN/y248Wd9AX+EKjHp6ehwbP1H2/5nt2zOzfXvp/mv/PgBMdSRs6NMXc4kuabm5BMTHMeXgAa6GKfcubUdDHmOqrcOH7aT9o19CLJNO7ZO3L70y7atFcf/Yc6jCdr6568W397yw1NXjjcbNADg57C2FNGOO/Yl3tHLvUbH5ym10NDRYObgXBtpa3A17zsztivuvRiaGGEvk7evEwycY6+rwQU93zPQk+EfFMXP7QYWbB685cYnCoiK+GzsITXU1vIJC+eyf80oty++XpfviFcN6oa+txd1nz5m1RbEs1qaGGJUqy8kHTzDR0+G9Xu6Y6UuXM5m15aDsxpM5+fm0a9KAiZ7OGOpoE5+eyZ3QCMZv2ktiRu33lUefBkj3xe08MZfo4p8Qy+QT+2V9fQNdxeOWCS2dpO2r9xCF7Xx7x4tv70qX7OjdyI713frL3vuh5+ByaZTheIQfJloS5rTqirm2Lv7JMUy78icJOdKrxOpLDBX6FYmaJitc+mEp0Se7IJ+nqfEsuHGY48WD1wVFhdjpmzLMYwQmmhKScrN4kPiccRe2EZSqvKvpHgXA5Lnyq3XW/ih9PrRvEWuWQlwCRJVaibChFfz8JXz5A+w4AJbmsGohdHKVp+nfA5KSYeMf0ptStmwKv36l/CVKoPbrxUJHn14N7AH4542ZCn9r/MUd5dbpFoT/IpWistccCoB0cPjgwYMMHTr0dWdFUIIWy7953Vmokccr58meu07+uoqU/303t30oe958dd2ulyfL5PVis23ta8xJzYROXix7br+qbtdJwCfyOnGbWLdj5cYOeazYbK/D7WuSvH01W1O321fgUnn7st244TXmpOaefjBf9rzp2rpdL0GL5fXSbkbdLcud30r1KTu+fI05qbnQiUtkz5vsXPMac1JzIRPky915jKnbcX9trzzubb+tu33k07ny/rHx7+teY05q7tm0RbLnLT+pu/svAP9V8n1Yq6V1tyyP1pTaF//21WvMSc2Fzlgoe95s3+evMSc1FzjqY9nzwujmrzEnNadqKb8iqi7XS+k6EYTXQVxrIAiCIAiCIAiCIAiCIAiCINRJYoC7Dtu1axd6enoVPlq1UvKdDQRBEARBEARBEARBEARBEF6z/8k1uKujLqzcMnjwYNzc3Cp8T0NDo8LXBUEQBEEQBEEQBEEQBEEQ/r8QA9x1mL6+Pvr6+q87G4IgCIIgCIIgCIIgCIIgCK+FWKJEEARBEARBEARBEARBEARBqJPEALcgCIIgCIIgCIIgCIIgCIJQJ4kBbkEQBEEQBEEQBEEQBEEQBKFOEgPcgiAIgiAIgiAIgiAIgiAIQp0kBrgFQRAEQRAEQRAEQRAEQRCEOkkMcAuCIAiCIAiCIAiCIAiCIAh1khjgFgRBEARBEARBEARBEARBEOokMcAtCIIgCIIgCIIgCIIgCIIg1EligFsQBEEQBEEQBEEQBEEQBEGok8QAtyAIgiAIgiAIgiAIgiAIglAniQFuQRAEQRAEQRAEQRAEQRAEoU5SKSoqKnrdmRAEQRAEQRAEQRAEQRAEQRCElyVmcAuCIAiCIAiCIAiCIAiCIAh1khjgFgRBEARBEARBEARBEARBEOok9dedAUF4HVp+8s3rzkKN+K+aJ3verd+615iTmrt4YpHseZMfNrzGnNRcyHvzZc9dT370GnNSMzf7fiF7brNp/WvMSc2Fvr1A9rzzsLpdlisH5WVp+8+nrzEnNXN/0Gey502+r+Mx/7485u32rn6NOam54DHLZM9tfqnbsRI6Sx4r7ad//RpzUjO3N38oe16XYx4U497+78+qSPnfFzBcXhddB331GnNSc5f+WSh7bvNj3d0fh74r3xc32bnmNeak5kImLJU9d1hWt89X/FbLz1dsv627++Knc+X7YpsdX77GnNRc6MQlsueORz95jTmpOd+Bq2TPm+37/DXmpOYCR30se14Y3fw15qRmVC2fvO4sCP/jxAxuQRAEQRAEQRAEQRAEQRAEoU4SA9yCIAiCIAiCIAiCIAiCIAhCnSQGuAVBEARBEARBEARBEARBEIQ6SQxwC4IgCIIgCIIgCIIgCIIgCHWSGOAWBEEQBEEQBEEQBEEQBEEQ6iQxwC0IgiAIgiAIgiAIgiAIgiDUSWKAWxAEQRAEQRAEQRAEQRAEQaiTxAC3IAiCIAiCIAiCIAiCIAiCUCeJAW5BEARBEARBEARBEARBEAShThID3IIgCIIgCIIgCIIgCIIgCEKdJAa4BUEQBEEQBEEQBEEQBEEQhDpJDHALr0VoaCgqKir4+PjUaDvdunVj7ty5tZInQRAEQRAEQRAEQRAEQRDqFvXXnYH/qri4OD799FOOHTtGTEwMxsbGODo68umnn+Lp6YmKigoHDx5k6NChL7VdGxsb5s6dKwZl65A3XR2Z2qkdZnq6PI6OY/WxCzyIjKk0fZ9WzfigpwcNjAx4lpjMhlNXuBwYqpDm/R7ujGrfBn1tLe6FPWflkXM8S0xWbkGKvTWxEwP7tkVPV4uHfpF8/cMZIp8nVZp+8AAnhgxwwtLCEIDQZ/Fs232Nm7dDKky/9rORuHWw5ePP/ubq9SCllAFgYhsnZjq3x1yii398HCsun8c3NrrCtM1MTJnn5kEbcwsaGhjy2ZULbPG9q5DmyqTpNDQwLPfZHfd9+PTyOaWUAWBko45MaNIZU009AtOiWe//D34pES/8XG/Ltqx2GsulGD8W3tspe31G0570tmyLhbYheUUFPE6JZFPgaR5VY5s1NbGVE7OcOkjrJCGO5VfPVV4nxqZ86OpJG7PiOvE6zx/3FetEVUWFue09GNbcAXOJhJiMDPYHPOT7O95KLwvAtHGeDOrVBj1dLR48fs6GX84QEZVcafqhfRwZ2tcJy3oGAISEJ7D1r+vcuCuPFU0NNd59qxs9O7VAQ12Nmz6hfP3LWZJSMpVWjjE2rkyx88RMS48nqTGseXiMh8mRFabtadmS6c26YK1rgoaKGs8yEtj+9BpHI3xlaUw0dZnn8Abu5nboa2hzN+EZax4eIywjUWllgOKYdykT8zEviPl6xe3rcvmYn+Pqzlw3D4XXgpMS6bVzi9LKUGJC03bMaNERc209/JNjWHn3NPcTn1eY9o0G9rzj4EljPWPUVVUJTUvi9wBvDj17qJDmzaYutDa2xFhLwsBTm/FPrryfqk0TWzkxy7ED5jrFce91Dt+4iutlbIs2DG/eCnsTMwAexMXw1c0r5dLPa+/JuBZtMNDS4nb0cz6+cobQ1GRlFwWAWUM8GNa5NXoSbXyDIvly5znCYyv/287NGjCxb3taNrbA3EiP+T8c5pJPsEKa25s/rPCz3+27zI5Tt2sz+8D/n5gHeNO2PdOaeWCurcfjlBhW+Z7gQVLFsdK7fgtm23eika4J6qqqPEtPZEvgdQ6HP5ClWdNuMMMbOyl87kpMENO9diuzGDJTx3sy8A3pMdgD/+d8/dNpIqvoV4b0c2JIPycsLaT9SmhYAtv2XOPGHXm/Mv/dN2jn2BgzE12ysvN46B/JL9suExahnPqZ2NqJWSXHXwlxLH/B8deHrorHX2X7+qsTKz7+2v5AucdfABObuzDTwQ1zHT38k2JZces0vglRFaYd29SR4bZtaG5YvP9KjGa9zyWF9BJ1DRY7d6d3w2YYa+kQnp7C1oDb7A68p9RylHivpzujOhSfXzx7zmdHzvEsIbnKz4xzc2RqZ+l5TkB0HKuPXuBBhLT/MNTR4r2e7ng0bYyVkQFJGZmc8wtm49lrpOfkKq0cE9s6MqN9qf7+wgXuV9Xfu3vQ2qIeDQ0MWXXpAlvuKX7f49u2ZXwbRxoYSOMoMDGB7294cyk0VGllAGn7mtXKTdo/JsWy/OaZF7Sv1tgbmQPS9vXVPcX2FTpxSYWf/eLOeX71u1n7BShlTGNXJtt1Ku5XovnyUeX9Sml967dhrctozkf7M++24n72neY9GN6oPfoa2vgkhrH64ZFX0q+Mt2vHdHt3ab+SHMNn905xv5J+5Y0G9sxu4UljPXm/8nvADQ6HSfsVdRVV5rXuRlerpljrGpGWl8O1mBDWPzhPbHa60spwyxf++BMePYG4BBW+/7yIXp2r/szNe/DljxAUClb1YPZEGNZPMc2ug/DHHohPhBZ2sGwOtG2ptGIIQq0TM7grMWLECO7du8e2bdt48uQJR44coVu3biQkJLzurAmvUL/WzVncrws/XvBmxKZdBETH89vk4Zjo6lSY3snaivWj+nPgzkOGb9rFOf8gvn9zMM3qmcrSTO/cngkdnVhx5CxjfvmTzNw8fps8HE11NaWXZ9woV0YMduHr70/z9tydZGXn8dXno9DUqPxvx8Wn8euWy8x8fzuzPtjOXd8wVn86HJtGpuXSjhzaniKKlFkEAAY0tWdZp658d+s6A/fuwD8hjm2DR2CqU3G96KirE56SwtrrV4jNqPhgY8hfu+jwxybZY8KhfQAcCw5QWjl6WbZhbov+bA46x6RrPxKYFsXG9m9hrKlb5eesdIz4oEU/7iWW/5EhLCOer/yPMM7rO2be+IWorCS+bz8VI42qt1lTA+3s+dizG9/dvs6A/TvwS4hl+8CRmOpIKkyvo65BWGoKa29crrROZju7MqGVI59eOUevPVv40vsys5xcmdLGWZlFAeDNYa6MGODM+l/OMGvxLrJy8tjw6cgqYyU2IY2fd1xm+oIdzFi4k7sPwlizZCg21vJYeX9qdzzb2/HpV0d4/+O9mJnosXrxEKWVo0/91ix06MvPTy4y5vLPBKRG87PbJEwqaWMpeVn8FniZiVd/Y8SlHzkcfo/PHIfiYd5Ulua7Dm/SUGLMnJu7GXNpE8+zkvm14xR01DSUVo4BzexZ1rkr3928zsA9O/CPr0bMp6aw9lrlMQ8QkBBPh983yR6j9u9RVhFkBli35COnXmx8dIXBp3/ncXIsW7uOxVSr4lhJyc3iJz8vRp7dyoCTv3EgxJe1roPobGkrSyNR1+B2XDjr7l9Qev5LG2hnz8fu3fjuznUGHNiBX2Is2weMxFS74rJ0rG/NkaDHjPtnL8MP7SYqI40dA0ZiIdGTpZnt6MpbrZ1ZduUMQw/uIis/j+0DRqKlpvw+cnLfDozt6cSaneeY8sVusnPy+H5e1f2zjpYGgeFxrN11vtI0fT78WeGxcsspCguLOH8nsNbL8P8l5gH6NXBgaZs3+PHxJYad/5XHKdH87jkekypiZVPAFcZc+oPB537h72c+fNFuCJ3q2SmkuxwdhOexDbLHhzf/Vmo5Sowb4crwgS5s+OkMsxfsIjs7l/WfvfgY7Jdtl5gxdzsz5+3g7v1nrF42TOEY7ElQNF9+d4JJ7/zBguX7UFFRYf1no1BVVan1Mgxsas/HxcdfA/7agV98HNsHVb0vDkut+vhr8L5ddNiySfYYf1h6/HU8SHnHXwADGrdkWbuefHf/KgOP/4F/UgzbeoypdF/sZtGYI6F+jDu7m+GnthOVmcb2nmOx0JHvvz5u15Mu9W2Zd+0fev3zG1se32Jlhzfo1bBphdusTdM6t2eCuxMrD59l7KY/ycrL49cpVe+/+rZpzuL+XfjpvDcjf9zF4+h4fp0iP88x19fDXF+Pr05eYcjG7Xx04DSdmtuwavgbSivHgObN+ahLVzZ6ezNo90784+LYNmx45W1MQ52wlBTWXb1aaRuLSktnnddVhvy5i6F/7uJ6eDi/DBpCM5Py5zK1ZWDjFnzcvgff3b/KgGNb8EuKZXvPMZX3j5aNpO3rzG6Gn9xOVEYqO3qNUWhfHfZ9r/BYeO0YhUVFnAhTbqz0sWrNAod+/PLkAmOvbCIgNZpNrpMr7VdK1Ncx4sOWfbiTEFruvbfsOjOuSUc+f3CECVd/Iasgl02uk9FUVe78y/4NHfjIsTc/+F1h6JnN+KfE8EeXcZX2K8m52Wzy92L0+S0MOi09BvuywyA6WUiPwbTVNGhlbMmPxdt779p+bPVN+dlztFLLkZUF9k3hk7nVSx8RBbOXgJszHNwMk0bCJ1/B1VK/ixw/D2t/hHcnw4HfwN4OZiyAhMrnwQnCf44Y4K5AcnIyV65cYe3atXTv3p3GjRvj6urK0qVLGTx4MDY2NgAMGzYMFRUV2f+Dg4MZMmQIFhYW6Onp0aFDB86ePSvbbrdu3Xj27Bnz5s1DRUUFFRXpgeeKFStwcnJSyMO3334r2y7AxYsXcXV1RVdXFyMjIzw9PXn27Fm1ynP48GFcXFzQ1tbG1taWlStXkp+fL3tfRUWFzZs3M2zYMCQSCc2aNePIkSMK23j06BEDBw7EwMAAfX19OnfuTHCwdIZSYWEhn332GQ0bNkRLSwsnJydOnjyp8PmbN2/i7OyMtrY27du359698jMZHj58SL9+/dDT08PCwoKJEycSHx8vez8jI4NJkyahp6eHlZUVGzZsqFb5a2Kyhwv7bj/k4D0/guMSWfHPWbLz8hnu0rrC9JPcnbkaFMofXnd4GpfIxnPX8Y+K5U03p1JpXPj50k3OP37Kk5h4lhw4ST19XXq1tKtwm7Vp5ND27NhzHS/vIJ6GxrFm/THMTPXo5NGs0s9cvxHMjVtPiXyeRERkEr9vu0JWdi4OLeorpGtqW48xIzqw7puTlWyp9kx3asfeRw/Y7/+IoKREll04Q1Z+HqNatqkw/f3YGNZcu8zRwAByCwoqTJOYnUV8Zqbs0cPGltDkJG5EKm/m85s2nTgUfoujkXcJyYjly0eHyS7IZVCDdpV+RhUVPms7ht8CzxKZVX6Ww6koX24lBPM8K4mn6bF8+/g4ehraNNO3VFo5AKY7tmeP3wP2BTwkKCmBZZfOkJWXx+gWFcfK/bho1ly/xD9BlddJO4v6nAkN5kLYUyLSUjnx9AlXIkJxrGelzKIAMHqgC9v3eXP1ZjDBz+JZ/d1xTE306OxW+UnqtdtP8b4bQkRUMuHPk/ht11WysnNp1VyaX12JJgN6tuGHLRe5+yCcJ09jWPP9Sdq0bIBDc+WUaZKtBwfC7nA4/B5P0+NYdf8fsgryGNrIpcL0txNCOR/tT0h6PBGZSewK8SYwLQZnk0YANNY1xdHEms/v/8OjlOeEZiTw+f2jaKup069BxfFXGyqNeYcqYt6r6pgHKCgsVIj7pOwsZRVBZqq9G3uf+nAg5D5BqfF8fPs4Wfn5jGziWGH6G3FhnI4MIDgtgbCMZLYG3uJxSiztzaxlaQ49e8gPflfxiq74yhplmd6mPXv8i+M+OYFll6X1Ulnczz1/nJ1+PvglxBGcnMjiS6dQUVHBs0EjWZqpbVz4/q43Z54F8zgxng8vHMdCoscbNsofIBrXy5nfj97gkk8wQRHxfPrHScyN9OjmXEXcPwxl06FrXLxX+RVLCamZCo+uTnbcDggnMj6l1svw/yXmAd5q5s5foXf5+5kvwWnxLL93jOyCPEY0rvhHzpvxzzj7PICnafGEZySxPfgmAakxtCsVKwC5hfnE52TIHql52UotR4lRg9ux4y9vvG5Ij8G++Ebar3TqWPkx2LVbwdy4E0JkVDIRz5PYvEParzjYy4/B/jl1n/uPIoiOTSUwOJbNO69iYW6AZb3ys6JrarpTO/Y8esC+x8X74ovFMf+C46+q+vrE7CziMjNlj542toSmJOH9XLlXnk1v6creIF/2P31AUEoCy26cJKsgn1FN21aYfp7XEXY+uYt/UixPUxNZ4n0cFVTwtLSRpXExb8jfTx9wIyaMyIwU/gzywT8pBkfT+hVuszZN8nThl4s3Oe9ffH6xT3p+0bOK84spnsXnOXel5zkrDxef57ST7sODYhOY++dRLj5+SnhiCjeehvPdGS+6t2iCmhJ+QAGY5tKOvQ8fst/vEUGJiXx87ixZ+fmMalXJ8WRMDF9evczRJ5W3sfMhT7kYGkJocjIhyclsuOZFZl4ezlbKO56c7uDKnkBf9gUXty/vk2QV5DHaruL2NffqP+x8cg+/pFiCUxNZ7H1C2r6sbGRp4rIzFB69rZtxPfoZ4em135eUNtHWg7/Db3M4QtqvfP7gH7IL8xhqXXG/AtLzlS+cR7LpyXkiMsufr4xv4s5vgZe4GPOYwLQYPvY5gLm2Pj0slTtdeGpzN/aG3ONAqC9BafF8euc4WQV5jLRxqjD9zbhnnHlecgyWxLagWwSkxMiOwdLzc5hyeTcnIvwJSU/EJzGSlfdO0sakPlY6BkorR5eOMHc69O5SvfR7DkMDK1j8LtjZwPjh8EZX2LZPnmbbXzBqIAzvD01tYMV80NaGv48rowSCoBxigLsCenp66OnpcejQIXJycsq9f+vWLQC2bNlCVFSU7P/p6en079+fc+fOce/ePfr27cugQYMICwsD4O+//6Zhw4Z89tlnREVFERVV8SVKZeXn5zN06FC6du3K/fv3uX79OjNnzpQNkFflypUrTJo0iTlz5uDn58cvv/zC1q1bWb16tUK6lStXMnr0aO7fv0///v0ZP348iYnSzigyMpIuXbqgpaXF+fPnuXPnDlOnTpUNkn/33Xds2LCB9evXc//+ffr06cPgwYMJDAyUfS8DBw7EwcGBO3fusGLFChYsWKDw95OTk+nRowfOzs7cvn2bkydPEhMTw+jR8l8/Fy5cyKVLlzh8+DCnT5/m4sWL3L2reJljbdJQU6VVfQuuPw2TvVZUBNeDw3CyrviAyNHaiuvBYQqvXQ16hlMjafqGxoaY6+sqpEnPyeV+RDSO1so9+LWyNMTURI879+Q/jGRk5uIXEFVusLoyqqoq9OjaAm1tDR49ll/KpaWlzseLB/Ltj2dITMqo9byXpqGqSut6FlwNL1UvgFdEGC6WtXOgqqGqylB7B/b5P3xx4n9JXUWNFgb1uZUgHxQpoohbCcG0MWpU6eemNe1BUm46RyLvVOtvDLXuQFpeFk/Sqre/+Tc0VFVpbW6BV4S8bRUBXpFhuFj8+3Z9J+Y5ng0a0cTQGICWpua0t2zAxTDlDuJZWUhj5bavYqz4B0bRyr76sdKzk700VgKk3729nQUaGmoK2w2LTCQ6NpXW1dzuy1BXUaOloRXe8fLlEooo4kZ8MI7GDau1DTczW2x0zbiTIM2zpqp0JlhOofxH0iKKyC0swNmkcS3mXq7SmA+veczbGBnj/dYsLk2axjdv9Ke+nn4Nc1s1DVVVWhtbcS1G3oaLgGsxITibVa9OPOrZYKtvws24sBcnViJZ3EeWifuI6se9jro6GqqqJOdIBxit9Q2pp6unsM203Fx8YqNqtC+pjgZmhpgZ6XHTX/69ZmTl8vBpNG3sam8QxMRAQqc2TTh8pfb7l/8vMQ+goaJKKyMrrsWWiZXYEJxNqleWjuZNaKJnyq14xVhxNbPhWv/5nOz9Diuc+mOkWfHM0NpU0q/c8SnTrzyJotXLHIN1Ln8MVpq2lgb9erXmeXQysfGptZL3EvK+XsnHX80d+EuJx18lf6e1iSVXoxTbl1dUKC5mDaq1DR01Den+K1f+A8nduAh6Nmwmm3Xb0aIRTQxMuBKl3OOWqs4vnBpV3L401FRxqG+Bd1CZ85ygMNl5S0X0tLVIz8mloLD2r9gs6e+9wsv0K2HPam0wWlVFhYHN7dFRV+duVMVxVFMl7csrOlT2mqx9mb9k+8qp+Id3M20J3RvYsTfofi3kuHLSfqU+3nFPZa8VUYR3XDBtja0r/dys5t1Jys3gYHj5c/UGEmPMtfW5UaqvSs/P4UFyRJXbrCkNFVVaVXgMFoqzafXqxb2eDU30TblVxTGYvoY2hUVFpL2iH0+rw+cRuJeZP9Wpg/R1gNw86XInpdOoqkr/X5JGEOoCsQZ3BdTV1dm6dSszZszg559/xsXFha5duzJ27Fjatm2Lubl0bSwjIyMsLeWzIh0dHXF0lM/AWrVqFQcPHuTIkSO89957mJiYoKamhr6+vsLnXiQ1NZWUlBQGDhyInZ30V/iWLav36+bKlStZsmQJkydPBsDW1pZVq1axaNEili9fLks3ZcoUxo0bB8AXX3zBxo0buXnzJn379uXHH3/E0NCQPXv2oKEhvRy1efPmss+uX7+exYsXM3bsWADWrl3LhQsX+Pbbb/nxxx/ZvXs3hYWF/P7772hra9OqVSsiIiJ4++23Zdv44YcfcHZ25osvvpC99scff2Btbc2TJ0+oX78+v//+Ozt37qRnz54AbNu2jYYNq3eS828YSXRQV1MlIV1xbdyE9EyamBlX+BkzPV3iy6XPwExPUvy+RLaN0uIzMjHXq/jSqNpiYiy9jKzsAHRSUgYmxnoVfUSmiY0ZP309AU1NdbKycvlk1SGehcmX63l3Zg8e+T3Hy1t5a26XMNbRQV1VlfgsxXLEZ2ZiZ2RSK3/jDdumGGhpsf+x8np0I00J6qpqJOYqXk6ZmJNOY13zCj/jaNSYwQ3bM8Hr+yq33cncns8dx6KtpkF8Thrv3fqDlDzlrfFsrF1xncRlZtSoTjbdvYG+hibnxk2loLAQNVVV1t+4wuFA/5pmuUqmRtJYKbsudmJyJiZGVV+OadvIjE1fvimNlexcln15mNAIaayYGOmSm5dPeqbiD6eJKRkv3O6/YVzcxhJyFOslISeDJnoVtzEAPXUtzvZegIaqOoVFhax+cFQ2YBaSHs/zzGTmtOzNZ/ePkJWfx0Rbdyx1DDHTUs7gsCzmMyuIeeN/3758YqJYePYkT5MSqaeryweuHvw1Yix9dm8lIy+vptmukLROVInPLlOW7AxsDSq/VFpPQ4trgz5AU02NwqIiPr1zEq+YVztbu6xK4z6r+nG/xK0rMRkZsgFtc4lu8TYUYy8uK1P2nrKYGhb3z6ll4j41A1PD2vvbAz0cyMjJ48Ld2l+e5P9LzAMYa0ljpaKy2OqbVVmWy/3noakqjZWVPse5FisfmLkSE8yZ54+JyEjGWteYD1v14DePNxlz8Q8KlbjEmuwYLLnMMVhyhuy9ytg2NuPHr8bLjsE+Xn2IZ+GKSyYO7e/ErCldkeho8iwigfmf7CM/v7BWyyCL+cyyfX3N9sWlyY6//JU7olLSvuKzyxyPZ2dgZ1i9ZSsWO3cnJitdYZB8xa0zfOHWD+8R75NXWEBhUREfeZ/gZmx4rea/LDN96f6r/DlIpuzco6yS85yKPmNrXvF5jpFEm7e7ubHv1oMK368peX9fpl4yM7EzqVkbszc1Y/+YsWipq5OZl8vbR/8hKFE56z3L2lfZ/vEl2tcSl27EZKXjFRVa4fsjbNuQkZfLKSUvTyLvVxTPVxJy02miV/G+2Nm4EcOsXRh9+acK3zfTkp53lttmTobsPWWQx32ZfiU7HTv9Ko7B1LW4OmiOrF9ZcfcEXrEVH4NpqqqxsG0PjoY9Ij1feevUv6z4RCg7fGFqAukZKmTnFJGaBgUFKpgaK/aDpsYQ8nrnUwjCSxED3JUYMWIEAwYM4MqVK3h7e3PixAnWrVvH5s2bmTJlSoWfSU9PZ8WKFRw7doyoqCjy8/PJysqSzeD+t0xMTJgyZQp9+vShd+/e9OrVi9GjR2NVjV+yfX198fLyUpixXVBQQHZ2NpmZmUgk0oOetm3ll0vp6upiYGBAbGwsAD4+PnTu3Fk2uF1aamoqz58/x9PTU+F1T09PfH2lNyjy9/enbdu2aGtry953d3cvl88LFy6gp1e+UwsODiYrK4vc3Fzc3NwUvhd7e/tKy56Tk1NuBr6WlhZaWlqVfub/k17dHZj/vnyNvCXLD/zrbYVHJDL93a3o6mrRtZM9S+f3Z86iP3kWloCHW1NcHBsz472ttZDr/4bRDm249CyE2AzlzkZ/GRI1TVa2HcUXDw++cLD6duJTJlz7HiMNXYZad2CN0zje8t5EUu5/pzzVMbCpPUOat2TO2aM8SUzAwawen3p2JyYzgwMBtXfy27tLSxbM7i37/+LV/3491rDniUz9cDu6Ei26ezRn2Qf9eP/jvbJB7rogIz+XUZc2IVHXxM3MlgWt+hKRmcTthFDyiwqZd/tPVjoOxavvR+QXFnAj/ilXYp5U66qi/5JLz0Jlzx8nxHMvOpqrU2YwoJk9f/kpd/bgy8rIy2HQ6c1I1DXxsLBhmVMvwtOTuPGaZ3HXxNtOrgyys2fsP3vJqWIZGWXp69aCjyb2kv1/7sZDr+TvDvZszUlvf3LzX32ZK/P/KeYz8nMYeu4XJOqauJs3YUmbNwjPSOJmvPRHlOMR8r7jSWosASkxnOv7Aa7mNnjH1d6PRr26tmT+u6WOwT7798dgYZGJTJ+zDV2JFl09m/PRvP58sHSPwiD3mYt+3LoXiqmJHmOHdWDF4kG8t2g3uXn/nXZWHWNatuHisxBiM//bxyuzW3VkkE1Lxp3ZRW6h/DuebN8OZ/P6TL+wj8iMFFzrNWKl6xvSgcpSs3lraqBjC1YM6SnPz/ZDtbbtyuhqafLzpKEExyXw47lXc7Pv2vQ0KZGBu3air6VJv2bN+eqNPozb/5fSBrlr4u3i9jX29G5yCiuO4dFN23IoxK/S918XiZomq51HsvL+YZKVOLnmVcrIz2Hw6d/QVdfE3cKGpY69CctI5mac4nKx6iqqbHQfgQqw/K5Y10MQXgcxwF0FbW1tevfuTe/evfnkk0+YPn06y5cvr3SAe8GCBZw5c4b169fTtGlTdHR0GDlyJLm5Vf96p6qqSlGR4q9leWVmj23ZsoUPPviAkydPsnfvXj7++GPOnDlDx44dq9x2eno6K1euZPjw4RWWr0TZwWsVFRUKC6UzP3QqualHbUpPT2fQoEGsXbu23HtWVlYEBb38zOA1a9awcuVKhdeWL1/OihUrqvX55Mws8gsKMS0z88FUT1JutkOJ+FKzteXp5bO6S/411ZMQly4/eDfTleAfHVetfFWXl3cQ/qUuYdUovomRibGuwixuY2NdgoJjqtxWfn4hkVHJADwJiqFFc0tGDGnH19+fxsWpEfWtjDi6f47CZ1YuG8qDRxHMXVy7N21Lysoiv7AQMx3FGU9mEglxtXBC1EBfH8+GjXj7xJEXJ66B5NxM8gsLMNFU/FHHREuPhJy08vmSmFJfYsIGl4my11SLBxeuvbGKUVe+ka3JnV2QR0RmIhEk8jAlnP2dP2Rww/Zse3pJKWVJyq64TswlujWqk6XuXdl09yb/FN9oKiAxngZ6Brzj7FqrA9xXbwbh90S+hEtJrBgbSkgoFSsmRhICQ2Kr3FZ+fiGR0ckAPHkaQ4umlowc6ML6n8+QmJyBpoY6ehIthVncJoa65Wb11Yak4jZmqqVYL6ZausRX0MZKFFFEePF6iQGp0djqmTOtaRduF98kyD8litGXN6GnroWGqhpJuZns6jSTR8mRtV4GKBXzEuXEfIm03BxCkpNobGhUa9ssS1onhZhplymLti5x2ZWXpQh4li69y49/cgx2BmbMbunxWge4K417HV3isqqulxlt2/O2kyvjj+7jcaL8Xhsl9Wmuo1i35joS/BKqjr2XddknmIch0bL/l9yIzdRAQkJKqbg30OVJeO38badmDbCxMmHpL0drZXtl/X+JeYCkHGmsVFiW7MpvHFsEhGVIY+VxijRWZtp3kg1wlxWRmUxiTgaN9YxrdYDb62YQ/hX0KyZGZY7BjHQJelqNfqXkGCw4hhbNrBg5uB0bfjwtS5ORmUtGZi6RUcn4BTzn6J/v09m9GecuP661MsliXlK2r6/d46/ZJ5V7/AXy9mVW5oZ/Ztq6xGVV3r4AZrR05e1W7kw4+yePk+XH7lpq6ixw6sbsywe4ECm9AuJxchwOJvWY4eBWqwPc5/2DuR8ub1+a6tJTejM9CfFp8row1ZPwOKri84uS85zy5y3lz3Mkmhr8OnkYGTl5vL/rH/ILa/fqgBLy/r5MvUgkxNVw0kleYSHPUpIBeBgbS1sLC6Y4u/DxubNVf/BfkLWvsv2jdjX6RwdX3m7dkfFn9ii0r9I61GuInaEp7105XGt5roy8X1E8XzHV1CM+p3ysWOua0EBizMYO42WvlZyv3Om/giEXv5N9zlRLcRumWroEpEajLPK4L9OvaOsRV81+xT8lBjt9M2a38FAY4FZXUeU79+HUlxgy6dLO/9TsbQAzE4gvc7PIhETQ0y1CW0u6HImaWlG5G0omJEk/Kwh1hViD+yU4ODiQUdy5amhoUFBmxpGXlxdTpkxh2LBhtGnTBktLS0JDQxXSaGpqlvucubk50dHRCoPcPj4+5f6+s7MzS5cu5dq1a7Ru3Zrdu3e/MM8uLi4EBATQtGnTcg9V1epVf9u2bbly5Uq5QXcAAwMD6tevj5eXl8LrXl5eODg4ANLlVO7fv092tnwdKm9vxV/+XVxcePToETY2NuXyqauri52dHRoaGty4cUP2maSkJJ48eVJpvpcuXUpKSorCY+nSpdUqM0BeQSGPnsfQ0Va+FpiKCnS0tcYnvOL1jH3Do+hoq7h+soddI3zCpOkjklKIS8tQ2KauliZtG1riG16768BlZUlPdEoeoWEJJCSm4+IkXzNTItHEwd4Kv0rWcqyMiooKmsUna7v/usG0d7Yw/d2tsgfAj7+e58uvT9RaeUrkFRbyMDYGT2v596wCeDRsxN3omq8zPbJlaxKyMjkf+vTFiWsgv6iAx6nP6WAqv3mZCiq0N7XjQXL5QatnGXGMvfodE679IHtciX3MncQQJlz7gZjsym8wo6qiotS7kucVFvIwLgaPhmXqpEEj7sb8+3ato65BUZlLxguLCmt91mBWdh6R0cmyR2i4NFbatS0VKzqatGxmxaOAl4wVVXmsBATHkJdXQLu28u/Jur4xlvUMePiS262O/KIC/FOicDOzlecHFdzMbPFNqv7Nu1RUVGTr8JaWnp9DUm4mjXRNcDCqz4WY2htIKU0W82Xbl3XtxHwJiYYGjQ0Na3wSXZW8wkIeJkXhYWEje00FcLew4V589etEFRU01V7vHAVZ3Dd4ubif5diB913cmXz8AA/iFX9cDU9LITYjHY8G8tjT09DEqZ5VjfYlFcnMySMiNln2ePo8gfjkdDq0lJdHV1uT1raWPAiunXY2pFNr/EKjCYyIf3Hif+H/S8wD5BUV8ig5Cvd6TeT5AtzrNeFe4kvGSgVlKWGho4+RpqTKwY1/Iysrr+JjMEd5+5LoaNKyuVWl62lXRlVFPmBeERWkN7KvKs2/UWlfX0vHX6NavJrjLyguS2K0wg0iVQAPy8bcja/8h5tZDm6818aTyef38iBRcSBOQ1VVtoxUaQVFRahSu8ctmbl5hCWmyB5BsQmVnl/4hFXcvvIKCvF7HkNHuzLnOXbWsvOWku1sfms4eQUFvLvzsFKvPinp7z3KHuNbN+JeNe9dVV0qKipoqtVujJQoaV8eFbWvuKrb1/ttPJh87q9y7au0MU0duZ8QhX9S7f7wWxFpv/K8wn7lflL5pXdC0uMZcel7xlz5Sfa4GBPArYQQxlz5ieisVCIzk4jLTlPYpq66Fm2MGla4zdqSV1TIo6Ty/YpHPRvuJVT/B9uy51Ulg9s2eiZMubSL5Fzl37D8ZTm1Au8yt2+6dlv6OoCmBrRqrpimsBC878rTCEJdIGZwVyAhIYFRo0YxdepU2rZti76+Prdv32bdunUMGTIEABsbG86dO4enpydaWloYGxvTrFkz/v77bwYNGoSKigqffPKJbBZ0CRsbGy5fvszYsWPR0tLCzMyMbt26ERcXx7p16xg5ciQnT57kxIkTGBhI77wbEhLCr7/+yuDBg6lfvz4BAQEEBgYyadKkF5bl008/ZeDAgTRq1IiRI0eiqqqKr68vDx8+5PPPP6/W9/Hee+/x/fffM3bsWJYuXYqhoSHe3t64urpib2/PwoULWb58OXZ2djg5ObFlyxZ8fHzYtWsXAG+++SbLli1jxowZLF26lNDQUNavX6/wN959911+++03xo0bx6JFizAxMSEoKIg9e/awefNm9PT0mDZtGgsXLsTU1JR69eqxbNmyKgfpa2M5km3X7rJmeB8eRsbyIDKaSe7O6GhqcPCudPbolyP6EJOazjdnpAP826/fY/u0UUzxcOHSkxD6t7GnVX0Llh+Wzw7Yfv0us7u58SwxmYikFD7o6UFsWgZn/YMrzENt2n/oNhPHuhMRmURUTDLTJnYmPiGdq9fka4FuWDOGq9eecPCfewDMmNKFG7efEhubio5Ek17dHHBq24iFH/8FSNf0rujGkrFxqUTHKOeu3pt97rChV1/ux0bjGxPNVEcXJOoa7C++KdGGXn2Jzkjnq+tXAelJR1MT6dpqGmpqWOrq0dLMnMy8PNlsDpAe5Ixq0ZoDj/0oKFLeWpwldodeZXmbkfinRPAoJYKxNp7oqGlyNFJ6Q5YVbUYSm5PKT09Ok1uYz9N0xcGgtHzpAVTJ69pqGrxl250rsf7E56RhpClhZKOOmGsZcC5aOeslltjse5sNPfrxIC4Gn5gopv0fe2cdVtXShfG1pUsQRESwQUJKEFFALFQUTOzCxi7C7m5sRGyvCaJid2GLgYliYoCi0s37/XHu2Z4t6PWGng3f/J7nez7O7H28a509s2fmnTVrbBxIXUmJ9jz685k0bkEJ6Wm04OoFIpI8E9MyX5+JgYYWWerpU3puLr1M+UJERKdexNFQ+7r0JjWVnnz+SDXLlqN+trX5f/NXsvtgNPl0rEvx7z7Tu4Rk6t/NhZI+pdGFq193kwRN70jnrzylvUckbcW3R326Ev2cEj6kkLqaMjV1s6BaNSuS34wwIpJE2B06FUPD+jSilLQsSs/IoVEDGlPMozeCCPL/ki3PLtEsu3b04MtbivkSTz2q1SM1BWXa90pSx2bbtaeErBRa/kjyjupnUp/uf3lLrzM+kXIpBapfrgZ5GdvS7JhI/t9saliTPuek07vMZDLVMqCxVi3ozPuHdPnDr3uHFWrzdn+2+T9TiSxu6kHv077T5kspUHnNwm1+gksDOvU8juJTU8hAQ5NGOzlTPkAHYn+daEdEtOHxVVro1JpiPr2jO0lvqY9ZHYkvzyUHRS1yakXvM1JpUcxZIiIaZOFMMZ/e0au0z6RcSoEaVjChtlWsaMrNo/y/qa2sShXUtfmDzappScJtPmSlFco1+V8SGnODFjf8s90nvqN+1n+2+8d/PpdGf7b7a5J2P8i2Do12dKaRpw5RfGoy6atJovTSc3MpI0+yiL4hJpqG29elF8mf6XVqMvnVdqGEjDQ6/uLXn/Gw4+Qt6ufpRK8TPtObjyk0uK0zffiSRmdvff1vr/brQGejn9LuM7eJiEhNRYkqltPhrxvpa1ONivqUnJ5FCZ++Rk1rqCqTe+0aFLT71+ykkVJS2jwR0cYnl2l+7bZ07/Nbuvv5LfmYOJGaghLtfXmbiIjmO7ShhKxUWnL/NBERDazhQve+vKNXaZ9IWUGRGhiYUOtKNjTttmSruLqCEg2zaEDH3jykj9lpVFFDlwKsmtDLtE90IeHXj8H2HLhJvTrXo/i3n+l9QjL17eFKSZ/S6OKVr2OwJbM60YXLTyji0J9jsF716erN55T4Z7/SpIEF2VlXooCpe4hIcnhl4/rmdP3WC/qSkkH6elrUvYMTZWfn0ZUb/32e/tDbN2lxEw+KSXxPtxPfU78/x1/SQ7kXN/GQtPkrX9/FpjLjLwNNTbIs+2df/834q4PF7xt/ERGFPrxGi5296O6n93Tn41vqa+EoeRfHSd7Fi5296H1GKi28LWmzvpZ1abRtfRp18QDFpyXzUaAZeTmUkZdLabk5dCXhJY23b0xZ+Xn0Ji2ZnAwqUfuqVjTr5qlf7s+WqGjybeREL5P+nF+4S+YXp2TmFxv6etPJB09p+xVJGslNUdE01/vPeU78e+rl/Oc856ZknqOhokyhvduTqrIijd1zlDRVlElTRZmIiD6lZxYS8/8L1kffpEXNPCgmIYHuvH9PfeztSV1JicIeSGxa1ExSxxZGyfT3el/7ewMNLbLQ16eMnK91LMDFlc6+eE5vU1NJU0mZWpubU13jitQ74p+nDvorQh9co8UuXhST9I5uf3xH/Sxqk7qiMu2RqV8Jmam04Jakfg2q6USjbevTyIuRFJ+WTPp/1q/0P+uXFE0lZWpZ2Yxm3zj9y2z/lq3PLtFMu/Z0P/kN3fvyhnpU/bNf+fMAyVl23pSYlULLH52gnII8epoqFN5TcyXzFdnyP55fpgEmDell+id6k/GZhpo1oQ9ZqXT6/a89Z2dD7FVaUKc13fv8ju5+ekO9TZ1ITVGJwl9I2sQCx9aUkJlKi++dISIiX3NnuvfpHb1Kl4zBGhiaUJvK1jQ1WhLEpciVohX1vKlmGUMaeHEnleI4KvvnzqPknEzKxa/Z7ZCeQfRKRpOPf0f08AmRdmmiCgZES0KIEj4QzZ8oud6lDdH2CKKFa4i8W0qE66NniYLnff03fDoRjZ9LZGVOZG1OtCWMKDOTqF2LX+ICg/FLYAJ3EWhqapKTkxMtXbqU4uLiKDc3lypWrEgDBgygCRMmEBHR4sWLacyYMbRu3ToyMjKiFy9e0JIlS6hv377k7OxMZcuWpbFjx1JKivAE8xkzZpCvry9Vr16dsrOzCQBZWFjQ6tWrac6cOTRz5kzy9vYmf39/CgkJISIidXV1evToEW3evJmSkpLI0NCQhg4dSr6+vn/pS/PmzengwYM0Y8YMmj9/PikpKZG5uTn179//p38PPT09On36NAUEBFCDBg1IQUGB7Ozs+LzbI0aMoOTkZPLz86PExESytLSkAwcOkKmpKf97RkZG0qBBg6hWrVpkaWlJ8+fPJ29vb/6/IY0CHzt2LDVr1oyys7OpcuXK5OHhwYvYCxcu5FOZaGlpkZ+fHyUn/xoBVcqRe7FURkONRjSpR2U11enhuw80cEsEJaVLtu4ZamtRgcwp4rdfv6OAPUdopLszjW7qQi+TvtDw7QfoSeLXPImhF26QmpISTW/tTqVVVSj61VsauGXvb8nHuWPPNVJVVSb/Ec1IU1OVYu7HU+DkPYIcjUaGOqRd+uvWQB0ddZrg70m6uhqUnp5Nz55/oIBJu+nmraK3+/4ODj19THpqajSmjoskvcuHD9Q7Mpw+/nkwWQWt0oJBdzkNTTrc5euC0EB7Rxpo70hX3rymrhG7+XLXipXJqHRpfqL2qzn5PobKKGvQQFN30lPRotiUdzTyxkb+4EkDNZ2/dehVAUBVNPTJs1Yt0lHWoOScDHqQHE8Dr4bQs7RfG+VxMO4x6aqp02hHF9JXV6eHHz+Qz8Ew/pkYaZYW7FIx0NCkw518+M++do7kayd5Jl0O7CIioqkXT5FfHVea6eZOZdXUKCE9nbY/uEPLb1z+pb4QEW2PuEZqqkoUMLgZaWqoUMzDN+Q/M1zQViqU1yHt0l9TOOloq9PEkS1Ir4wGpWfkUNyLD+Q3I4xu3PnaVlZsOEMFAM0KbE1KSop07fZzWrL2v98eK+XY23tURlmdhpg1prIqmvQ45T0NvrqVPv2Zj728mragjqkpKNNEay8yUCtN2fm59DztI024FU7H3n5tE/qqmhRQ04P0VDToQ1YaRcbfprWxv1a0O/TkzzbvJNPmD8i0ec0i2nzXItp8/Nc2X15Tk5Y19yQdNVX6lJlJN96+ofa7t9OnrF8beXPo9UPSVdGgUVYNqKyqBj38kkB9zu3kD9MzVNcW+KKuoEQzHDyovJoWZeXn0bPUJPK7sp8Ovf46CXSvUIMWOLXiPy93lqQlW3bvPC2/f+GX+XIw7jHpqqrT6Noy7f7w99t9j5q2pKKgSMHN2gj+naAblyjo5iUiIgq+c43UlJRorlszKq2sQtffvyGfw+G/JU/35qPXSVVFiSb0akpa6ip0+8kbGhEk7J+N9bVJR+tru7esYkBrAzrxn8d0bkhERJFR92n6xmN8ebM6ZsQR0dFrv3YBpaS0eSKiI28ekK6KBo2wbEj6Kpr0MDmB+kdtF7YVGV/UFZVpql0LKq9W+s+28pECrkfQkTcPiEgSSVtD24DaVrIlLWVVSsxMpajEOFr24Czl/oY8tjvCJf2K/7Dmkn7lwRsKmBr2w36ljLY6TRjdkvT+HIPFvfhIAVP30I3bkn4lJzePbGoaU4fWDqSlqUqfv6TTnfvxNDTwD/qS/N/nvz349DHpqqnRaCfZvv7ru9hIq4i+vvPXd7FvLUfyrfVnX79POP4y1ipNu3/T+IuI6NDLh6Snok5jbOpTWTUNevg5kXqf3s0fPFlBQ9iv9KhRi1QUFGlNA2Hax6C7F2jZXYnYOvzCfgqs1ZCCXFqTjrIqvUlPoUV3ztEfT279cn/WX7hBaspKNL2tO2mpqlD0y7c0cJPw/VVRV5vKqH+tX0djYklXQ42GN6lHZbUk6Ux8N32d51hWKEe2lSRnPh3z6yv477kvXE9vvwjnuf8Fh2JjJePJes5U9s861nvfXv7gyQqltQTtvpymJh3q/jV938DatWlg7dp0Jf41dQuTLATpqanT4uYepK+uQak5OfT44wfqHRFOF//lOVk/4uDLR5L+0bY+6f9Zv3xO7+Lrl5FGacEuxR417CX9Y4N2gn8n6M5FCvqzfhERtapiQRxxdODFrxWCZTn27h6VUdGgITWa/NmvvKMh17YI+5W/KeRujLtAagpKNMW6NWkpqdKtT69oyLUtlFOQ9ytc4Dkc/4B0VdRpZM0GpP/nGKzfhR18v1JBXVvwXNQVlGmafQsqr/7nGCzlI/lf3U+H4yX9ioGaFrkbSc4Ei2w2UPDf6n52a6E83f8V9x8T+Yz6ujNk/irJ3209QHPHE31IInonM/UzNpSI2fNWEm0NJyqvTzQzgMi1ztd7WjYm+vyFaPkGyaGUFiZEIQtZihJG8YLDt8mfGYz/AywmL5W3Cf+KhzNH8383bLFAjpb8e84eCeT/rrpysRwt+fc8H+bH/13n6AQ5WvLvuOYxh/+7yppFP7hT/LwY7M//Xb9d8fblQsRXX2wip8jRkn/H3VYz+L+rrijmbX741zZffdfsH9wpfuI6T+T/rrK2eLeVF75f20rt/kvkaMm/40boGP7v4tzmiYTt3mzvjB/cKX4et//6LBq0WihHS/495yID+L+rrCq+7+MXQ7++i6tumytHS/49z3t8TadoObF4z1cezP46X6kWVHzfxc9GfX0XV9k67wd3ip8XPcfxf9senCxHS/49d7xm8n+b7vm5neli5UnHSfzfBe9ryNGSf0ep8t9PH8tg/A5YDm4Gg8FgMBgMBoPBYDAYDAaDwWAUS5jAXcypWbMmaWpqFvk/aQ5sBoPBYDAYDAaDwWAwGAwGg8EoibAc3MWcw4cPU25ubpHXDAwMfrM1DAaDwWAwGAwGg8FgMBgMBoPx+2ACdzGncuXK8jaBwWAwGAwGg8FgMBgMBoPBYDDkAktRwmAwGAwGg8FgMBgMBoPBYDAYjGIJE7gZDAaDwWAwGAwGg8FgMBgMBoNRLGECN4PBYDAYDAaDwWAwGAwGg8FgMIolTOBmMBgMBoPBYDAYDAaDwWAwGAxGsYQJ3AwGg8FgMBgMBoPBYDAYDAaDwSiWMIGbwWAwGAwGg8FgMBgMBoPBYDAYxRImcDMYDAaDwWAwGAwGg8FgMBgMBqNYwgRuBoPBYDAYDAaDwWAwGAwGg8FgFEuYwM1gMBgMBoPBYDAYDAaDwWAwGIxiCRO4GQwGg8FgMBgMBoPBYDAYDAaDUSxhAjeDwWAwGAwGg8FgMBgMBoPBYDCKJRwAyNsIBoPBYDAYDAaDwWAwGAwGg8FgMP4uLIKbwfiPyc7OpmnTplF2dra8TflXlBQ/iJgvYqWk+FJS/CBivoiVkuJLSfGDiPkiRkqKH0TMF7FSUnwpKX4QMV/ESknxpaT4QVSyfGEwvgeL4GYw/mNSUlJIW1ubkpOTqXTp0vI25x9TUvwgYr6IlZLiS0nxg4j5IlZKii8lxQ8i5osYKSl+EDFfxEpJ8aWk+EHEfBErJcWXkuIHUcnyhcH4HiyCm8FgMBgMBoPBYDAYDAaDwWAwGMUSJnAzGAwGg8FgMBgMBoPBYDAYDAajWMIEbgaDwWAwGAwGg8FgMBgMBoPBYBRLmMDNYPzHqKio0NSpU0lFRUXepvwrSoofRMwXsVJSfCkpfhAxX8RKSfGlpPhBxHwRIyXFDyLmi1gpKb6UFD+ImC9ipaT4UlL8ICpZvjAY34MdMslgMBgMBoPBYDAYDAaDwWAwGIxiCYvgZjAYDAaDwWAwGAwGg8FgMBgMRrGECdwMBoPBYDAYDAaDwWAwGAwGg8EoljCBm8FgMBgMBoPBYDAYDAaDwWAwGMUSJnAzGAwGg8FgyBF2HAqDwWAwGCUT1sczGAzG74EJ3AwGg8H4z/j48SMRERUUFMjZEoYsbHIlTh48eECXLl0ijuPkbQqDwWAwSgCsvxcfHMex5yJCSsIzuX79urxNYDBEBRO4GYyf4P379/I2gcEQPWFhYVSuXDm6d+8elSpVioncIgEAL6A+ffqU8vPz5WzRP6ckTEak3Llzh2xsbOjixYvyNuVfwdo5g/HzFOf37/coCe/l169fU15enrzN+FecOXOG0tLSSsSC6eTJkyk4OFjeZvxrpk2bRps2bSKikiFyX7p0ibKzs+Vtxr9m+fLlRETFvq1MmzaNhgwZQgcOHJC3KQyGaGACN4PxF6xevZr69etHN27ckLcp/wnFfXBF9NUHWV+YyCJ/6tatSy1btiR3d3cmcosEWXF7+PDh1Lt3b0pKSpKzVf+MgoIC3pfi6oOUmJgYqlevHk2YMIECAwPlbc4/pqCggEqVkgwlHz58SCkpKXK26L+lJPSXxZ2S1Ifs2bOHpk6dSunp6fI25V9z584dOnPmDBEVf5Ho/Pnz5OzsTJmZmfI25R8TFBRE3t7eFBYWVuzrV1JSEp09e5Z27dpFW7dulbc5/5j379/T4cOH6Y8//qDdu3cTUfEWuVetWkWurq504MCBYi1yR0dH06hRo8jHx0fepvxrPD09SUdHh4KDg2nfvn3yNofBEAVM4GYw/gILCwuKiYmhpUuX0s2bN+Vtzr9CViAqrlFEsj4kJydTRkYGL7IU14lwUYPd4uiLsbExrVu3jpycnKhhw4bFVuSWPo/nz5/Ty5cv6dWrV3K26J8jKwg/efKE5syZQ+XKlZOzVX8fWSF15syZ5OvrS48fPy6WE8VHjx5Ro0aNyNvbm2bMmEFExVNIlX0mU6ZMob59+9KNGzeK9cRX+hxiY2MpMTGxWAt3xbFOfYtsHTt16hTt3buXDh06RJ8/f5azZf+ML1++0Jw5c2jJkiWUkZEhb3P+MX/88Qf17NmTIiIi6P79+/I2519jYGBASkpKxXqBbtSoUeTp6UkLFiyg3bt3U1pamrxN+kcAID09Pdq5cyfp6OjQ5s2b+Qjo4gQAKl++PO3YsYOUlZVpw4YNtGPHDiIqviL30KFDqW/fvtS/f3/av38/ZWVlydukf4SNjQ0dOnSIIiMjqUePHvI25x+Tm5tLjo6OtHz5ciooKKANGzZQZGSkvM1iMOQOE7gZjB+Qn59PjRo1oj179tDVq1cpKCio2Oa6kp0oLly4kPz9/YtdlMe3Pnh7e1Pjxo2pZcuW9ObNG/5acUIaYXvhwgUKCgqiJUuWUGZmZrH0hYjI0NCQVq9eTS4uLsVW5OY4jsLDw6l+/frUqFEj8vLyovDwcCIqnqLR4sWLyd3dnUqVKkWWlpbyNucfIW0PY8eOpTVr1lCrVq1IS0ur2AmQt2/fJnt7e0pOTqaHDx/S9evXBYt2xQnpM5k4cSKtW7eOxo8fT7a2tqSioiJny/4Z0nfxvn37qEOHDrRu3bpi10dKkfpy48YNCg8Pp4iICHmb9I+Q1rFx48ZRnz59KCgoiPr370/du3enY8eOydm6n0N2x9mAAQNo48aNNHXqVFq4cGGxFLk3btxIgwYNoiFDhtDo0aOpZs2aguvFsY/U09Ojz58/0+3bt+Vtyj9Cuqi4detWsrOzoxUrVtCePXuKZf2SjhWNjIzIz8+PcnNzKTQ0lHbu3Clny/4eUj+qV6/Oz7dCQkL4d3FxE7mldSw0NJQ6dOhAQ4YMoYMHDxa7XQ/5+fmkqKhILVq0oO3bt9PevXtp5MiR8jbrb1NQUEBKSkpERPThwwcyNTWlqKgomjt3Lh05ckTO1jEYcgYMBuO75OXlAQCSk5Mxf/586OjooGvXrrh165Z8DfsXBAQEwMjICEuXLsXr16/lbc4/YsKECdDX18fGjRtx5swZGBkZwc7ODklJSfI27R8REREBdXV1ODg4oEKFCqhatSpiY2Plbda/4u3bt/Dy8oKenh5iYmIAAPn5+XK26scUFBQAkNhuZGSEkJAQ7Nq1CyNGjECpUqWwbds2wX3FgYKCAuzbtw+VKlWCoaEhEhMTAYj/WRTFsWPHYGhoiKtXr/Jlnz59wt27d/H+/Xs5WvZz3L59G4qKipgzZw4AwMrKClZWVrh27VqxqlOy3Lp1C9WqVcPJkycBAKmpqXj27Bl27dqFy5cvy9m6v8/+/fuhoqKCVatWIT4+XnCtuD2jvXv3QlVVFVZWVuA4Dl26dMG7d+/kbdbfJiQkBIaGhrh27RoAYOnSpVBSUsKJEyfkbNnPkZubC0BYf9avXw+O4zB16lSkp6fLy7S/zc2bN1GtWjXs3Lmz0LUvX77IwaL/hoKCAjRp0gShoaH85+KCbF++c+dOzJs3D8rKyqhcuTI2bdpUrOqXLH5+fmjfvj1q164NDQ0NWFpaYuvWrfI262/j7++PTp06wdbWFqqqqrCzs8Pu3bv568WhrsnWsU2bNvHvL2NjY+zatQtZWVlytO7nkf2t586dC19fXxgYGIDjOPTt21eOlv1zAgICYGhoiGnTpiEwMBDly5dHkyZNcODAAXmbxmDIDSZwMxh/wZ49e6Cnp4fBgwejUaNGUFRURPv27REdHS1v0/4227dvR7ly5XDz5k2+LDs7G1++fEFOTo4cLft5Xrx4AQcHBxw7dgwAEBkZCW1tbaxevVpwn9gFPOlAKysrC0OGDMGmTZuQlZWFp0+fwt3dHcbGxnjw4IGcrfxrpH7cv38fZ86cwdGjR5GamgoASEpKgqenZ7ESuU+dOoWgoCAEBATwZR8/fsS4cePAcZzoRe6ift+8vDwcPXoUurq66NSpE18uVh++x86dO+Ho6AgAiI6OxtSpU2FiYoLy5cuje/fuePHihZwt/D4pKSnw8PDApEmT+LLs7OxiL3Jfu3YNFhYWiI6ORlRUFEaMGAELCwtUqFABtWvX5t/TxYGkpCS4ublh8eLFAICMjAy8e/cOoaGhiIqKkrN1P4e0Dn358gWNGzfG5s2bkZCQgCtXrkBfXx8tW7YsJNyLneHDh2PMmDEAgF27dgn6+8zMTHz8+FGe5v2QPXv2wNPTE3v37uUX5qTv6HXr1oHjOEyePBlpaWnyNPOnCQsLg52dHT58+MCXRUZGYujQoTA3N0fTpk3x6NEjAOLuX/bt24eQkBCcPHkSKSkpyMvLw+jRo9G2bVsA4rb9e0yePBllypTBxo0bsXbtWjRu3BjGxsbYuHFjsRO5N27cCB0dHdy4cQOJiYl48eIFGjVqBBcXF/zxxx/yNu+nCQ0NhY6ODq5du4Z3797h/v37cHFxQYMGDRAWFsbfV1zq2+TJk6Grq4utW7ciKCgIXl5e0NLSKlYiNwDMmjULurq6OHLkCI4ePYr58+dDU1MTvXr1krdpf4uYmBhUrFgRx48f58tu3LiBevXqwdXVFUeOHJGjdQyG/GACN4Mhw86dO/Hw4UP+84sXL1CpUiWsWLGCLzt9+jTKlSuHdu3aiT6S+1uxa/bs2ejYsSMA4O7du1i6dCnMzc1Ro0YNLFq0CJmZmfIw828RHR0NAwMDAMChQ4egqamJ4OBgAJLowZUrV/KR92Lj4sWLhT6bmprCw8NDsOiQmJiIZs2awdjYWFAfxYZ0UB4WFgZ9fX1YW1uD4zg0bNgQGzZsACARjby8vFC+fHncvn1bnuYWYty4cejXrx//OT09Hf369QPHcWjatKngXqnIraSkxEd5iQ3Z9n727Fls27YNp0+f5oXfQ4cOQVtbG927dy/yO2JCWrdkJ35Xr14Fx3Hw9PSEvr4+fHx8sHnzZvzxxx8oW7asILJbjDx//pz/WzoZzMnJKTYid1F15dOnT6hcuTKsra2hrKyMwYMHIyIiAg8ePECNGjVEGXEn64f0987IyEB2djbs7Owwd+5cZGVlISAgAC4uLqhQoQIUFRWLjFoVA48ePeKjhAHg+PHj6NGjBzp37iwQsx8+fCh6kfvbOpaXl4e2bdsiJCQEN27cgKamJtasWcNfCwoKwo4dO+Rh6l/y+vVrVKtWDRzHwcLCAubm5nB1dcXYsWMRExOD3NxcHD58GBzHYe7cucUiAvqPP/6AlZUVzp07BwAYNmwYnJ2d0bhxY0yaNAkODg6wtLQUdcBEQkICOnXqhIoVK6JSpUqoWLEizMzMUKdOHTg4OPD3ifldLEtBQQHevXsHMzMzftwlpX379jAwMMCmTZuKzSIKINml6ebmBuDrc3j+/Dns7e1hYWGB7du3y9O8n2bMmDH8WFLqx8OHD2FpaQk7OzuEh4fL07y/RUJCAszNzQuNf3v06AFtbW3s3r0bGRkZcrLu58nKyoKXlxemT58uKAsLC4OqqioGDRokR+v+Hs+fP4eRkREOHz4M4Gv/GR0dDXV1dTRp0kS0/SOD8SthAjeD8SevX7+Gq6srXr16xZfFx8ejcuXKhTqPU6dOoVSpUujVqxcuXbokF3v/DufPn0d2djZCQkLAcRz8/f1hZmaGjh07YunSpRg5ciQMDAzw9u1beZsqoKgJRnp6Opo1awY/Pz9oamoiJCSEv3bv3j00a9YM58+f/51m/hQnT55E6dKlBdFm9+7dg6OjIxQVFXmBW1rHEhMT0bJlS6ipqeHx48dysflnuH79OsqUKYN169YhISEBT548QadOneDm5oZNmzYBkKT8aNiwIapVq4bs7Gw5W/yVY8eO4c6dO4KymJgYDB06FKVKlSoUfZqUlIThw4dDR0cHycnJop0ABwYGomrVqrC3t0e9evXg4OCACxcuAAAOHz6MMmXKiDpSRVbkio+Px4cPH/Dp0ycAknfv8OHDsWPHDj7dSmpqKhwcHHDmzBl5mPtD0tLS8ObNGzx8+LDQ+1XaFmRF7uvXr4uyXsk+k9OnT2Pv3r38FtjU1FT88ccfOHXqlEDYcnJywsaNG3+3qT/Fs2fPsHfvXgCSqOChQ4ciISEB48aNQ9WqVaGuro62bdtizZo1yM/PR+fOndGuXTvRLQitXbsW1apV43fNAJL3mpKSErS0tPhoWqndDx8+RIUKFeDq6oo3b97IxeafITY2lhftV6xYATU1NSgoKAiErZSUFLi7u2PatGnyMvOHpKenY9u2bahbty4cHR0RGxsLPz8/uLi4oEyZMqhZsyZmz56N5s2bQ0VFBdOnTxe9CBkXFwc7OzvUqFED+vr6qFKlCjZv3syniLp16xZUVVWLRfqYnJwcpKam4vDhw1izZg169uwJLS0tDBgwgL9HjO/iokhKSoKZmRm2bNkCAIJgFSsrK9jY2GDFihWiFyClwSkzZ85EnTp1BAvBgGT8oqGhAVtbWxw8eFBudv4VUj8mTZoEV1dX/l0m/f+wsDBoaGjAwcFBEH0rVgoKCvD+/XtUqlSJF+Wl45eCggLUqlULpqam2Lx5s6gXtwBJXbKxsREEtwCSNtOzZ09wHIcOHTrIybrvU1TQR1xcHCpVqoQFCxYAkNQ76fW6deuifPnyGDt27O83lsGQM0zgZjBkkA7+YmJiEBMTg8+fP8PAwADr1q0DIOnQpRNFR0dHcBwHX19f0UY+FxQUICoqCgoKCnj69CkASd6xhg0bYvXq1Xjy5AkA4OnTp/wETCzICglz584ViCk9evSAiooKhg8fzt+TkZGBli1bwtPTU3QihJSEhAQAwMuXL/mye/fuwcHBATVr1uQjuKQDlISEBLRv315Uz+XbCd+GDRtga2uLjIwM/tqLFy/Qvn17NG3alB/ov337VrQ5348fP44uXbrwn2NjY9G7d29oa2sXErk/ffrEP0cxEhoaivLly/MpFWbOnAkVFRXs27ePv0caNSgbwSIWZOvX1KlTYWtrCxMTE1haWmL//v2Ce3NycvjUH87OzqJr9/fv34eHhwcsLS1RunRplC5dGuPGjcONGzf4e2RF7lq1asHIyEjU6a/Gjh2LihUrwtXVFeXLl0fz5s0FC4rp6el4//49PDw8YG9vL8rdNFlZWRg5ciSMjY3h5+cHjuP4xbjXr1/j/Pnz2LFjh2Ci3q1bN/j5+YlS8JL27R8+fOBtPnv2LLS0tODj48OnJ5Dafu/ePZiamgoW8+WNbNvdtm0bbGxsEBYWhry8PHz48AE9evSAkZERrl+/juzsbLx48QIeHh6oXbu2IHpdbKSnp2PXrl2oWLGiQFA5duwYQkJC4OTkBFdXV3Ach/r164uyfkmR2vb48WPs3LkTwcHBhQT5c+fOwdbWVrTp1aQ+5OfnF7lb4MiRI9DS0hLk4xXbM/leP1evXj20aNGC/5yTk4OCggK0adMGZcuWRa9evYqNLzdu3ECpUqX48yqk7N+/H15eXhg3bpyo+vvv2XLu3DlwHCfYBQxIUhe1aNECAQEBovJDyvdscnNzQ+PGjfnPubm5yMnJgbe3N3R1dQvtfJQ33/NjyZIlsLW1LbS4MHv2bLRq1Up080hZW968eYO3b9/yusOqVaugoKAgiNROT09Hz549sWfPHlH5wWD8LpjAzWB8Q3JyMmxtbdGtWze8ffsWixcvhrKyMh8BKWXQoEEIDg7mJ5dixs3NDT4+PvxEUBoVUVBQgOzsbHh4eKBp06ai6Qhl7YiNjYW7uzuUlZVx6tQpAMCrV69Qr149ODk5YcCAAZg9ezbc3NxgbW3NT/DF4su3xMXFgeM4LFmyhC+7f/8+bG1tYW1tXUjkFpsfUruuXr2Kd+/eYePGjTAzM+Mj06V17O7du+A4rlBaFjFy6NAhlCpVCj179uTLHj16hL59+6JMmTLFIhpN+lyGDBnC5w+PiIiAlpYW1q5dC0ASTSw9ZO7y5cuiFoZmzpwJPT097N69G9u2bcOgQYOgoKCAVatWAZBE2yxZsgSurq5wdHQUXbuPiYmBtrY2hg4div379+PAgQPw8/ODoqIiGjVqxG/xB762mZycHDg7OyMuLk5eZhdCVhBZu3at4LC/xYsXCw77KygowOLFi+Hg4AAXFxf+mYhR5H727BkaN24MjuMwbNgwvvxbASg+Ph4TJkyArq4u7t+//7vN/CGyv+v169dRtmxZHDx4kP/djx8/DnV1dfTv359fvJe2DzFF2cm22YiICMyaNQsKCgpwcHDAoUOHAABXrlyBt7c3FBUVYWJiAjs7Ozg7O4u6jknJyMjArl27YGxsDG9vb8G1tLQ0JCUlYceOHUUeRik2fvR+zcjIQKtWrdC6dWvRvId/BtnfOy8vDwcOHECZMmXQrl07OVpVNLK/6927d3H//n1+QfTq1avQ09ND7969AXz1q3v37oiKiuK/K5b6JevL5s2bMWnSJPTv35+fa4WGhkJRURETJ07EzZs38fz5c3h6egrOsRBDPft2cW7mzJkYOnQo/1yCgoKgqKiIefPm4e7du4iPj4enpydmzJhR5L8hb2RtuXfvHmJiYvj0gmfPnoWFhQV69OghuL9Lly548OCBaP2IiopCWFgYrl69ig8fPuDly5dwd3dH+/bt+R3anz9/RqtWrfgx5rf/hryQba8zZsyAg4MDLCwsUKNGDRw6dAjJycmYPHkyf1Cmn58fGjZsiFq1avH2i7l/ZDB+BUzgZjCK4Pr163B0dET//v1x8uRJDB8+HIqKili2bBl27NgBPz8/lC9fXnSHG33bGUujA1esWAFnZ2c+72Z+fj4yMzMRGhqKRo0aoVatWqITiABJjuR69erBy8sLZcqUgYqKCr8t8fnz5/z2v7Zt22LkyJGFtgGKlWnTpkFFRUUwkJKK3LVq1cLnz5/lZ9x3kB1kSSOAo6Ki+EibRYsWCe5/8uQJatasKfo89YBE7Dly5Ai0tbXRrVs3vvzRo0cYMGAAOI4TZfoLWaTPZ9CgQQgJCcGxY8cK5avduHEjQkNDBe1DjG0lJSUFLi4uWLlypaB8zpw54DiOz7V94sQJTJkyRXTtPikpCU5OTvzBeLLs2LEDampqaNOmDb+tHxCP7VKuX7/OT4qkfcKwYcPg7+8PANi9e3ehw/7S09ORkJCANWvW8N8Vm19SUlJS0KpVK7i4uKBmzZqC/NpSf48ePYq+ffuiSpUqxeI95ubmBmNjYxw9epTvz48dOwZ1dXX4+vqK/qC58ePHo2zZslixYgXmzZuHGjVqwMrKihcgcnNzcfToUWzbtg0nTpwQfR2TRSpyV6pUSbD9/duUXcXBl29JSUnBuXPn4OHhASsrK1GOJf8O+fn52LVrl6iCPgDhGGzSpEmwtraGqakpjIyMMGnSJCQnJ2P37t0oW7Ys7O3t0blzZzg6OqJGjRqF3uViIiAgABUrVkSPHj34M1CCg4ORkZGB7du3Q09PD8bGxqhYsSLs7Oz4+iUWoV5KQEAAKlWqhE6dOqFLly78zqCMjAysXbsW2travB82Njai9EPWlokTJ8LOzg4VK1aEvb09Ro8eDUByAKi5uTnMzc3h4+MDBwcHmJmZibaOBQYGonr16rC0tETdunXh7OyM58+f4+LFi2jVqhUqVKgAKysrWFhYwNraWrQLjdOmTYO+vj4iIiLw7t071K1bF1WqVOHPdtm5cyfatGkDd3d3dOvWrdi/hxmMfwMTuBmM7xAdHY3atWvD19cXZ86cwfLly1G5cmXUqFEDNWvWFBwKKDYuX74s6NQ+fvwIAwMDTJw4kS979+4dgoODMWTIENEJRACwZcsWqKur4/Lly0hJScHdu3fh4+MDJSUlXuTOz88vNAgR00p1UfZJmTVrFkqVKiUQuR88eIBKlSrBxcVFdIMrKYmJiVi3bh0WLlzIl61atYqPUHn58iU+f/6MCRMmoEqVKnzEsFiQ/q5xcXG4deuWIHet9BBGWZH7/v37GDZsGJ/LVix8b9A6ceJEqKurQ0NDQ3DgVFJSEpo0aYKZM2f+LhP/EQUFBUhMTET58uX5fKLSrdYA4OHhAR8fnyK3l4uFu3fvombNmnwqkm+3w2/cuBEcx4k2h+ikSZNQvXp1REZGCiKA2rRpg/Xr13/3sL9vD/4S0zMBCk9Ys7KyEBsbi759+8LMzKzQIZKXLl1CeHg4f0irWPjRhLV58+YwMDAQiNwnTpwAx3EYMWLE7zLxbxMbG4uKFSsiIiKCL0tOTkadOnVgbm4uiEyXRWx17EdIRe7KlSujc+fO8jbnPyEvLw+DBw9GkyZN4O3tLcqx5D9B9l0hb4Ho2/fWnDlzoKenhwsXLiA5ORkjRowAx3F8BO2zZ8/g6+uL/v37Y+jQofyzkLcfRXHgwAEYGRnx86mLFy+C4zjBu/j58+e4fPkyTp48KdpFrb1796JChQp81Pb58+fBcRx2797N3/Po0SOcP38ehw8fFp0f39aNOXPmQFdXFxcuXEBCQgJGjhzJ17HMzEw8ePAAgwYNQp8+fQRzSDG8j2XbS3BwMAwMDPidpJMnT4aysjIiIyMBSNIpnjlzBhMnTsSKFStE5YeUgoICJCUlwc3NDWFhYQCAyMhI6Ojo8PNH6fP7dhFbLPWLwfjdMIGbwfgBN2/ehIODA/r37493794hIyMDSUlJSEpKkrdp3+Xw4cOoXr06rKyssH//fl6YW716NerXry84sFCaqgQQV4cOANOnT0fz5s0FZe/evUOHDh2gqqrKR9SKcdAuPRBPyvnz57FkyRLMmTOHzyEKFC1yP3r0SFQpCmR59OgROI6DsbGxQDzNzc1FcHAwVFVVUaVKFVhYWMDQ0FC0i0Dh4eHQ1dVFlSpVYGhoiIMHD/IDQanILZuuREzb+YHCWy8vX76M69ev82UdO3ZEmTJl8ODBA7x58wYvX75E8+bNUadOHdENeL/Xftu1awdXV1e+LUnt7tatm+DZiJGDBw9CS0sLDx8+BCA8HCg/Px95eXmwtbUVnCEgJpKSktCgQQM4OzvjwIEDfN+wdOlSqKurQ1FRsdBhf02aNBFlTncp0mdw6dIlrFu3DhMmTMCjR4+Qm5uLuLg49OvXD5aWlnwey+nTpyMgIEBUUc/fpq+6ceMGNm7ciAMHDggizJs1a1ZI5D59+jRfH8XIixcvUKlSJT5aWzo2+fLlC8qVK4f69etj//79ouzv/w4ZGRnYs2cPVFRUBKkWijMvX77EuXPn+Gcjtj6mJCCbWsjb2xvbtm0DIBFWdXR0+MVG2TG9LGJ4Jhs3biy0YyE0NJQ//2Tnzp2ChdPPnz/zu05lkfdcZefOnYVsWLNmDX9wd1F+fPjwodC/I28/vkVaRzIyMtC+fXt+keHAgQPQ1tbmU919bzws7zp26dIl/m/pYYv9+vXDlClTAEjyt8um7EtPT+cPKpdF3n54e3tj6tSpgrLnz5/zu8ZPnjwpqF9paWmYOXMmUlJSBN8Ra5AUg/E7YAI3g/EXREdHw9HREZ07dxZdDk6gcCf2+fNn3Lp1C71790bt2rVRo0YNrFy5Eps2bYKZmRmOHj1a5PfkiXTwLjt5XbRoEcqWLVtoUr9nzx5wHAcVFRWcPXtWcE0MLFmyBHXr1uUXEiIjI6GgoIAmTZqgbNmysLGxwcCBA/mcqLNnz4aKikqhFB9i5PPnzxg7diyUlJT4SGDZ3/7BgwfYt28fwsLCBAdpioWCggK8ffsWdnZ2WLlyJa5fv45+/fpBVVUVmzdv5idfR44cAcdx6N+/v5wtLozs7z169GiUL1+e38LbuXNnZGdn4/nz53Bzc4Oenh6MjIzg6OiIunXrijpf7ePHjwUCXGRkJOrVq4c+ffrwImNeXh4aNmxYZOoPMXH16lVBFFpR7yd7e3vBoXNiQSqQpKenw83NDY0aNUJERATy8vKQmJiIbt26wcjICLdu3UJ2djZevnxZLA77A4CwsDDo6uqibdu2qFevHqpVq4aJEyeioKAAd+7cweDBg1G6dGk0aNAAysrKgsNA5c3y5csxePBgfvEzIiICKioqsLOzg56eHmxtbTF37lz+/ubNm8PY2BiRkZGiW6AripSUFFStWlUQZZ6Tk4P8/Hw0atQIRkZGcHZ25g/GFlOf/3dJT0/HqVOnRPce/ie/qVifg1jt+jv069cPTk5O/Of8/HwkJyfD0NAQx44dw+nTpwVCV3Z2NiZNmiQ49FcsXL58GRzHwc/PT/A+Wrp0Kdzc3LB3716ULl2aT3kFSMTv7t27C3bZyZszZ86A4zhMnTpV0H5nzZoFd3d3REZGFvJjzZo16Nu3L38ooJgYMWIEbGxs+M/5+flITU1FtWrVcPjw4UKp7nJycjBv3rxChzPKm0WLFsHCwgJ79uwRlPv4+GDbtm04evSowI/c3Fxs2LABW7duFV3/OHfuXCgoKBSaE7Zq1Qre3t7Q0NBAaGgoX/7ixQs4Oztj7969v9tUBkO0MIGbwfgJrl27hgYNGuDt27fyNkWArCCcm5tbaAU3Ojoaq1evRtWqVfmccI6OjqKKQN+xYwf69OmDx48fIy0tjS+/efMmateuDT8/P0Gu2suXL8PX1xe+vr6oVq0aXr9+LQ+zv0tsbCxKly4NDw8P3LlzB56enoLB4cKFC+Hs7IxBgwbxA6spU6ZAT0+vUOS3vClqkpiRkQE/Pz+UKlWK3375bQoGsSH1Iy8vD2lpaRg/frxgsjFs2DCoqKhg8+bNggPaxJaWRPZ5nD17FjVq1ODzoO/btw+Ghobw9PTk74mIiMDu3btFt7V30aJFiIqK4j8HBATA1NQUqqqq6N69O59jOyQkBLVr10bFihXRsWNH1K5dG5aWlqLwQZaMjAwkJCQIPjdv3hxVqlThRVLZrfvp6enw9PRESEgIAPGIMbJt+MSJE5g5cyaUlZVhb2+PI0eOAJBESbVt2xZKSkowNTWFnZ0d6tWrJ+rFE0By6GfFihWxceNGAJL0FxzHCVL2vH79Gtu3b0dgYKDo2n5QUBDKlSuHgIAAXL16FQ0bNsSaNWuQk5ODu3fvYtKkSTAyMsL8+fP57zg7O6NGjRqCflXeyNaxb+v9nj17oKysjFmzZgnu6d27N6KiomBkZIQhQ4b8Nlv/iv+i3Yqx7b979w7Jycm8sPijvv3b74mBf+qL7LOQHXPKixMnTsDIyAitWrUSlI8ePRqtWrWCurq6QOh6+/YtPDw8sH79+t9t6k8RHh4OFRUVjB49mh9/3b17F/Xq1YOioiIWL17M35uWlobWrVtjwIABomkjUjZv3gwlJSVMnjyZD4q4efMmnJycoKioiKVLl/L3Sv0YNGiQ6PzIy8tDeHg4LC0t4e7uzpfn5ORg4MCB6NChA0qXLo3g4GD+2qtXr+Dl5cWnjxMLFy9eRKdOneDm5iZIbzNy5Ejo6upCS0tL0FY+fPiAJk2aCPpLMSAdP61cuRIcx2HJkiXIyspCfn4+5s6di/Lly6NTp078/enp6WjZsiXc3d1FO/ZiMOQBE7gZjJ9EbKvvsgP1hQsXom3btrCwsMDSpUsLpbh4+vQp9u3bhzZt2qBcuXI4efJkoX9DHiQnJ6N69erQ19eHtbU1+vXrxwsQgCQauk6dOujbty/u3LmDR48ewdPTE3379sXZs2dhYGDA+yIGpCLWs2fPUKZMGTRv3hxNmjThTyAHgNTUVMydOxd2dnZ48OABXy62A0ulg/Hz589j0aJFGDFiBCIjI3mxZMyYMShVqhQfMSG2wfu3HDx4EJ07d4a9vT2cnZ0LLYwMGzYMmpqaWLt2regiOr4lLCwMXbt2xdChQwXlt2/fhq6uLkaNGlXk98QwAH706BE0NDTQuXNn3L59G+Hh4ahevTovxltZWaFZs2b87oyYmBhMmDABgwYNwtSpU0WX4/Xx48fo0aMHnJ2d+YUsANi+fTuqVq2K2rVr49q1a4LvTJ06FRUqVBBtKqLx48dDX18fS5YswbRp01CtWjXY2Njwu39ycnJw+PBhbN26FceOHRPV4gkgScfx7W97+vRp1KtXDwDw8OFDVK5cWbBD49mzZ6J/h61btw7GxsYYM2YMWrRogTdv3vDX3rx5g/Hjx8PR0VGwE+LVq1fyMLVIZMcbK1aswIABA+Du7o6DBw/yW8WXLl0KRUVFtGrVCkOHDoWrqyvMzc0BSCJaZRfw5ElJFYTnzJkDV1dXWFpaomPHjvzYpSifZNvLihUr0LlzZ7kHT5QkXwDgwoULqFy5Mlq3bs2Xbdy4EYaGhvDy8uLr0IcPH9CyZUu4urqKop+XRdaeiIgIlCpVCjNmzEBubi7y8/MxY8YMWFhYYNiwYYiJicHJkyfRokUL2NraiurAP1k/tm3bBo7jsGjRIhQUFCA7OxsTJkyAhYUFAgIC8PTpU5w9e1aUfsiSl5eHI0eOwN7eHk2aNOHLt23bBmVlZXh6evLvZmkdq1+/vqjqmNQW6TlNDRs2FEQzN2vWDOXLl8fLly+RmJiIN2/ewMPDA05OTqIZswDC+vX06VMMHDgQCgoKWLFiBQDJLqe+ffvC2toajRo1woABA+Ds7Cw4sFRMz4XBkCdM4GYwijkTJkxA+fLlMXPmTCxfvhyampoYMmQI7ty5U+T9TZo0EQyW5UleXh7Gjx+P4OBg3Lx5EwsXLoSOjg46d+6MZcuWIS8vD4sXL4aXlxc4joOJiQmsra0BSCJsTE1Nce7cOTl7IUQ6gH3y5AmMjIwKHTQDSERuDQ0NrFy5Uh4m/jTh4eHQ0tJCv3790Lx5c9SuXRve3t7IyclBSkoK/P39oaqqyueDFCuXLl2CqqoqevXqhaZNm0JRURGzZs0qlH+vd+/eMDAw4NPiiJG3b9+iRYsW0NXVhbe3N18uHdhOnz4d9evXR0pKiugmU1J7oqKiYGJign79+mHixImC7bwPHjyAs7MzmjZtihMnThT574hlEH/nzh0YGxtjwoQJAluTk5MBSCLQzczMoKioiB49eqBLly7o2rUrypYtK5r89N+2gSdPnhQ67O/Tp09wcHCAhYUFDh8+XOSkUAzPpKCgANHR0VBRUYG/v7/gcMitW7eibt26SE1NReXKlTFgwABe6Dp+/Dj8/PyKzJMqBmTb8Zo1a6CjowNlZWXBLghAstNMU1NTVIu+RTF27Fjo6+tjwoQJ6N69O8zMzDBu3DherDt//jy8vLzQpk0b+Pj48JN3Ly8vUURwlzQRVcrEiROhr6+P7du3Y9euXWjQoAEqV67Mn+/wvej7tWvXQkNDA7t27frtNn+P4uyL7Lv06NGjmDNnDjiO43NVA8C8efNQo0YN2NraonHjxnByckKtWrVEJ3TJ/razZs3ChAkToKWlxacrASQLo1OnTkW9evWgoKAAR0dHeHp6isoXWT/mzp2LqVOnQk1NDRzH8TmeMzIyMHbsWNSuXRuKioqoXbs2PDw8ROWHFNn6f+DAAUyaNAkcxwl2C6xYsQLa2tpwdXVF/fr14eLiIro6JuvHkSNH4OvrCz09PdjY2CA8PByAZEHb1tYW5cuXR+XKleHk5IQ6deqIyg9ZAgICULNmTb5vLFWqFB9pnpycjG3btqFbt27o168fv1AEiCfAgMEQA0zgZjCKMXv37oWJiQm/pf/mzZvgOA66urro1q2bIGe4NLdqeHg46tatK5p0GIcPH4aWlhYvyGdmZmLy5MngOA4uLi5YsGABf4jerVu3+AGNn58frKysRBMFJSUuLo6PrHvx4gUMDAzg4uKCe/fu8fdkZWWhTp06goMaxcaTJ09gYmLCb098/vw5NDU1ERAQwN+TlZXFDyi/TY8jFp4/f46JEydiyZIlfNnYsWNRtWpVLF68uJCoJYatybLIHlAo5fr16+jQoQPKlCmDzZs3C+5fuXIlrK2teZFVbEgnFRcvXkT16tXBcRzGjh0ruOfhw4dwdnZGy5Yt+VPjxUZcXByMjIwE7QEAFi9ejEaNGuHu3bsAJM9q6tSpaNCgAdzd3TFx4kTBQb/yxMfHR7AtHJBE/FapUqXQYX8fP36Evr4+GjVqhB07dsh998+PWLVqFSpVqoTAwEA8f/4cgESkr1q1KjiOKySS+vn5oVmzZqLpE/+KrVu3QldXF3379hXUpeTkZFhaWoo6F+eWLVtQtWpVfoHnwoUL4DgOpqamGDNmDH+onKzokJ6ejoCAAJQrV05UB2UWZxH1W44dOwY7Ozv+oLZDhw5BS0sLNjY2KFeuHP+88vLyBH4FBwejdOnSvJgkBkqKLwEBATAxMUFAQACaNm0KdXV1tGjRgr9+5MgRLFu2DAEBAVi/fr2oha6ZM2dCT08Phw8fRkREBObMmQNFRUWMHDkSgKR9ZGVl4caNG0hISODbi9h8mT59OsqWLYsDBw5g165dmDx5MkqVKoUJEyYAkNSp9PR0XL58GW/evBH9watjxoyBubk5xowZg8aNG6NMmTJo1KgRf/3w4cMICgrCmDFjsGHDBtHWMX9/fxgZGWHWrFkYN24cTExMUK9ePUFb/uOPP7BlyxYcPnxYdLvOpOzfvx+ampq4cuUKcnNzkZSUhLlz54LjOCxYsOC73xObSM9gyBsmcDMYxYRvozFzc3Nx9OhRfvvSwYMHoaOjg+3bt+PYsWPgOA6+vr6Ftsf369cPNWrUEJUgOWTIEIHoYGlpibZt22L06NFo1qwZOI7Dpk2bAADnzp3D4MGDUaZMGdy6dUtOFhfN48ePYWZmhilTpvD52p8+fQpdXV3UrVsXmzdvxqVLlzB+/HhoaGjwB2aJkfPnz6NmzZoAJNv3K1WqhAEDBvDXr1y5wg/mZfMPi4knT56gTp06MDIyEuRFBCSTx8qVK2Pp0qUC+8UU9Sw7+U5ISEBycjJfdvv2bXTo0AF16tRBaGgo8vPz8fbtWzRp0gReXl6i8gOQRKKNHTsW3t7evHh6584dmJiYwM3NDVeuXBHc/+jRI5iYmIj2QMlJkyahRYsWgoWEyZMnQ0dHB3p6eqhVqxYvcgPgD5UV03MJDQ3lFxyk/cHnz59RtWpVQZqb3Nxc5ObmwsXFBaqqqqKIoi0K2fayZs0aGBkZYezYsXy6kg0bNsDExAQDBw5Eeno67ty5g3HjxkFbWxsxMTHyMvu7SOtKbGwsoqOjBYu5a9asQYUKFdCrVy+cOnUKjx8/5n0R0wG/39b3LVu28BP1iIgI6OjoIDQ0FNOnT4e6ujr8/f0F/eLjx48xefJkVK1aVVT9fUkRUaXcuHEDgYGBACSilr6+PlavXo3o6GhUqlQJFStW5H2VEhwcDG1tbdEtQpYEXy5fvgxdXV2cPn0agCTw4+DBgyhXrtwP0/SIUejKzs5G06ZNMXXqVEH5tm3boKCggPHjx/P9oyxiW0TNzMxEw4YNMXv2bEH52rVrUapUKcycOZNfEJZFbH5IuXTpEsqVK8eng8vLy8POnTthamoqSFfyLWKrY/fv30fVqlX5c0IAiW9t2rRB7dq1v7vgKzY/AEl+d1tbWz63u5RJkyZBUVGxWKRQZDDEABO4GYxiRHZ2tmDCmJCQgDdv3uDDhw+oV68ev40pIyODj1abM2eO4Pu9e/cuJCbJm9DQULi4uODTp0+oVasWXFxceOEoPj4eO3bs4Ffar169imHDhgnyV4sJ6anks2fP5iO5nz59CgMDA3AcB09PT7Rv3/67KWR+J0VFmElztl6+fBlNmjTBo0ePULFiRQwYMIAfEF67dg0jR47E06dPf7/Rf8G3gsq0adP4fJWyOWsBSa5hLS0trFq1SrSTEEByCGnNmjVhbW2Nhg0b8mLc7du34e3tDQUFBZiZmaFz585o3Lgxf16AWHwKCQmBnp4eGjduDFNTUygrK/MLDlFRUahWrRo6d+7MRz5KefHihSgnIfn5+XBzc0O/fv34ssTERHh6eiIqKgo5OTmwsLBArVq1+Het1A8xCNzf2hAcHIxBgwbx0c47d+6EkpKS4ACmvLw89OnTBxcuXBDlM5EiG5G1cuVKVKhQAQEBAXj37h3S0tKwatUqGBkZQVdXFxYWFrC1tUV0dLQcLf4xYWFhqFChAnR0dNCoUSN+QRuQPLcyZcpASUkJLVu2hIeHh6hEYNmFw3Xr1iErKwsfPnxAQkIC3r59CwcHB34HwefPn2FoaIgKFSpg+fLl/PdycnJw586dQu9ueVOcRdTv9QsfP35EXl4eWrZsiUmTJvH3uru7w9DQEC1btuTvDQ0NhaamJvPlF3HkyBEYGBgIUtjk5OTgjz/+AMdx6N27txyt+3ukp6fzaYikSA8m7969OziOw7Bhw0QXTfstqampqFatGmbMmAFA0o/m5+cjNzcX3t7e/G40MfePskRGRkJXV1ewazEjIwPBwcHgOE6QAk/MvHjxAuXKlSskZF+6dAk6OjpwcHDgA6TEzr59+6CoqIjY2FgAX8eNUVFRUFBQAMdx2L59uzxNZDCKBUzgZjCKAWfPnsX48eNhYWGBOnXqoEuXLnyEMCBJw2BpaYnIyEgAkonl0KFDERkZWWiwJQaBpSgcHR3BcRwaNGjw3byU0gHwt6vb8kL6W347yQoMDISlpSVmz57NP6eXL19CWVkZXbt25Q9qFAOPHz/mhaxdu3bByckJ8fHx+PTpEy/KDxs2TPCd0aNHo2HDhqI7GFPKpUuXsHbtWv7znDlzYG1tjcDAQH4LvJSpU6eKLpJetj5t3LgROjo6CAkJwcqVK+Hu7g4dHR2+rd+6dQve3t6wt7cXbGEsKpJIHqxbtw7KysrYv38/cnJykJ2djUGDBkFVVZUXVGVF7hs3bhT6N8QyYZTakZeXhzp16vCRzNLnJduuMzIyoKKiUij9ihiQ7QNyc3MRFBSEmjVrIjAwkBcSFy5cCAUFBbRt2xbDhg1D/fr1YWlpyfsqlmci5Xtb2lesWAFDQ0MEBATwE/mUlBRERkYiJiZGtLtPCgoKkJCQAEdHR2zYsAEXLlyAj48P6tati+nTp/P3SQWv6dOniyrFysmTJ1GhQgXcv38fI0eOhJqamiAn+o0bN1C9enVcvnwZAHDv3j307t0bq1evFtViEFCyRFRZXx48eCDYZQJIAgqMjY2xdetWAEBSUhI6duyIY8eOCZ7Hli1bsG/fvt9j9HcoSb58y+vXr1G2bNlCaezi4uJgbGwMjuNEubvpe21l+vTpqFatWqHgmokTJ6Jx48Zo0KCBaBbkge/7MXbsWNSoUYPPtS+tR/7+/nyuarG8t76H1Ldnz57BxMSkUJq7169fo0qVKuA4rtBB5vKmqJR9L1++hK2tLebMmYPc3FzBtcaNG8PMzIxPhSMWvle/UlNT4e7uDk9PT0H6scePH2PYsGHYvXu36BeCGAwxwARuBkPkbNq0CSYmJujatSsCAwPRvXt3GBkZwdjYmN++eO/ePRgYGCAgIADh4eFo2bIlGjZsyHf0YhMjZJHauHXrVlhZWfECl9gHiVLOnTuH9evXIzU1VVAeGBiIypUrY86cOfzW8ri4ODx69EgeZhZJQUEBNm7cCI7j0LVrV0EqGECSJ9nAwAC9evXCrVu3cPnyZfj5+UFbW7vQZFIspKWl8Wl4QkND+fLp06ejVq1aCAgIEF004PeIjIzE5MmTC0Wf9OrVC2XKlOH9uH79Orp06YL69euLauv77du3wXEcJk+eDOBrmz5+/DjKli2L69ev82WXLl2CqakpmjZtKqo8u1KeP3+OtWvX8lHmrVq1gpmZGd/uvxWNU1NT4e3tjY0bN8rD3O8ia2efPn3g6uoKQHJwlp2dHfz9/Xkh+MyZM2jVqhXatm2Lnj178ltjxSREAF99OnnyJHr37o2OHTuif//+vL3SdB6BgYF8uhKxIrtompycjE6dOuHz588AJLsERo0aBScnJ4HIvW7dOlEt0knrR7169aCvrw8tLS0+Sl567fz586hRowYWLVqEy5cvw8vLS3CInljGLCVVRJWOT9TV1eHt7c0vNABA27ZtYWtri3Xr1qFRo0ZwdXUV7cIWULx9+fZdKq0zGRkZ/KHYBw4c4K+/f/8e3bp1Q1RUlCjsl0XWl6dPn+LmzZvIyMhAbm4uHj9+jJYtW6J58+b8mUGpqanw8vLCnj17+O+JYdwv68fz589x9+5dZGdnIz8/HzExMWjWrBk8PT35d0F6ejq8vLywf/9+/nti8EPKt3VM+jk5ORlt27aFh4eH4JDs+Ph4dOjQAcePHxdVHZP1IyUlhd+pCHxdkN+yZQsf3CHtP7ds2SKqMYusLZs3b8bkyZMxduxYnDp1Cvn5+Th69CgaNWqEevXq4dChQzh9+jQ8PDwE+feZyM1g/BgmcDMYIiY4OBjKysrYvn07n7IjLy8P169fh6urK4yMjPitTKGhoahQoQLMzc1Rv359fnIvpoHWj4iPj4ehoSHmzp0rb1P+EtnfdNiwYTA0NMSmTZsKRWZ36tQJFStWxMSJEwUR92KjT58+hbYk5ufnIy8vD0eOHIGxsTEqVqwIMzMz1KlTR1Tb4Ivi7t27GDRoEOzt7RESEsKXT58+HY6OjhgyZIionwcgEa1r1KgBNTU1bNmyBYBw54KdnZ0gT/LNmzfRrVs3WFtbi+aQuZycHHTr1g3lypXD8ePH+fK1a9dCR0eHzxUsHfCfOXMGHTt2FNVkBJDUpxo1aqBdu3a82HDp0iVoa2ujXbt2gnul74YJEybAwsJCVPmQZYmNjUXTpk1x8uRJvkwqcvv5+fGpir6dSIl1YhUREQENDQ2MHj0aQUFBqFy5MqysrPhdJmvWrEHlypUxdOhQ0T4TKYcOHULLli3RsWNHuLi4CK4lJCRg5MiRcHFxEeXugGPHjmHWrFl4/fo1Zs6cCY7jUKlSJdy6datQ3Rk6dCiqVasGY2Nj1K1bV9RjluIsogLC3/TEiROwsLDAoUOHcPToUVhYWKBx48a8yHXhwgW0adMGlpaW8PLyEt3CVknxRdaGFStWYODAgWjSpAm2bt2KhIQEPHnyBC1atICTkxMCAwOxe/fuQtHOYqxf48ePh5mZGTQ0NGBlZYWRI0ciNTUVly9fRuvWraGpqQlnZ2eYmZnBysqKfy+Iod3L2iDtw9XV1WFvb4+xY8ciKysLZ86cgYeHB7S0tNCoUSNYWFiIzg8psnVs5cqVGDBgANzd3bFp0yakpKTg1atXqFevHho0aICAgADs3bsXjRs3RtOmTUVVx2T9mDt3Ltzc3FCnTh20atWK3wk4ZcoUKCkpoWfPnhg1ahTq168PBwcH/rtiaPOy+Pv7Q1dXFx07dkS1atVgZWWF4cOHIz8/H+fOnUPnzp2hqKgIMzMz0fePDIbYYAI3gyFStm7dCo7jcOrUqSKv37lzB+bm5qhXrx4/AHnx4gVevXol+pO7v8fy5cuhp6eH+/fvy9uUv2T9+vVo3rw5AMDHxwfm5ubYsGGDIJJ73rx5qFChAho0aCC6dB6yW/0mTZqELl26QFFRUXAQkPSeL1++4Pbt23jw4MF308fImw8fPgg+37t3D/3794e9vb0gknvs2LFwc3MTbWoCKV++fMHSpUthbGyMpk2b8uW5ubnIy8uDl5cXBg8eLPjOlStX0KdPH0EqAHlTUFCAHj168Af57d+/H2pqati5cyd/Hfh+lJG8efjwIcqUKYNx48YJIv8zMjIwf/58qKmpoVmzZrh48SI+ffqE8+fPY/jw4dDU1BTtQtCGDRtQv359tGnTBllZWYKFk7lz5/I7HZ49eyb4nlgnVh8+fBDkc37z5g2MjY3h6+sruG/hwoWwtLQUddu/ePEiFBQU0LdvX7i4uEBNTa1QiqjExET069cP7u7uhd578mTDhg0wMjLC4MGDcf/+fcTExODx48dwdnZG9erVcfHiReTl5QnqUVxcHK5du8aPYcQyZikpIipQ2I6bN29iypQp/OfXr1/DwcEBDRs2xLlz5/jy9+/ffzf1j7woSb5ICQwMhJ6eHoYNG4ZWrVqhSpUq6Ny5M54/f47nz59j2rRpqFy5Muzt7dGkSRPR1S9ZFi1aBD09PURGRuLu3buYNm0aXFxc0LlzZ6SlpSEpKQl79+7FhAkTsHDhQv5ZiEFElWXBggXQ09PDvn37cO3aNYwdOxZ169aFj48PsrOz8f79e2zduhX+/v6YPXu2aP2QEhAQAD09PQwYMACdO3dGmTJl4OPjg9evX+P169fw9/dHzZo1YWNjA3d3d9HWsUmTJkFPTw9Lly7F3LlzUadOHZQvX54/KHPjxo3o1asXGjduLOpdZ8ePH4exsTGfsqegoABLlixB3bp1MXbsWP5d9eTJE7x48aLYzukZDHnBBG4GQ4Skp6ejW7du4DiOjzT9toPOycnB7NmzUa5cOT7aThaxdeg/w9OnT9GrVy9R2V5QUFAo71tiYiKcnZ0FB3j26NED5ubmWL9+PZ8Ldfz48dizZ4/oBBWpH9euXcOpU6f4yPPg4GAoKCgUOu1eNhecGImOjoabmxsiIiIE5TExMejcuTPMzMwEB7OISRQCvi/upqamYvXq1TAxMUH37t0F9zg6OvIR3LLfF0vubVny8/PRtWtXKCkpQVlZmV9wEKtgKiUzMxMdO3YslIcyOzsbSUlJiIqKwtq1a2FnZweO46CkpARzc3M4OTmJ4hDZosjIyMCUKVNQvXp1WFlZ8eWy9WbevHkwMjLCypUr5WHiTyE9pAyQ5BI1NTVFamoq3r59CyMjI4G4LZu2R0x5qr/l3r17OHDgAIKCggBI3lPz5s2DtbU1Ro8eLbj3w4cPgsPB5M2OHTugrq6OXbt24cuXL4Wuu7q6onLlyoLI59mzZwvqnVjEoZIoogLA4sWL0alTJ9jY2KB///6Ca69fv0bt2rXRuHFj/nwHKWIaj0kpKb5cvnwZVatWFbSLXbt2oUmTJvDx8UF6ejoAyfv548ePoq1fBQUFSE9Ph6enp2BcXFBQgC1btsDe3v67/YmYfCkoKEBKSgo8PDywaNEivjw3NxehoaGws7MT7AqURUx+yHL58mVUqlRJUMciIiJgZ2eHgQMHApDMJ7OyskT9Dnv9+jUsLS2xa9cuQXnr1q1RoUIFfpdzcdh1tnnzZlSrVk0wHklNTcXkyZNhb29fZECU2N5dDIaYYQI3gyFSXr58CS8vL+jr6/M5ab/danX9+nVwHCfaSMF/gtjyhn+bduTSpUvw8fFBp06d8OXLF0H0o4+PD2xsbODs7Axvb2+oq6uLKjcq8PX3DQ8Ph66uLubOnctv8cvKykJwcDAUFRUxZcoUZGZmYtq0aXB1dRW1MHT+/Hk0a9YM7u7uOHjwoODa2bNnoaWlhQoVKhQ6sEkMyA5aQ0JCMHz4cHTt2hXh4eHIz89HVlYWVq1aBUNDQ1hbW6Njx47o0qULTExMRDlw/x55eXkYMWIEFBQUcP78eXmb81Pk5uaifv36WLFiBV929OhRjBo1CpqamrCwsECjRo2QmpqKEydOYOPGjbh165aoFlCKmhQlJCRg0aJFKF26tGAXgOy7bMuWLaJ5BwNf/ZDNuyk9zyAzMxPOzs5YvXo1KleuDF9fXz5y6+XLl2jVqhWOHj0KQLyLKm/evEGFChWgqqrKR6IDX0XumjVrwt/fX44Wfp/ExEQ0bNiwkICVmpqKixcv8s+pZcuWqFSpEhYvXoxmzZqhSpUqoqpj31LcRVTZur5kyRKoqalhyJAhqFixIipXrlzk4XKVKlXC8OHDf7epf0lJ8kUW6Tkn3y6IbtmyBXp6erh3716h74ilfhVlR5MmTTBo0KBC5d7e3mjSpMnvMOtvU1QedFdX1yIPJvT09ETr1q1/k2X/DVFRUTA2Nsb9+/cF7WjPnj1QVlbmzxWRRQx17Nu++vHjx9DT0+OFeul4JSsrC6ampvy5FLJ9ihj6e9nfUmpPZGQkatSogZiYGME9L1++BMdxOHLkyO83lMEoQTCBm8EQMa9fv0bLli2LFLnz8vKwfPly1K9fX5RRmyWBZcuWoXbt2sjLy0NeXh4yMzMxZcoUGBoawszMjL9PVnRZs2YNBg8ejJ49exY5OREDJ06cgJaWFkJCQpCRkVHo+rp168BxHGxsbKCtrc0f/ClvijpBXcr58+fRtm1bNGjQQHAo04MHD9CyZUsEBgbyQr4Y8ff3h76+Pjp16oRWrVqhVKlSGDFiBBISEpCZmYlVq1bBzMwMNWvWFBwIVNxE7u7du6NMmTL8AbliJjk5Gebm5hgwYAAePXqEOXPmwMzMDN7e3ggKCkJoaCiqVq2K8ePHy9vUIpGdWF2/fh2nTp3iD8bKysrCggULYGFhgTFjxvD3fduXiEmAjIuLg6+vL+Lj47Fnzx5wHIe7d+8iPT0dPXv2hKamJtq0aSP4ztixY2Fvby/6g2WTk5Oxbt06VK1atZAPHz9+xMKFC2FoaIiJEyfKx8AfkJiYCEtLS8EOmtWrV6NDhw7gOA76+vq8Tz179kSjRo3g4eEhuu3jJVVEvXDhAkaPHs33G2/fvoWXlxcaN26Mbdu2Ce5NTEwUVZv/luLsS1H1PCoqCuXKleN3AkjbBAAYGxtj9erVv82+v4OsLw8fPuQjzQcNGgQHBwe8ePFC0J4WL14Md3d30c1VZP2IjY1FZmYm8vPz4ePjA1dXV7x580bgx+zZs9G8eXPBcxITRdWxc+fOQVNTE1FRUQCE85Xq1at/NyJdnsj6kZiYyP9tYWEh2J2Vm5uLrKwsuLm5ibJvlPVjw4YNOHjwILKzs5GYmIgKFSqgS5cugrSPcXFxsLa2FkTbMxiMvw8TuBkMkVOUyA1ITpH29PQsMsqA8e+QDmgvX77MH+IpjRZ4/vw5ZsyYAVVVVQQGBvLf+XbgLlbhsaCgAAMHDoSPjw8ASYR6dHQ0xowZgwkTJvD5z+/evYstW7aIKp8z8PU5XLt2Ddu3b0dISAg+f/7Ml7Vt2xb169fHtm3bkJ6ejgkTJqBnz56ijkA/e/YsDA0Nce3aNb5s165d0NXV5cXTL1++YNmyZahTpw769evH3yemCfzPkJ+fj169eoHjONEsnPyIU6dOQVFREZUrV4aWlhaCg4P5XRk5OTlo1qwZevXqJWcrC/PtoV9Vq1aFlZUVypcvj969e+PRo0f48uUL5s2bBysrK9FGB8ty7tw5lClTBg0bNoSKiopAcHz48CFsbW3RuHFjLFq0COHh4Rg0aBC0tbVx+/ZtOVpdNEUt0qWkpGDTpk0oU6aMoI0Dkkl+UFAQ4uLifpeJP01iYiKMjY3Rv39/nDp1Ct7e3rC2tsbgwYNx/Phx7NmzBxUrVuR3QiQmJop2GzxQvEXUbzl8+DCsrKxQpUoVPloQkKT18fLyQqNGjfDHH38U+p4YfSrOvsgKXcuWLcPChQv5sUzr1q1RtWpVweG379+/h6WlpWgOjJZF9t01adIkODg44PDhwwCAz58/o1KlSmjSpAnu3buHtLQ0ZGRkwM3NTXT9pOwzmTx5MurWrcsfhv3mzRuUK1cOrVu3RmxsLLKyspCZmYn69esXejeLhW/r2LRp0/jP3bt3h4GBgWA8/+HDB5iZmWHPnj2/1c6/QtaPBQsWoH///rzgu2zZMjg4OGDWrFmC+52cnASpccRGQEAAypcvj6CgID5l5Y0bN/hF+c2bN+Ps2bPw8PDgg6oYDMY/hwncDEYxQFbkfvr0KQCgRYsWcHBwEOXJ3cUdWaERkAjdNWrU4POhx8fHY+rUqTAzMxMMImUn62J9HlKBu23btjh27Bh69+4NDw8PWFpaonHjxnBzcxPdQZIrV64UbG/dsWMHNDQ0YG5ujvLly8PQ0BA7duwAIBk09unTB6qqqjA3N4eurq7oUvjcvn0b+/btw8WLFwFI0l5Ur14db9++FRzCtnnzZigpKfECXUpKCpYvXw4HBwd06tRJbvbLUtT23p/5zvTp00UpbhXFq1evcOPGjUKpR/Lz89GxY0dMmjRJkKtfTCxbtgzly5fHhQsXAABjxoyBpqYmHzGYlJSEhQsXomzZsli+fLk8Tf0h0t923rx54DgO9erVK5T+6c6dO/Dx8YGpqSlsbW3RsmVLPmJdTEh9uXjxIhYtWoSRI0fiwoULSElJQUFBATZt2gQDA4NCQopYIp2L4uTJk9DW1ka1atVga2uLU6dO8XlEP336BDs7O0yaNEnwHTG2l+IsohbFkydP0L9/f5QuXVqQRxyQHErepk0bWFlZ4dixY3Ky8OcpCb4EBATAyMgI8+fPx+vXrwFIUkY1aNAABgYGWLx4MYKDg+Hh4QE7OzvR1isAmDp1KsqVK4dDhw4JzgN4+fIlTExMYG5uDnNzc9SpUwdWVlZ81LPY2v2UKVNQrlw5HDhwAO/evePLHz58CCMjI1hbW8PGxgZ169ZFzZo1ReuHFH9/fxgbG2PGjBm8oB0bGwsPDw+ULl0ay5cvx+rVq9GiRQvY2tqKto6NHTsWZcuWxe7du/ndl+/fv8fYsWNhbm6Oxo0bIzAwEK6urrC0tBTteHL9+vUwMDDArVu3+N9a2pfHxMTA2dkZ1apVg4WFBZo2bcrXL7E+FwajOMAEbgZDBPxMx/z69Wt4enrC0NAQTk5OMDMzYx3hL+Dy5cvgOI4/6AuQRHTVqlUL1tbW/ED+5cuXmDp1KszNzTFjxgx5mfuXFDUI379/P2xsbKCjo4OuXbvyW8vXrFmDRo0aCXLxypOCggLk5uZi27ZtMDIyQseOHZGTk4NWrVph48aN+PTpE7Kzs+Hj44MKFSpg9+7dAIB3797h4sWL2L59u+gi0Ldt2wY7Ozu0bt2aj84+ceIEFBUVeUFFuhvg8+fPqFy5MsLCwvjvp6amYv78+ahfvz6/4CIPvhXbjh49+o8mGGLd6vtXZGdnY9KkSahQoQK/y0OMdOvWDbNnzwYA7N27F9ra2lizZg0AyYGTBQUF+PjxI7Zt2ybqfkRa36SRadWqVUP37t0RHR0tuC8rKwtpaWn4/PlzkemXxEJYWBg0NDTQuHFj1KpVC1paWhg1ahSePn3Ki9zGxsaiWcj6GRITE/Hs2bNC5Z8+fUL9+vWxdu1aOVj19yjOIuq372Tp+zg+Ph6+vr5wcHDAsmXLBPc8ffoUAQEBomv7JckXKXv27IGBgUGhAApA8t4aNGgQHB0dYW9vjw4dOoh6fP/q1SvY2tpi586dgnLpc8rIyMCWLVswd+5crFq1ii8Xmwj57NkzWFlZCcZYwFc7P336hHXr1mHq1KkICgoSrR9SwsLCYGBggKtXrxa69u7dO/j5+cHS0hJ16tSBt7e3aOvYmTNnUK1aNX5hHvg6l/nw4QMOHDgAT09PeHt7Y9CgQfzzEJsfADB69Gj06dMHAAoJ3ICkrbx7947v+wHx1i8Go7jABG4GQ44cP378b3Vo8fHxaN68OWxsbPiBCesI/1syMzMxd+5cKCkp8RGN+fn5iIqKgqurKywsLAQi94wZM2BgYIB58+bJ0+wikdatU6dOYfr06Wjfvj327duHlJQUfPnyhY9ulN7n7+8Pd3d3pKamys1mWaQRTmlpaQgLC0OVKlXQsGFDNG/evFD0Zo8ePWBsbMznghQjmzdvhpqaGnbs2MGnVQEkg942bdrA1tZWkIIgISEBpqam/MGZ0ueUmpoqipQr0nfPzp07YWlp+VPf+XZgXxzZunUrRowYAQMDg0ICqzz5djErMzMTjRo1wqlTp3D58mVoamoiODgYgGRhISgoqJBQJ7YJ4vei5E6cOIEqVaqgW7dughQk0l0RYubp06eoWrUqQkND+fawbt062NraYsyYMcjMzERKSgrWrl0LMzMzuS5k/VsSExPh6ekJJycn0dWtkiSiyvqydu1ajBo1Cp6enjhw4ABycnLw/v17DBw4EE5OToV8kiIWn0qSL7LMnz+fP6Dwe4Lcp0+f+J0csveJjZiYGOjq6vJjyG/79aJybYvxmdy6dQt6enr8Qbiy/U1GRkaRv78Y/ZAyZ84cvo5Jn8m3PkjPdRFzHdu2bRtMTU0F+bf/KmJejH7k5+ejYcOGaNeunaAMkIzBbt68KciJLnudwWD8c5jAzWDIiaSkJFSpUgVmZmZ/a6Dx9u3b7w5cGP+cxYsX8weRZWZmYsGCBYJI7oKCAly8eLGQyP3s2TPMmzePTx0jNsLDw6GlpYVBgwahe/fusLGxgaenpyDdwq1btxAYGIjSpUvjzp07crT2K/v37wfHcTh//jwAici9e/du2NnZQU1NDfHx8Xw5IIl2Llu2rOjyCUq5d+8eatasiXXr1gnKpW3/7NmzaNGiBapWrYrt27djx44daNmyJezt7UV1Kryvry8aNGggKAsLC0Pjxo0B/DgiW9b2TZs2ITAwUDS7BX6WR48e8ROWBw8eyNscHtlJkTSPPgCMHDkS+vr6UFVVxdatW/nypKQkNGzYEEuWLPmtdv4dZM9CCAkJwcyZM/mDwACJyF21alX06NEDBw8exPTp08FxHBISEuTeTmT5Nn1NTEwMKlWqVCjKbu3atdDU1MTNmzcBSN5tX758+a22/ld8+PABc+fOhaenJxwdHUUXKVhSRdSAgABUqFABI0eOxJgxY8BxHH/42osXL+Dr6wtnZ2dBDluxUpJ8ASSRnLKHk8sKXadOnSrUF4rlHVaUHUlJSTA0NBT0H9L5yPHjx/HHH3+Ibn5SlB9v375F2bJl+YVf4Gu7PnbsGMLCwkTZzr9HYGAgbG1t+bok9TkrKwv79u0rdL9Y6pgU6W8dGhoKExMTXuCW7UPDwsJEuZD9PWF6xYoVqFGjBo4cOSIoj4uLQ7t27XD9+vXfYR6D8X8FE7gZDDlRUFCAqKgoWFlZoVatWqJeTS/pfPnyBQ4ODnwUByAZEM6fP/+7Ire1tTUfWSe2ZyatS3FxcbCwsOBPSU9JSYGamhqfGgOQRKR5eXnB0dFRVIexJSQkoGvXrihdujS/TTE1NRW7d++GoaEhmjdvLrg/Pj4eVatWxaFDh+Rh7l9y7NgxVK1aFY8fP/7upOLOnTsYPHgwdHV1YWdnB09PT1EJQ1lZWdiyZQuqVq0Kb29vvnzFihXw8PAA8P0Jk2x5cHAwVFRUEBkZ+WsN/kUkJCSISniU/W2nTp0KV1dXPk/w/fv30bx5c5iamuLLly/Iz89HYmIiPDw8ULduXVHUq6KQ+hQeHg4dHR20aNEC1apVg7OzM1auXMkvbJ06dQp2dnawsbFBlSpVRH1w6d69e3H8+HFcvXoVurq6uHLlCgDhToYaNWpg5syZ8jLxP+PWrVvw8vLCyJEjRb2tvySJqCdOnEDlypX5BZLo6GhwHIft27fz97x69QqdOnXCgAEDRCduyVKcffme0BUWFoYaNWpg48aNgjb/6dMnNGjQQJSL87K+pKWl8ZHZGRkZ6Nu3L9zc3PjUcIBknCLGg5e/jTCXvotSU1PRvXt3NG7cGPv37+fvycvLQ9OmTdG3b9/fbuvP8L06tnHjRlSsWBHh4eGCOvblyxe4uLgI2o8Y+J4fcXFxUFVVxejRowXlaWlpaN26NZYuXfobrPt5ZP24dOkSjh49yu+yjImJQYMGDdC2bVs+HeSzZ8/QunVrODs7i3YMxmAUZ5jAzWDIkfz8fFy6dAnm5uZ/KXLLDuBv374tihQFJQnpb37x4kU+NUZmZmaRIrd0YUK67VoMk6vw8HCcOHFCUHb//n1YWVkhMzMTsbGxqFixIgYMGMBflwos9+/fF802eNnf8sOHD+jRowfU1dV5kTs9PZ3PZdmsWTM8evQIMTExmDx5MsqWLcsfRiM25syZg7Jly/KfZf2UDo4fPHiAe/fuIT09HV++fBHVotfDhw8BCNPFSLddBgUF8QJ3UcgO4IODg6GtrV0o5yXj7/Pte2fSpEnQ09PDiRMn8OrVK/6e8PBwODs7Q1tbGw4ODnBwcEDt2rVFtXgiRTZS68KFCyhfvjzWr18PQCI4KioqwtbWFosWLeLTEcXFxeHOnTuieYfJIvXl7t274DgOoaGhAIBWrVqhevXqvFAPSIQXR0dH3t/izufPn3n/xVTHpBRnETUoKKhQX7d3717+Pbxjxw5oampi9erVAIDk5GT+jId3797xfY4YfCpJvsgKXfv378fWrVv5cVlWVhZat26NunXrYuHChXj16hVu3bqFli1bok6dOqJsI1JmzpzJH2wvFYIfPXqEVq1awc7ODr1798aUKVPg6uoKKysrUYxZpMjWi9mzZ6N169ZwcXHByZMnAUjmUx4eHrC3t8eQIUMwe/Zs1K9fX3R+SJGtY3v37sWOHTsE4rx0MTgkJAQPHjxATEwMWrRoIbo6Jvtc1q1bBz8/PyxZsoQfa27evBkqKiro3bs3IiMjcezYMTRr1gzW1taifC6AZMG0TJkyMDAwgK6uLnbs2AFAInq3b98e+vr6qFChAiwsLARjMJaWhMH4b2ECN4PxG7l69SoOHz4MAIKopqtXr8LExAR2dnZFilqyA4EVK1bA2toajx8//o2WlzykA4r8/Hz+76ysLJiYmMDCwoJPgVFUJHd+fj6uXLkiGjH1+fPnMDc3R9u2bXHu3Dm+PCoqCnZ2doiNjUWVKlXQv39/3tdr165h4MCBokmz8O0AT1rnExISvityV6hQAaqqqvD29kaHDh1EHb25e/duqKmp/fBwssDAQAwYMEAwCRHDwHfZsmXgOI7fFpqWloY9e/agcuXK6NmzJ0JDQ+Ht7Y3169djz549OHnyJA4ePIiVK1ciKSmJ/3eYuP3riI2NhZ2dnWCiK21DBQUFSEhIwJo1a7Bs2TLs2rWLr2NimSguXryY30ItPVx2xYoVGDFiBACJiF2tWjX07t0bnTt3hqGhIZYtWyYQiMXKtWvXEBERIYjMvn//PurUqYMqVarg5MmTOHnyJL9AIdZ0V/8UMQiPJUlEffz4MTiOQ48ePfjFeECS9sna2hp79+5F6dKleV8AyTkJ3bp1Q0JCAl8mhr6lJPkiWzfGjh0LTU1NWFlZgeM4+Pv7A5AsYvXr1w82NjbgOA42NjZwdnYW3WKj7O+5ZMkS6OnpYdq0aWjXrh1UVFQwd+5cFBQU4OXLlwgKCoKjoyM8PT3h6+srqh0bsn4sWrQIurq6mDBhApo2bQp1dXU+/VBsbCzmzp0LKysrNG/eHH379hWVH1Jk65i/vz9Kly4NCwsLKCkpYejQofy1Hj168HXMzs5OdHVM9rmMGzcOZcuWRYMGDWBjYwN7e3t+0fH48eMwMTFB5cqVYWVlhRYtWojKD9nncebMGdja2uLMmTN48+YNBg4cCD09PX4H7YcPHxAdHY01a9bg8OHDohuDMRglCSZwMxi/idOnT4PjOHAch7p166J3796IiIjAy5cvAUgmwbVr14aNjY1A5P52a7+2tjZ27dolFx9KCtLB1ePHjzFs2DC0a9cOCxcuBCA5OLJmzZpwdHTkJ1xSkVtZWRlz586Vm90/4vjx43B1dYW3tzfOnj3Ll9euXRscx2HIkCGC+wMDA+Hs7CyYJMqbhw8fYsKECXjx4oVg8JqQkIDu3bsLRG5pJHHFihXRrl070edyjouLg7a2Nry9vfk2D3wdICcnJ8Pb25s/2FRMvH//Hr169YKWlpbg99+zZw9MTU35SZSbmxuqVasGS0tLmJmZoUmTJvxz3LBhA1RUVBAeHi5PV0oEXbp0KZSK5+bNmyhdujQuX75c6P7v5UUXwwQRkORz7dy5MzQ0NPg8lQUFBXjy5AkePnyI9PR0uLm58dvFP336hLJly8LU1FSU7UWWjx8/wtbWFhzHYfDgwXx5QUEBHj9+jPbt28PAwADVq1eHtbW1qA4tLSmURBH1ypUrUFNTQ/fu3XnhPjExEW5ubuA4jh/PABJRtVWrVujZs6coBHopJckXWWJjY+Hk5ISbN28iMTERe/fuhZKSEnx9fQFI3rsfPnzAkSNHcOvWLVGfqRMbGws/Pz8cP36cL5szZw5Kly6NOXPmCBYYZZ+H2HyJi4vDiBEjcOrUKb5s/Pjx0NHRQVBQEJ96RTbgBRCfH1Levn0LJycn3LlzB69evUJ4eDg0NDTQu3dv/p6nT5/i+PHjuHHjhmjr2JMnT+Dr68v3e+fPn0e7du1gamqKa9euAZCMD54/f47nz5+LalejLKtXr8bUqVP59FZShg4dCj09Paxbtw7JycmFvieWMRiDUdJgAjeD8Zt4+vQp6tWrh9q1a8PDwwMjRoyAjo4OqlevjjZt2iAoKAibNm1C5cqV0aRJk0KD9+DgYJQuXZoJRP8S6UDv9u3b0NfXR9u2bdGlSxcoKipiwYIFAIDXr1/DzMwMDg4OApF76tSp0NXVxadPn0QzuZK148SJE6hXrx68vb35gfyNGzdgbW2NunXrIjo6GkeOHIGfnx9Kly6Nu3fvysvsQuTk5MDR0REcx8HU1BT+/v6ChZy0tDR06dJFIHKnpKRg3759ePLkibzM/lvs2LEDKioq6Natm0DIevPmDVq0aAEXFxdRDdz/Kl2MNCe6vb09GjVqxN+bmpqK/Px8/vufPn3CoEGDBNHFjH/GkydPMHPmzEKi9a1bt1C1alXBQVLS3z8iIkJwiJZYkBUS4uPjMXToUOjo6PC52aWTv5s3b8LS0pLfoXHv3j20aNEC/fv3x4sXL36/4X+D7Oxs7N+/H/Xq1YO5uTnvk2zbun//Pl6+fCk4+Jfx31DSRFTZ/uH8+fNQVFTEsGHD+EXT9evXo1atWmjVqhUuX76MsLAweHh4CLb1i8WnkuSLlDlz5qBnz57o06ePQLw6ePAglJSUMGTIkCKFLjEsnshSUFCAI0eOgOM4GBgY4OjRo4Lrc+bMgba2NubPn18oNZTYnsm+ffvAcRwqVqyIM2fOCK5NmDABZcqUwfLlywsFe4jNDylz5sxB+/bt0adPH16YByR1TENDA/369Svye2KrY7t27UKVKlXg5OTEHyYJSN7V7dq1Q40aNQodxAyIzw8AaNy4MTiOQ9u2bQsF2wwbNgzly5fHsmXL+LRqDAbj18IEbgbjNxIbG4t27drB09OTz6N98uRJtGnTBm5ublBVVUXFihXBcRxGjhzJf2/NmjVsa/9/gHRgdOfOHaipqWHChAl8+bBhwzBy5Eh+APLq1SvUqlUL9vb2gnQlHz9+lI/xP0B2InXs2DHUq1cP7du351NKXLx4EY6OjjA0NIS5uTnc3NxEdaCklAULFmDJkiU4fvw4pk6dijJlyqB79+5Ys2YNCgoK8OXLF/Tv3x9aWlq8gC/WSUhR5OXlYd26dVBSUoKxsTE8PDzQrFkzODk5wdHRUVRbL4HCE4mi0sWkpKRg9+7dqFixIjp27Fjo35D6UhxSSRQXpPVk9erVfE5nAHBzc4OVlRWfwxKQvLNatWoliB4WA9K69erVK+zZswe7d+/Gzp07+ag62QNIz549i2rVqmHHjh1IT0/HtGnT0KVLF6SmpsrL/O8i9SsvL4+f6GZlZeHYsWMwMTGBi4sL3ybEvuukJFCSRFTZ9/GkSZMwZcoUlC9fno9O//DhA/Lz87Fx40Y0btwYampqqFOnDtq3by/qvqW4+yJLUFAQv6NJehCxtP4cOnQIqqqq6NGjhyjfXUURGBgIjuMwb968QuLcvHnzwHEctm7dKifrfp7BgweD4zgsW7YMmZmZgmuTJk0Cx3GCwzLFSl5eHpYtWwZ1dXXY29sXun7o0CFoa2sXORYTG7t27UKTJk2gra2NZ8+eCa5dvXoVHTt2ROnSpfHo0SM5WVg03+sPpGPjffv2FQpA6N69Ozw9PUXTlzAYJR0mcDMYv5nHjx+jefPmaNq0KS5dusSX5+Xl4cCBAwgKCkLnzp35DjIyMhJ6enqiPGG9OPLq1SuULVu20ACwc+fOsLW1hZmZGZo3b46dO3fyIreJiQnevHkjJ4u/z7fb9aSfDx8+jLp166Jdu3aIiori77916xbevXuHz58//3Zbf4YzZ86gdOnSuH79OgDJNsxp06ZBVVUV9erVQ0hICC5cuIBevXrByMgIGRkZxXLAeOvWLQwfPhzNmjVDv379sHLlStHl49uxYwf69OmDx48fCybjiYmJ6NatW5HpYmQXjRj/LUOGDEGdOnX4z2/fvkX37t1RvXp1bN68GYDkUD9ra2uYmJhg3LhxmDt3Lho2bIiaNWuKpl4BwoXGatWqwdzcHMrKyrC2tsasWbMwduxY6Ojo8OdVfPnyBc2bN0e1atVgamoKPT09PkenGLhz547g86FDh9C9e3e0atUKERERACQ+Hzt2DDVr1oSbm5tACGf8GkqqiLpgwQKUKVMGZ86cwblz57B161YoKyuja9eugl0Ajx49QkpKimi39QPF25fvRZKuX78epUqVwqxZswTnIABAWFiYoP2LBVl7CgoKBJ+HDh0KZWVlbNmyBRkZGYLvbd26VRTPQsq3v6vs5169ekFDQwN79uwRRD4DwNq1a0Xlh5Si6klmZibWr18PRUVFTJkypdD18PBwNGnSRFR17Hu2HD9+HI6Ojqhbt26hnZjnz5/HhAkTRPUOlvXj/v37uHfvHm7dusWXtW7dGmXLlsXBgwcLidxiOseBwSjpMIGbwZADsbGxaN68OZo3by44FLAoHj58iPPnz/8my0o+z58/h6OjI1q3bs1HOM+dOxfq6uqYOXMmQkNDYW5uDhMTEzx8+BAvXryAo6NjoQgDeSMdJJ04cQK9e/dGly5dMGrUKF6MPH78OOrWrYv27dsX2pYpZvz9/dG9e3c+yqZz584wNzdHr1690LBhQygpKWH8+PGCXKolBbEM5JOTk1G9enXo6+vD2toa/fr1w8aNG/nr6enphdLFpKam4syZM6LxoSSRm5uLHTt2wNTUFK1ateLLo6OjMWTIEJibm/Mid0FBAQYMGAB3d3fUr18f/fv3F5VYJytuq6urIzAwEG/evEFkZCTc3d1Rp04dHD16FP379xdEcn/69AlbtmzB+vXrRXUI4/nz58FxHB9Jf+LECWhoaKBr167w9PREqVKlMHPmTOTm5vIit62tLWxsbEQlQJRkirOICkgEqxMnTvCf27Vrh+HDhwvuOX36NJSVldG3b1/ExcUV+jfEUtdKii+yNly9ehWHDh3C5cuXkZKSAgBYvnw5SpUqhXnz5hUSuYv6N+SJrB3BwcHw8fFB9+7dMW3aNL586NChUFVVxZYtWwpFQAPiaCuyfqxbtw79+/dH3759MX/+fL5cepbInj17itxBIwY/pMj6c+PGDRw8eBD37t3jA1RWrVoFBQUFTJ8+/af+DXkha8O+ffsQGhqKZcuW4f379wAkfaa7uztcXV2/27eLYewi234nTpyIWrVqoWLFinBwcMCgQYP4a+3atYO+vj4OHTr0XZGbwWD8WpjAzWDIidjYWHh4eMDDw4MXWr+FrfT+GqS/fevWrdG/f3+UK1cOx44d46+/fPkSHMdhzZo1AMQ16JVl3759UFFRga+vLzp27AgrKytUrFgR9+7dAyCJ5K5fvz6aNm0qiOQWM3v27EG9evWQn5+Pfv36wcDAgPfn4cOHWLFiBf+5OCPmtp2Xl4fx48cjODgYN2/exMKFC6Gjo4OuXbti7ty5yMnJwYcPHzB48GBoamri5MmThb7P+G+R5nKuXr06WrRowZffunULvr6+MDMzEyxCZGZmCqLtxPQO+94umuDgYGhpaeHp06d4/fo1BgwYAB0dHRw8eFBOlv4ckyZNgoqKCrZt24bly5djxYoV/LV169aB4zhMmzaNF7kjIyNRt25d0ecPL66UFBEVkKSnU1ZW5g+OzsnJgZubGwYMGABAYqdURPH39wfHcejQoYOoDo+WUpJ8kTJ27FhYWFigSpUqaNSoEerUqcMvmqxZswYKCgpYsGCBqPt7KYGBgShfvjwmTpyI2bNnQ0FBAd26deOvDx8+HBoaGlizZo2o0ysFBATA0NAQ/v7+mDJlCjiO4+sYAPj4+EBHRwdbtmz57gHM8ka2vowdOxZmZmaoUqUKXFxc4O7uzr+zgoODoaioiJkzZ8rL1J8mICAAFSpUQJs2bWBqagp7e3s+LcyBAwfQrFkzNGjQQHQpSb5lzpw50NXVxYULF5CQkICRI0eC4zhcuXKFv6ddu3bgOE6wS5vBYPw+mMDNYMiR2NhYeHp6onbt2oW2OTN+LY8fP0bTpk2hpqaGRYsWAZAMKnNychAfHw8bGxtRp4X59OkTHBwcMGvWLL7s/fv3aNmyJSpWrMjnSzx06BCaNWtWrCKe3dzcUKpUKVSoUEGUucL/Hzh8+DC0tLT491JmZiYmT54MjuPg4OCA+fPn48SJE+jYsSOaNGkiZ2tLLrKLBZmZmYiIiPiuyG1hYVFkPlSxiSuyu2ikOwAAya4TPT09xMTEAJAczDxo0CBwHCcQLMWC7O86depUKCgooHr16li/fr3gPqnIPWPGDF7kZjnpfw0lSUSVild79+4VlK9fvx6ampo4ffo0gK/1cMGCBWjVqhUaNmwoGoFeSknyRcry5cuhr6/Pi1hSMVWaWgmQnJNQHPJUX758Gaampnywzb59+6ChoYHVq1cL7uvWrRsaNmwoDxN/igsXLqB69eq8HxEREVBTU+ODVaR4eXnB3d1dHib+LVasWIFy5crx/aS/vz9UVVX5Qz9zc3MRHBwMjuOwYcMGeZr6Q7Zs2YIKFSrwh6vv2LEDHMfhwIED/D2HDx+GnZ2d6M4LkSUjIwPt2rXDzp07AUiEeW1tbaxduxYABOn8xo0bx4I9GAw5wQRuBkPOPHjwAGPGjBHtIL4k8/TpUzRr1gwtWrQQpIGZPHkyqlatilevXsnRuh/z9u1bVKpUCYcOHQLwdWL45s0bWFpaYvLkyXxZcTm5W/Ywpho1avD5a8Um0P2/MGTIEAwZMoT/bGlpibZt28LPzw8eHh7gOA6LFy9m767fgDRFUkZGxndF7iFDhqBMmTKC3ShiRbqLplmzZnjw4AFSU1Ohr6+PwMBAwX2PHz/GyJEjRRPVJa3rshHx0q3WixYtAsdx/LtX9r21YcMG/rA2xq+hJImoISEhUFZW5vtAKevWrcPZs2fh4+MDMzMzfuEnJSUFnp6eCA8P5+8Vi08lyRcpubm56N27N5YuXQpAInRpampi3bp1ACTnUkh30Ozdu1dUO2iKYu/evbCzswMgEYU1NTURHBwMQPI8ZJ+dmHMJ79q1iz+rYu/evdDU1OTFx5SUFMFuILHVKVkKCgqQm5uL7t278ylWIiMjoampiZCQEACSsYA0JU5ERISo69j06dPRt29fABJxW1tbm188SU1NRWJiIgDg4sWLon4uqampqFatGo4cOYJjx45BU1OTXzzJycnBvHnz+MUHKWJ+LgxGSYUJ3AyGiBBzx15SkQotzZs3R3R0NObPnw9VVVU+0kDM1KpVSyBAFhQUIC8vD02bNhV1FMRf8f79e5iYmGDSpEnyNuX/mtDQULi4uODTp0+oVasWXFxckJycDAB4/fo1du3axQ/e2bvrv0X29zxz5gw4juMX4b4ncl+7dg0LFiwoNlFDsbGxaNGiBRo0aIAyZcpg1KhR/DVZH8S2jfzly5cYMWIEAEk6DDMzM/4Q4hkzZkBBQaHIaLotW7bg/v37v9XW/xdKkogqbe/f5tb19PRE3bp1kZqaips3b6J///5QUFCAtbU1qlWrBktLy0IHTsubkuTLt7Rt2xYbNmzAwYMHBUJXXl4e1q5diy1btgjqlJiFrqtXr8LLywtr1qwRiNuA5Bn26NEDjx8/5svE0la+5dy5c2jVqhVCQkIK+XHy5En4+PgI8jyL1Q8pHTp0QEREBI4cOSKoY7m5uQgNDcWePXsE7UNsdUxqW79+/TB+/HhER0dDU1OTF7cLCgqwcuVKBAUFCb4n5ucycOBAdOzYEaVLlxbUr1evXsHLywtbtmyRo3UMBgNgAjeDwWAgNjYWXl5eKFeuHJSUlHDjxg15myRAOtjLzMzkD/gpKCjArFmz4OTkxEeoSOnQoQO/K0Csk8O/YuvWrdDQ0MDVq1flbcr/NY6OjuA4Dg0aNEBSUlKR94htUlXckZ3crV27FrNnzwbHcdDV1eWjUKUit6mpKTw9PQv9G8VJ5G7cuDEqV64sOHBZzO+tVatWoVatWmjWrBmUlJQKTWil6UrEvGW8JFHSRNTY2FjUr18frVu3xvXr1wEA3t7esLGxEeQLz8rKwqlTpxAUFIRVq1bxvojpfVySfJGloKAAw4YNg42NDXR0dASpPN6/f4/mzZsXEu3EzJMnT2BpaVlol0lGRgZatGiB7t27i6qNfI/79+/DzMwMHMdhwYIFfLnUj169ehULP6T06dMHlSpVgra2Nr87AJDUsSZNmhSbOnbkyBGoq6uD4zhs376dL09PT0fz5s3h5+cnR+v+Hjt37oSysjK8vLz4yPMPHz6gZcuWqF+/frEZezEYJRkmcDMYDAaAR48eoXXr1qI5wPDSpUv49OkT/3n//v1o06YNnJ2dsWHDBuTk5ODTp0/w8fFB7dq10bt3b2zduhWDBg2ClpYWHj58KEfr/z3x8fFo2LBhscodXpKQTgK3bt0KKysrftGnOE0Oizvjxo2DoaEh1q9fj1mzZsHd3R2qqqr8oZ4ZGRnYv38/tLS0itUE8VuePHnC76L53oHLYkOaG7xhw4b8gWuyE9upU6dCTU2tUA5bxn9PSRRRpTvLPD094erqilq1auH58+cAvtaz/Pz8QmdUiFFcKUm+yJKYmIgaNWrA1NQUcXFxSElJwdu3b9GiRQvUrVtXlPXqR5w8eRLKysrw8fHBunXrEBERgSZNmsDa2lqUC0HfY//+/VBQUICvry+2bt2KgwcPwt3dHTY2NsXGD6l9qampqFevHqpVq4akpCR8/vwZCQkJaNGiBerVqyf6NiLl8+fP/OGf27ZtQ3JyMmJiYuDh4YFatWoVu7ayZs0aaGtro379+nBzc4OLiwtq1arF7zYrLs+FwSipcABADAaDwaDc3FxSUlKSqw0A6ObNm1SnTh2aOXMmBQYG0tWrV6lFixbUvXt3Sk9Pp+3bt9OwYcNo1qxZlJeXRxs3bqTdu3dTRkYG6evr05IlS8jW1laufvwXZGVlkaqqqrzN+L/mzZs35OjoSCNGjKBx48bJ25z/G+Lj48nd3Z2mTp1KXbt2JSKi169f08SJEyksLIyOHDlCDRo0oPT0dIqOjiZnZ2dSUFCQs9X/nCdPntCYMWPo48ePtHTpUqpbt668TSqSnJwcUlBQoJkzZ9LLly/p2bNnZGJiQnPnzqVy5cpRXl4eKSoqEhHRuHHjKDQ0lOLi4khbW1vOlpdsnjx5QiNGjCAFBQVKTk6m9PR02rt3L1WpUoXy8/NJQUGBCgoKKCYmRtA3Sq+JkSdPntCQIUPo+vXrtG7dOurYsSMVFBRQqVKliIjIw8ODkpOT6dKlS0RExHGcPM39ISXJF6Kv9ebBgwfUrFkz0tbWprS0NDI2NqacnBy6dOkSKSkpibp+yQKAOI6jgwcP0sqVK+n27dtUo0YNMjQ0pG3bthULX6Q+EBHt2rWLQkJC6Pbt22RpaUkGBga0Y8eOYuGHFGn7uHbtGnXt2pXy8/NJWVmZypYtS7m5ucWujt27d482bNhAq1evJl1dXdLX1yc9PT06duxYsfFDto6dOHGC7t+/T69fv6aaNWtSr169SFFRUTAGYDAY8oEJ3AwGgyESZAdPK1asoFGjRtHChQuJ4zjiOI5GjRpFRES7d++mAQMGUK9evWjatGmkp6dHRESfP38mVVVVUlNTk5cLjBLIihUraPr06XT+/HmytLSUtzklElmxh4jo0aNHZG9vT2FhYdSyZUsikrwfnj59Sp6envThwweKjIwkV1dXfmJYHCaIP+LRo0c0efJkWrx4MVWqVEne5giQfTfLsnjxYgoLCyNLS0uaN28e6evrExFRXFwcVa9enT5+/Ehly5b93eb+X1LSRFQiST0aOnQolSpVisaNG0dubm5ERNSyZUuKi4uje/fuyX1R/mcpSb4QfX0npKSk0OHDhykpKYmqVKlCHh4epKCgUKyELqkUwHEcpaWlUUZGBqmqqpKWlhZxHFdsfJF9T6ekpFBaWhqpq6uTtrZ2sfLjW3Jzc2nz5s2Um5tL5cuXp9atWxe7OkZElJeXR3FxcfTs2TMqV64c1apVi0qVKiUKP77Xx/+d+4r7GIzBKCkwgZvBYDBEgHQi/v79e4qPj6fKlSvT8ePHqWfPnmRkZET+/v40cuRI/v5du3bRgAEDqH///jR06FCqXr26HK1nlGTi4uJoxowZtHHjRoEIy/jv2b59O3Xr1o2IiFq0aEE6Ojq0atUq0tXVJSLJ5Kpjx4704MEDevnyJV29epWsrKzkafJ/Sk5ODikrK8vbDAHSCe3Fixfp+PHjlJ+fTxYWFtSjRw8iIlq2bBnt3r2bzMzMaNq0abR+/Xrau3cvXbp0ibS0tORs/f8XJU1EJfoanV6qVCmaMGECLVmyhO7du8f7IgZx6GcpDr5Ix2LSdv9PBC2xCF2ytv/THYrfLr7Kg//CBjH4IUXWlr8SVr9ntxjq2N/9TYu6XwzPRdaGT58+8eOtv+JnRXEGg/F7EcebnsFgMP6PkQ6uHjx4QB06dKAJEyaQr68vde/endauXUtv3ryhmJgY+vz5M/+dzp0704YNGygoKIjWr19PeXl5cvSAUZKpXr06bdq0iUqVKkX5+fnyNqfEEhcXR4GBgbRp0yYikgjcL168oKVLl1JGRgYREWVmZlJBQQHNmzePXFxcaOnSpZSTk0MlJVZBbOI2kSSqce/eveTh4UFXr16lixcvko+PD/Xs2ZOSk5Np5MiR1KVLF7p//z45OzvT+vXrKTQ0lInbcqB69eq0YsUKAkDz58+nqKgo8vb2Fojbxa2vNDU1peXLlxPHcdSoUSO6f/++qAThv0Nx8EUqdMXGxhIR8SJ3UUgFxoKCgiLL5Y1UfJsxYwZt3779p77zra9iEh937dpF0dHRP9WGxeaHLFJbNmzYQJcvXyaiwnXo23ul16V+ybuOyT6XS5cu0Zs3b/7yO9KFI6LCz0deyPoxa9YsGjp0KD158uQv7ZMVt5OTk3+5nQwG4+cRz9uewWAw/g8BQKVKlaL79++Ti4sLNWjQgEJDQ2nXrl1ERDRgwABauXIlbdiwgdauXSsYSHXo0IHCw8PJx8dHFBNDRslFOpCX96SqJGNgYEBWVlZ07tw5IiIaMWIENW7cmI4dO0b169enUaNGUYMGDej169fUunVr0tfXp8TERFJWVmZRRL+QFy9ekJ+fHy1YsICOHTtG586do3PnztHBgwdpxIgRREQ0fPhwWrduHYWEhFBUVBQ5OTnJ2er/X4qDiPp3MTU1pUWLFtGgQYOYL78IWYHx7Nmz1LBhQzp69CgR/Vjklo7hiIiSkpJEI9zJcvnyZbp37x4R0Q8XqWVFu9OnT9Pdu3d/i30/skf6244fP55Gjx5N165do8zMzL/8ntSPc+fO0YMHD365rX8HAJSfn09Tp06lzZs3E9GPBXjZ3yE9Pf232PgjZEXhCRMm0KhRo+j48eOUmZn5w/ov+1yk9VHeCw/S//7YsWNp9erV1KxZM9LQ0PjhmErWj7Vr19Ls2bMpLS3tt9jLYDB+gl9wcCWDwWAw/gZJSUlwdXXFiBEjBOWyJ4svW7YMHMdhzpw5SE5O/t0mMhiM/5D8/Pwiy8+dOwdNTU1ERkbyZZGRkRg2bBhatmwJX19fZGVlAQC6deuGoUOHIjc3FwUFBb/F7v8XZH/P2NhYVK1aFXfu3AHw9dmdPXsWioqKCA8Pl4uNjB/z8OFDDB8+nO9HZfvT4g7z5b9F9n28c+dODBkyBCoqKqhRowYOHTrEX/v2PSv7OSgoCK1atcKXL19+vcE/oKi+pU+fPvDw8Pjh92R9WbVqFVRUVHD9+vX/3L5/wty5c1GuXDncuHGD7/++x7d+qKur4+bNm7/axL+F9Bnt2LEDNjY2P7RP1p8lS5agYcOGyMjI+OU2/gyTJk1C2bJlcfr0aaSkpAiu/aitrFmzBmXLlsXTp09/i51/xeHDh2FoaIhr167xZV++fMGDBw/w4cMHwb2yfqxduxbKysoICwv7bbYyGIy/hkVwMxgMhpx5//49vXv3jry9vQVRRIqKilRQUEAAaMSIEbRs2TKaPHkyLViwgFJSUuRoMYPB+KdAJhrrwoUL9PHjR/6atbU1NW/enM6fP8+XeXl50YoVKygyMpKCg4MpPz+fxo4dS0ePHqVhw4aRoqIii+D+j+E4jnbv3k3r168nLS0tio+Pp6dPn/LXCwoKqE6dOmRtbU0vXryQn6GM72Jubk7Lly8nRUVFUUQI/5cwX/5bpO/jwMBA8vf3J1NTUxo9ejRpaWmRv78/HThwgIiEkdyQieIMCQmhKVOmUNeuXUlbW1s+TvyJ1JerV6/S9evXiYjIxcWFOI7jx5NSpOPNgoICQUTqpEmTaOvWrVS7du3fbH1hMjMz6fLlyzRx4kRycHCgxMREOnbsGLVv357mzJlD0dHR/L34JrJ20qRJtGnTJrK3t5eX+URUOGpe+oxsbGwoLy+Prl69SkSF05R868/MmTNpwIABcjtIXrbuPHnyhMLDw2n37t3UqFEjysnJodu3b9PcuXPp9OnT320ra9eupXHjxlFwcLDczg769ndOSkqiqlWrkqOjI92+fZtmzJhBtWvXJnd3dwoICODTr3zrR0BAAO3YsYO8vb1/uw8MBuMHyElYZzAYDMaf/PHHH1BUVOQjA4qKwElPT8f79+8RGhoKHR0dfPz48XebyWAw/iWybfv06dPgOA7NmjXD8OHD+Z0Z27dvh5aWFt6+fVvoOy9evICvry9q1qyJ6Ojo32t8CUc2MismJgba2toICgpCQUEB+vfvjzp16uDcuXOC7zg7O2Pp0qW/2VIGg/Ff8+DBA5iYmAgitqOiotC1a1eYmZnh6NGjfHleXh7/d3BwMEqXLi2qnRxHjhyBjo4O1NTU4ODgAH19faioqCAkJAQRERH49OkTsrKykJ6eLvie1BexRKQWFBQgNTUVZmZm6N27N8LCwtC2bVu4ubmhcePGsLS0hJ+fH/Lz8wU7AcTix6FDhwRj9R07dmDLli0AvvY3M2fOhJGREeLj4wXfle2PxFDHZO2Jjo5GQkICzM3NERoaihs3bqBfv36wtLSEtbU1OI7D4cOHAQjHL2J5LlJSU1MBSHZjcRyH9u3bw8DAAL169cKGDRuwfv166OvrFxprBQcHQ1tbWzR+MBgMIUzgZjAYDDkTFRUFVVXVHw6WgoKC0LRpUwCSlCYMBqN4kZaWxv89bNgw+Pv7IyoqCkFBQbCysoKpqSmGDx+OS5cuwcPDA2PHjhUIKVLu3LlTaDLM+GcUtZgYExODKVOmIDAwkC87d+4c2rVrh1q1amHbtm04e/YsAgICoKurK5pt1gwG4+f5NoXC48ePoaWlhf379wvKz507B0NDQ1SvXl0gfgNASEiIKAS7ot5jr1+/xv3797Fv3z5MmTIFHMfBwcEBlStXRqVKlaChoYFFixbx969Zs0buot23fkhF6yNHjsDY2Bj6+vqYNGkSv9A4ZswYeHt7C74jFvExNDQUampqWLFiBZKSkvD+/Xu0atUKqqqqaNu2LYKCgpCdnY2XL1+iUaNG2Lp1K4DCv4EY6phsW5kwYQKcnJxw5coV9O7dG1ZWVlBSUsKwYcOwf/9+ZGdno1GjRpg6darg31i9ejXKlCkj9+ciZdu2bahevTpevXoFANi/fz8GDRqE7du34/379wAkaUrs7e1x4cIF/ntr1qyR+/NgMBg/hgncDAaDIWfi4+NRrlw5tG7dGi9evODLZQeVfn5+CAgIQH5+Psu3y2AUMzZt2oSZM2cCkOR0NjMzKxQNvGzZMvTq1QsKCgrQ0tJC7dq1+XyjrM3/90iFhPj4eOzcuRN//PEHDhw4gG7dukFPTw8DBw4U3H/hwgUMHToUqqqqsLCwgLW1NYuiZzBKCPHx8ahfvz6mT59e6JyTFi1aoF69eqhbty6uXr0KQCLYcRyHvXv3ysNcHllB9OXLl7h//z7y8vIKCaVubm4ICQlBamoqrl69iu3bt/MC8q1bt6CrqysacXvNmjUYNmwYmjZtit27dyM7OxufP3/mxUjp/c2bN8fw4cMBSPrI69evi0LcljJixAhUr14dK1as4P179OgRevXqhTp16qBatWrYsGEDLCws0KZNm0Lf37BhgyjqmJTo6Gi4u7sjKioKgGQR5cqVK3ybACTPxcnJCStXruTLTpw4AWVlZezZs+e32/w9IiMj4erqCicnJz5gQDreys3NRWpqKjw8PODi4iKom+PGjRNN/WIwGEXDASI87pnBYDD+z9j7v/buMyyKs30b+Lm7LChKEzCJii2CiY8VRI0KEo2KEcGC2KIGNVawoIgPRWOsYIti74pBsCBYKWIFYo+oUQMaxVhZlCKCIOz9/+DBvGw0eZMn6i7m/H0JzMzOcU1mmV3Puee6o6IwcOBAeHh4YNq0aWjUqBEAoKCgALNnz0Z4eDji4+NhY2Oj5UqJ6O9Yu3YtRo8ejRMnTuDs2bO4du0aFAoFVqxYAblcjtLSUigUCmn7xMRE7Nu3D1u3boWfnx/8/Py0WP37Sa1WQy6X49KlS+jVqxcqVaqE9PR0NG3aFDVr1sSLFy9w5coV7N27F82bN9d47f379wEAlStXhpmZmRaqJ6I3YdGiRTh27Bj27dsHAAgICMC6deuwYMEC9OrVC8bGxsjNzcWIESPg5OSELVu2oG/fvvD19UVsbCzy8/Ph7u6utfpFuZ7A06dPR0xMDFQqFWrUqIF+/frB09MTFhYWKCkpga2tLTw8PBAYGPjafaSlpenE90s/Pz9s27YN/fv3h4GBAebPnw9fX1/MmDEDhoaGePr0KX788UeEhobi9u3b+OmnnzT6uF+7dg2ffvqpFo8AGp/p48ePx969ezFlyhT069cPlpaWKCoqQlFREb777jvcu3cPCQkJePLkCSIiIuDh4SHtJzExEc+ePYOrq6u2DkWyYsUKxMfHo7i4GDt37kTVqlU11hcWFiIjIwM+Pj54+PAhzpw5I52XCxcuoKSkBK1atdJG6dLn/e8lJCRgzpw5ePbsGWJiYlCjRg0UFBRgzZo12LNnDwoLC5GSkgKlUvnezeNA9F7Tbr5ORERCvBz1sHr1aqGnpyc++eQT4enpKcaMGSNcXV1F9erVOVKQqALaunWrUCqV0qPtU6ZMETKZTLRr105jVPbvR2jn5eWJoKAg0bNnT1FYWMgR3G9Q2Wis1NRUYWhoKKZOnSru3bsnYmJiRNeuXUXbtm1FSEiIaN++vXB1dRWpqalCiJfn6HUtY4io4iktLRURERGiSpUqYsCAAdLyMWPGiI8++kh4eHgIX19f0a5dO9G6dWshhBDdu3cXPXr00Lnr8dy5c8UHH3wgDhw4IEpKSkSnTp1E3bp1xcWLF6Xrnbe3txgxYsQrr31dexNtSUxMFHXr1hXnzp0TQrwcMSyTycQPP/wgbXPhwgXh4uIiXFxcRHFxsRDi5YhbXToOITT7tHt7e4t69eqJZcuWvTJ/zp07d0RsbKxo2LChGD58+Lsu8y/bsGGDMDY2FhYWFuLMmTPS8rLPxbVr14oePXoIR0dHjfOiS3bu3PnK0xlxcXHCyclJtG7dWmpNsnfvXuHv7y/Vr2vHQUR/jgE3EZEOOX36tHB3dxfNmzcXDg4Ows/PT6SlpWm7LCL6mzZt2iRkMpnUO18IIVQqlZg3b56QyWRizZo1f/r6AwcOiBo1akj/6KI3586dO8LCwkL07dtXY/mqVauEqampyMjIEHv27BGdOnUSbm5u4tKlS1qqlIjehNcFoEVFRSI6OlqYmJhoXAtWrFghhg8fLtq3by88PT1FYWGhEEIIV1dX4e/vr/WAu6yVghAv+wQ7OTlJkxfGx8cLIyMj6fOlLJybOHGi6NSp07sv9k/8/oZhdHS09Hm5fft2UbVqVbFy5UohhBC5ubni8uXLQoiXbb7KzqcuhY9/FrKPGzdOCrmfPHkiLS97Lx0+fFhUrlxZJz5r/ug4du7cKT744AMxfPhw8csvv2isu3HjhoiJiZHOqS6cl/J/p7/88ouoX7++6N69u8jLy5OWl5aWit27dwtLS0vRsWPHV+Y34U1tooqHATcRkY7hFyqiim3t2rVCLpeLESNGiBo1aggvLy9pXXZ2tggKChIymUwKJV5n8eLFokaNGiIzM/NdlPyvcuvWLWFvby9cXV01JpCKj48XZmZm4urVq0IIISIiIkSXLl3E559/Lq5cuaKtconoDUlISND4vaioSOzZs0eYmJiIfv36SctLSkqk72I5OTkiMDBQmJubi2vXrr3Ten8vLi5OhISESH2Pc3JyRIsWLURmZqaIj48XVatWFatWrRJCCFFQUCBWr14trl+/Lu7fv69T3y2Lioqkn2/duiWEeHm9bdSokdixY4cwMTGRwm0hhNixY4fo16+fxg1fXRq1Xb6W+Ph4sWXLFhEXFycePHggLS8LuUNDQ6WQW61Wi9LSUpGVlSWaN28ukpKS3nnt5ZU/jtjYWPHDDz+IdevWSe+d8PBwUbNmTeHt7f2Hg2904bzcu3dP+jk8PFwI8fKJunbt2gk3NzeNkDs/P1/Y2dkJExMT4enp+c5rJaI3iwE3EZGO+bPWBUSk25YsWSJkMpk4ePCgEEKI1atXCwsLC2kyLCH+X2CiUChEWFjYK/t4+vSpmDBhgvjpp5/eVdn/OmlpacLZ2Vl06dJFXL16VTx9+lRYWlqKqVOnamy3ZcsW4erqKn777TctVUpE/6vyYdtPP/0k9PT0xKRJkzS2ef78udi8ebOQyWRi7NixGusePnwoBg4cKOrWrav16/HGjRtFzZo1xZgxY8TZs2el5W3bthUODg7C2NhYrF+/XlqekZEhHB0dNSb304XwMSEhQbrpO27cOOHk5CQKCwuFSqUSX3zxhZDJZCI4OFjavqCgQPTo0UN89dVXOvmduHxNfn5+4qOPPhL29vbC0tJSfP311+Lo0aPSei8vL9GgQQMxb948jZA1NDRUyGQykZGR8S5L/0O+vr6iQYMGwt7eXtjb24sPP/xQusn7ww8/iFq1aokJEyZIN4N1SUJCgmjTpo04deqUmDhxopDJZOLRo0eiuLhYbN26VbRp00a4ublJN1keP34sBg8eLA4ePKgTfx9E9M8w4CYiIiJ6Q44dOya2b98u/Z6TkyPWrFnz2pB7+vTpQiaTiUOHDr2yH114xPd9l5aWJrp16yY6dOggzMzMxMSJE6V1ZX1EhRAaQQQRVTzr1q0T27dvF8uXLxfVq1cXU6ZM0Vh/48YNYWVlJWQymQgMDNRY9/PPP4vbt2+/y3JfsX37dmFoaCgiIyOlPsJlweqBAwfEJ598IhwcHKTt8/PzxZdffimcnJx0auR2cXGxmD59urC3txetWrUSZmZmUrsLtVotNm/eLOzt7YWzs7M4fvy4iIyMFM7OzqJJkybSZ6IuhtxCCLFw4UJRq1YtkZKSIoQQYvbs2cLAwED07NlTHD58WNpu0KBBwt3dXeM4Tp8+Lc33oG1r164VlpaW4vz580KIl4G2TCYTe/fulbYJCwsTCoVCLFmyREtV/rFHjx4JW1tbUbt2bWFiYiIuXrworXvx4oXYunWraNWqlWjcuLH4/vvvhYODg/jiiy+kcJshN1HFxulgiYiIiN6QDh06AACEEJDJZDAxMUH//v0BAAEBAQCAZcuWwcTEBBMnToSVlRW++OKLV/ajp8evaG+btbU1li5ditGjR8PY2Bi9evWS1unp6Unn0MjISItVEtHfpVarIZfLAQChoaGYNWsWTpw4gerVq0MmkyEoKAgAsGDBAgBA1apV0aVLFwwePBjt27fX2FejRo3ebfG/o1KpsGbNGoSEhMDDw0Na/uzZM6SnpwMAhg4dirCwMNjb28PKygoqlQp5eXk4d+4cFAoFSktLoVAotHUIGDx4MLy8vNC6dWvMnDkTKSkpSExMxKBBg2BjYwMAkMlkGDJkCGQyGSIiItCtWzc0adIEVlZWOH/+PPT09LR+HH8kKysLly5dwsyZM/HZZ58hOjoaCxcuxMiRI3Hw4EEsWLAAMpkMHTt2xLZt26BWqyGTyaTPmFatWmml7itXrqBx48ZSHQBw8+ZNeHt7w9bWFrt27cLo0aOxevVq9OjRA7m5uTA2NsZXX30FS0vL13530aaSkhJUr14dLi4umD9/Ppo0aYK8vDzpfaOnp4cBAwagdu3aWLp0KcLDw1GrVi1ERERALpdrXDeIqGKSCSGEtosgIiIiep/l5eUhIiICgYGBGDhwIL7//nuN9SUlJQy1teTGjRvw9vaGEAJBQUFo166dtksiojfgp59+ws6dO9G4cWMMHDgQAJCTk4Pw8HD4+/ujW7ducHNzw8aNG6FUKrF//37IZDKduh6rVCo4OTlhzpw56NmzJwBg1apVOHLkCHbv3o0GDRqgcuXKWLNmDcLDwyGXy2FlZYUJEyZAT09P68dy5coVhIWFYfbs2VAqlVCr1QgMDERubi5SU1NhZ2eHefPmwdDQUON1t2/fhqWlJQwNDXXunPw+CC0sLMRPP/0EGxsb3L17Fz179sSkSZMwYcIELFu2DEFBQbCzs8PcuXPRpk2b1+7jXVu5ciW8vLyQmJiIzz//XAq5+/bti9q1a6Nr165wd3dHcHAwxowZAyEEFi1ahBcvXuC///2vtB9dvOmQkJAAQ0ND+Pr6QqlUwt/fH126dJFC/DKPHj2Sbnrp0vuLiP53vEVFRERE9JYZGxujf//+mDNnDpYtW/ZKwM1/WGlPgwYNsGzZMiiVSkyZMgWnTp3SdklE9A+dOXMGdnZ2CAkJQXFxsbTc1NQUQ4YMQVhYGM6ePYuQkBCUlpYiOjpaGlWra9fjvLw8HDhwAEeOHIG7uztWrVoFS0tLxMbGYs6cOSgoKMCpU6ekz5bJkydLI561fSyNGzfG/PnzoVQqsWbNGiQlJWHu3LkIDQ1Fp06dcPr0afj7+6OgoEB6zfXr11GzZk1UqVIFMpkMarVa68dRRgghBdNhYWEAgMqVK6NZs2awsLBAfHw8GjZsiG+++QYAIJfLYW9vjyZNmmiM1Nb2SOG+ffti+PDhcHFxQWJiohT+uri4ICkpCW5ublK4DQC5ubk4duwYnj9/rrEfbYfbarX6lZ87d+6Mdu3aYdeuXXj+/DnmzJmDw4cPS9sFBwcDAD744AOd/Zsnov8NR3ATERERvSM5OTk4fvw4XFxctP4PQ9J0/fp1BAUFYdGiRahdu7a2yyGiv+Hhw4dQqVRITU1F8+bN0bhxY+zZswd9+vTB119/jeDgYFhaWmq8pqioCNnZ2VLQpaujOBMTE9GnTx+Ym5vDyMgIixcvRrNmzWBubo7s7Gx07NgRLi4umDVrlrZL1VB+dO/9+/cxbNgw3LlzB0uXLkXnzp1RWFiI4OBgJCQkoEmTJvD398fw4cNhbGyM3bt3a7n6V5UfdZ2eno7PPvsMrVu3xoEDB6RtZsyYgYSEBKxfvx6NGjVCz5490aNHDwwfPvyVfWhL2Wjt/Px8+Pv7Y/369UhISEC7du2QkZGBESNG4P79+5g1axa6deuGO3fuYNKkSVCpVPjxxx915m+k/P/L5cuX49KlS7h16xYmTpyIFi1aoEaNGnjw4AF69+4NPT09dOvWDT/++CNOnjyJx48f8zsY0XuIATcRERGRFuhqmPJvVlxcDH19fW2XQUR/Q1RUFDZs2IALFy6goKAAz58/h7OzM1asWIEzZ87A3d0ds2bNgpeXF0xMTAC82lpBF4LHP6NSqZCfn4969eppLM/OzkbPnj0xaNAgjBw5UkvVvar8/8/c3FyYmJjg7Nmz+P7773H58mUsWrRICrmXLl2KyMhIZGZmolatWjh58qTOXYfL96meP38+UlNTce7cOdy8eROdO3dGXFwcAGDfvn3w8fFBpUqVUFRUBKVSidTUVI15HbSp/HlZt24dVCoVAgMDYWRkhKioKHTq1Am//PILRo8ejYcPH+LBgwewsbGBvr4+jh49CqVSqXNtSaZNm4aNGzfim2++QUZGBs6dO4eePXti1KhRqFevHh4+fAgvLy/k5ORAX18fMTExUrscXf6bJ6K/jwE3ERERERERVTjr1q2Dn58fAgIC0Lx5c9jZ2SE0NBRhYWGQyWRITEzEiRMn8NVXX2HOnDkYN24cjI2NtV32G6FSqeDp6YmsrCwkJyfrTOhYPjicN28efvvtN4waNQrNmjVDSkoKli1bhqtXr0ohd3FxMW7duoX79+/D0dERCoVCZ28ABwcHY+7cudi5cyfMzMyQlJSEFStWwMrKCkePHgUAHDx4EDdv3kRhYSF8fHx0coLM//73v9i6dSu+/fZb3Lt3DydPnkRKSgr27t2Lzp0749GjR3j48CGuXLkCa2tr2NnZ6eR5CQsLw4wZM7Br1y7Y2toiKSkJjo6OsLa2houLCyZMmIDatWujsLAQz58/h6mpqU4/rUFE/wz/qomIiIiIiKhCWbduHby8vLB9+3b07t1bWh4UFIRPPvkE3333HQYOHIjjx48jNzcX3t7eUluGKlWqaLHyfyYrKwvr169HUlISMjMzpXBbV0LUsnB72rRp2Lx5M0JCQlC9enUAQNu2bSGXy7F06VJMmTIFCxcuROfOndGwYUM0bNgQAHSid/jrFBYWIiUlBT4+PujSpQsAoGnTpqhbty68vb3RrVs3HDp0CF9++aXG67R9Xn7/ZNL9+/cRHR2NBQsWSJOv3rlzB4GBgXB1dUVsbCw6dOiADz74AM2aNZNepwvn5XWj4MeMGQNbW1tER0fD09MT69atw7179xAcHAy5XI5Ro0ZJk7GW7UPbx0FEbwefySAiIiIiIqIK49ixYxg1ahQCAgLQu3dvCCEghEBJSQmAl5PojR49GmfOnEFUVBTGjBmDb7/9FseOHYOhoaGWq/9n7t69i+TkZDRo0AApKSlQKpUoKSnRiXC7zPHjxxEREYGoqCgMGTIEH330EcoeHG/Tpg0mTJiAxo0bY/DgwTh//rzGa3XpOMqrXLky8vLycOnSJWmZgYEB3Nzc0L17d8TFxWmE22WTHmrzeD7//HMsXLhQY9nz589x584djScZrKysEBAQgBo1aqBPnz5ISEh4ZV/aPi+ZmZlSuL1+/XoUFRWhW7duGDp0KB48eIDZs2cjKCgIw4cPx/jx42FiYoLw8HAcOnRIYz/abhNDRG8PA24iIiIiIiKqMGrWrIn27dvjwoULOHnyJGQyGWQyGfT09KRgcdy4cbCxscHhw4cBAIGBgUhKSoJMJkNF7tLZvHlzhIWFYcmSJVL7C10bkZqdnQ1DQ0N88skn0vkoI4RAmzZtMG7cOIwaNQrNmzfXTpF/4vc1l3Fzc8O9e/cQGxsrLZPL5WjWrBk8PDzw+PFjeHt7S8u1bfbs2Zg8eTKAlyOwAaB+/fpwcnJCWFgYnjx5AuBl6GtjY4MmTZpAX18fc+bM0VrNr5OYmIgWLVrg6tWrmDhxIsaPH4+HDx/CwsIC1atXx/3795GTk4O2bdsCAO7du4euXbsiMDAQY8eO1XL1RPSuaP+qS0RERERERPQXWVtbY8OGDSgqKsKcOXOQlJQkrSsboZmXl4fCwkLUqFFDY50uTPb3T5X1EhZCaH1k7evC4CdPnuD27dvQ09ODXC5HSUmJVG9iYiIuXryItm3bYubMmVJ7FV1Rvof40aNHERERgYSEBDx58gSDBw+Gvr4+li9fjqioKAghkJubi4SEBLRo0QJdu3ZFcnIyMjMztXwUL7Vr1w4GBgaYP38+hg4disLCQgBA9+7dkZGRgSVLlqCgoAAApP9u27ZN6ieuC9RqNTp16oQ6derAyckJGzduRHJyMurUqSO99woKCqBQKJCcnIxTp05h2rRpeP78OcaMGaNz7y8iensYcBMREREREVGFYm1tjWXLlkEmk2H27NlITk7WWP/rr7+iVq1aaNOmDQBIo7YrerhdnraPpXwYfOjQIekcdO3aFZ9++inGjh2L7OxsaYR5YWEh5s+fjyNHjmjsR9shfXnle4gPHToUoaGh8Pb2Rp8+fZCRkYHNmzejqKgIM2bMQJ06ddC+fXtcu3YNfn5+sLW1RV5ens49IfDpp58iIiJCGs09duxYdO7cGbGxsWjXrh3Gjx8PJycn3LlzBx06dIBMJvvDUezvUnx8PObNm4e7d+/iyy+/RFZWFszMzKSJIsvOlYODAzp37oyVK1eib9++yMrKwtatWwFAJ24CEdG7IRO6dvUlIiIiIiIi+gvS09Mxfvx4CCEQEBAABwcHlJSUwM3NDXK5HDExMTrRLuJ9U34k/LRp07B7924EBATAzc0NxsbGCA0NxY4dO2BsbIzAwEBkZmZi/fr1ePDgAc6ePatzbVXK27BhA4KCgrB792589tlnmDdvHmbNmoUdO3bAxcUFmZmZSE9Px9GjR1GjRg0MGTIEenp6GDNmDG7cuIGoqCgYGRlppfbyNx3KO3ToEHr37o3Bgwdj7dq1AICDBw8iNjYWGRkZ+PDDD7F8+XIolUqtT4wJAJs2bUJQUBBcXV3h5eUFtVoNfX19eHp64tGjR9iyZQvatGkDuVwuvQ9//fVXPH78GLa2tlAoFCgpKdHp9xkRvVkMuImIiIiIiKjCKgu55XI5/P39sXjxYly/fh0XL16EUqn8w9CP/rm5c+di2bJl2LlzJz777DMpUBRCYO/evVi6dClOnToFa2trWFlZYc+ePToTov4RLy8vKJVKLFmyBFFRUfD09ERwcDBGjx6N/Px8PHv2DB988IG0/fnz57F9+3Zs2LABx48fR9OmTbVSd/n3+blz55CTk4OmTZuicuXKMDIywv79+9G3b18MHjwYa9askYLh8kGwLoTCERERGD58ODZt2oSuXbvCxMREY72DgwN+++03RERESE9ozJ07F5MnT4aBgQEA6PT7i4jeDgbcREREREREVKGlp6dj0qRJiI+PR/369XH58mUolUqdCOzeR0IIPH78GK6urhgxYgSGDRuGu3fvIj09HZGRkahduzb8/f0BANevX4eFhQXMzc2l9hK6eE7KAuJhw4ahQ4cOaNCgAZydnbFw4UKMGjUKpaWl2LhxIypVqoR+/fpBX18fALBixQpERERgxYoVWgu3y/P19cWWLVvw4sULmJqawsHBAQEBAWjYsCH2798PDw8PeHp6IiQkBFWqVNF2uRpUKhU8PDzg7u6OcePGScvz8/ORmpoKCwsLNGzYEN27d8eVK1cwYcIExMXFIS0tDTdu3GCoTfQvpnufKkRERERERER/g7W1NRYuXIiVK1di8eLF0NPT09kgtaIqC4DL2pMYGBjA0NAQly9fxu7du7F9+3Y8ePAA+vr6iI6Oxm+//YZVq1bBxsZGGlmsVqt15pz8fmR/2c/W1tYYNmwY9PT0sGXLFvTv3x/Ay5A1MjISjo6OUrgNAOPGjcOgQYNgamr6TusvU75dzP79+xETE4Pt27fjk08+wZ49exATEwNvb2+sWrUKLi4u2L17N7p374569ephypQpWqn5z2RmZqJmzZrS76tWrcKRI0ewe/duWFhYoG3btjhw4ACGDBmC/fv3w8DAAGlpaVAoFHxag+hfjCO4iYiIiIiI6L3CcPvNioiIQHx8PKZNm4aaNWtKI38DAgJw4sQJnD59GpMnT0a3bt3g6OiIMWPGQKFQYPny5Vqu/PXKB6FHjhxBaWkp6tevj48//hgAMHjwYOzduxenT5+GpaUl8vPzMWrUKDx58gQpKSnSe0vbgWpRUZHUlmPjxo24c+cOiouLMXfuXGmbPXv2YMGCBXB2dsb06dMBAKdOnULLli117m9EpVLB1tYWzs7OGDBgAFauXIm0tDS0b98evXr1Qm5uLnx8fDB16lR4eXlBpVLBwsJCp58MIKJ3gwE3EREREREREb1WXl4ebG1tkZeXhw8//BCtWrVC27ZtMWzYMABAVlYWVCoVPv30U+k1HTt2hK2tLRYuXKitsv8SX19fhIWFIT8/H3Z2dujTpw/Gjx+PX375BZMmTZImkjQ1NYWBgQGOHz+uMz3E4+PjkZqaCgcHB7Rp0waNGjXC9evX4eLigujoaI3gfcyYMUhKSkJqaqrGcl0MhRMTE9GnTx+Ym5vDyMgIixcvRrNmzWBubo7s7Gx07NgRLi4umDVrlvSa8qPYiejfSbeuZERERERERESkM6pUqQIPDw/UqVMH9vb2OHLkCCZPnoz4+Hi0aNECPj4+sLCwgFqtxsWLFzFt2jQ8fvwY8+fP13bprygfhF67dg1JSUmIjY2FTCbDypUr8cMPP6CwsBB+fn44ePAg9u7di+LiYpiZmcHJyQkKhUInQuFNmzYhKCgIrq6ucHR0BABcvXoV3bp1w7FjxxAfH4+OHTtKrVTat2+Ps2fPIicnB9WqVZP2o+3jeJ1OnTohPT0d+fn5qFev3ivrjYyMYGVlpbGM4TYRcQQ3EREREREREf2hQ4cOoV+/fkhKSkLTpk3x/PlzzJ07F7Nnz0azZs0wYMAAPH78GM+ePcONGzewb98+nRnpXKZ8O5GioiLcunULM2fOxNatW6FUKpGZmYm5c+ciJSUFbm5uCAgIeGUfunA8ERERGD58ODZt2gRnZ2cYGxtr1OXo6Ihbt25h4cKFcHR0hEKhgIeHBypXroyDBw9W2DBYpVLB09MTWVlZSE5O1vp5ICLdwoCbiIiIiIiIiP7UuHHjAAArVqwAAPznP/+BjY0NGjRogLS0NOzbtw/fffcdAgICdLon8nfffYeYmBgYGBjAwMAAR48eldZlZmZi3rx5OH36NBwcHBAcHKzFSl+lUqng4eEBd3d36XwALyfATE1NhYWFBRo2bAhXV1fs378fH3/8Mezs7PDo0SPExcVBX1+/wrXzyMrKwvr165GUlITMzEwkJyfr3M0TItI+Ti9LRERERERERH/K1tYWqampyM7Ohq2tLczMzLBlyxYsWLAAoaGhiIyMxLRp0yCTySCE0JlwW61WSz9v2LABS5YsQZ8+fWBhYYELFy5gwoQJ0vrq1avD398fDRs2RHZ2NnRxPGBmZiZq1qwp/b5q1Sp4enrCwcEBDg4OcHNzw969e9GnTx9kZGTgq6++Qnx8PPT19fHixYsKFW4DwN27d5GcnIwGDRogJSUFSqUSJSUlDLeJSANHcBMRERERERHR/1erVq1w7tw5ODo6IioqSqOfcxldHbl94MAB3L9/HxYWFujVqxeys7Oxdu1abNu2DZ07d8bixYulbXNycmBsbAy5XK5TI55VKhVsbW3h7OyMAQMGYOXKlUhLS0P79u3Rq1cv5ObmwsfHB1OnToWXlxdatmyJ3NxcbN26FXZ2dlJP7oomJycHJiYmkMlkHLlNRK+le586RERERERERKQzykLe8ePHIzg4GIsWLUK1atVeG/7qYrh9+fJl9O/fH0VFRYiIiAAAmJmZYfjw4QCAbdu2wdfXFwsWLAAAmJqaAtDs260LLC0tsXnzZvTp0wdHjhyBkZERvv/+ezRr1gzm5ubIzs6Gubk57t+/DwA4d+4cHBwc0L17dxw6dAitW7fW8hH8b8rOhxCC4TYRvZbuXKmJiIiIiIiISOeUhdiff/45Hj9+jISEBI3lus7KygqhoaGoXr06IiMjpeUWFhYYMWIEhgwZgi1btiA0NFTjdboUbpfp1KkT0tPTcfjwYVy8eBEdO3aEubm5tN7IyAh169ZFSUkJAODkyZOws7PT2KaiqijvNyJ699iihIiIiIiIiIj+ktDQUMycORMnTpxAo0aNtF3OK34/6rpslPmzZ8+wa9cu+Pj4oFevXli/fr20jUqlQnx8PPr3719hRwirVCp4enoiKysLycnJUCgUePHiBZRKpbZLIyJ66xhwExEREREREdFfcvPmTXz33XfYtGmTzo1wLh9ur127FteuXUNGRgaGDRuGtm3bolq1atiyZQv8/PzQo0cPrFu37pV9VLQez1lZWVi/fj2SkpKQmZmJ5ORkKJXKCnccRET/hG59GhERERERERGRzvr444+xefNmyOVylJaWarscDWXhtq+vLwICAqBSqfDs2TMMGTIE3377LX799VcMHjwYISEhOHToENzd3V/ZR0ULhe/evYvk5GQ0aNAAKSkpUCqVKCkpqXDHQUT0T+je7A9EREREREREpLPKeiHrYoh64sQJRERE4NChQ2jZsiUAYOPGjVi6dCkMDQ0xb948uLm5oaCgAAcPHtS5iST/rubNmyMsLAwmJiaQyWQoLS3VyYk+iYjepop7FSciIiIiIiKif7WyyRTLFBYWQqFQoFq1alCr1QCAYcOGYfTo0Vi+fDlu3rwJExMTDB06FDExMZDL5dJ2FZWpqSlkMhmEEDp504GI6G1jwE1EREREREREFU5JSYk0WvnEiRN49uwZACA7OxvFxcWQy+UoLCwEAIwYMQImJiY4ffo0AKBy5cpSKFyRR3CXVzaynojo3+b9uIoTERERERER0b9GbGws2rdvDwDw8fHBpEmT8OLFC3Tt2hVt2rSBm5sb8vPzUblyZQCASqVC1apVUa1aNY39MBQmIqr42JiJiIiIiIiIiCoMtVoNmUyG3NxcfPzxx3jy5AnOnz8PU1NTAMCCBQswcuRIfPrpp5g3bx5kMhnCw8NRtWpVdOnSRbvFExHRGycTQghtF0FERERERERE9HcMGTIE27Ztg52dHc6ePSstF0IgIyMD06dPR0pKCqpWrYratWtj9+7dUCqVKC0tZa9qIqL3CANuIiIiIiIiIqow1Go11Go1oqKikJOTg5UrV8LY2BjHjh2DXC7X6M395MkTAICZmRlkMpnGOiIiej8w4CYiIiIiIiIinaZWq187GaRarUZsbCymTp0Kc3NzHD9+XFq3b98+dOjQAcbGxn+6DyIiqtgYcBMRERERERGRziofTIeHh+Pq1atQKBTo0aMHWrZsiaKiIhw9ehS+vr6oUqUK1q5diylTpgAA4uLiOJEkEdF7jgE3EREREREREek8Pz8/RERE4D//+Q8MDQ0RFxeHPXv24IsvvkBxcTFSUlIwZcoUqFQq1KlTB4mJiVAqlRBCMOQmInqPMeAmIiIiIiIiIp22du1azJ49G1FRUWjZsiW2b9+OQYMGQaFQYMeOHejVqxeEEHjx4gV+/vlnNGvW7JV+3ERE9H5i8ykiIiIiIiIi0llPnz7FzZs3MWPGDLRs2RL79+/H6NGjsWjRInz99dfo37+/1IpEX18fLVq0gFwuh1qtZrhNRPQvwBHcRERERERERKTTLl++jCpVqqC0tBTdu3eHt7c3vL29sX//fri6ugIAjh49ig4dOmi5UiIietd4K5OIiIiIiIiIdEL5CSXLtxdp0qQJACA6Ohrm5uYYNGgQAMDU1BQjR46EnZ0d2rVrp52iiYhIqxhwExEREREREZHWCSGkcDs0NBTnzp2DUqlE27ZtMWTIEOjp6eHp06c4ffo0bt++DbVajZCQEFhaWuKbb74BAPbcJiL6F2KLEiIiIiIiIiLSKiEEZDIZAGDWrFkIDg7G0KFDcenSJeTl5aFmzZqIjo6Gvr4+evfujejoaDRo0AAGBga4cOEClEqlxj6IiOjfgwE3EREREREREemEKz0kgEwAAAWWSURBVFeuICAgABMmTEDHjh0hhEBUVBTmz5+PunXrIjIyEsXFxThy5AiKiorg6uoKhULBkdtERP9ivPoTERERERERkdatW7cOK1euRGlpKWrXrg0AkMlk6N69O/Ly8vD999/j0qVLaN68Ob788kvpdaWlpQy3iYj+xeTaLoCIiIiIiIiIqEOHDpDJZLhy5QqOHz8uLa9UqRK+/PJL3Lp1CxcvXnzldQqF4h1WSUREuoYBNxERERERERG9U2q1WuP30tJS2NjYYPfu3WjevDk2b96MuLg4ab1SqYSVlRUqVar0rkslIiIdxx7cRERERERERPTOqNVqyOUvx9tFRkYiPT0dhYWF6NmzJ+zt7fHrr7+id+/eEELA2dkZjRo1QlRUFNLS0nDlyhWO2CYiIg0cwU1ERERERERE70xZuO3r6ws/Pz+cP38eGRkZaN26NcLDw1G/fn3s2bMH+vr6WLBgAQ4cOIDGjRvj2rVrUCgUKC0t1fIREBGRLmHATURERERERETvRFlrkqioKISHh2Pnzp3Ys2cPBgwYoLFdvXr1sGvXLjRr1gxCCHzxxRfSurKAnIiICGDATURERERERERvWVxcHLKzs6Vw+u7du+jSpQvs7e2xa9cu9O/fH6tXr8bAgQORm5uL27dvo06dOtixYwfS0tIQEhIi9eSWyWTaPBQiItIxDLiJiIiIiIiI6K15+vQpfHx8YGtri5ycHABAQUEBnjx5gl27dmHYsGEICQnByJEjAQAxMTGYP38+srOzYW1tjejoaPz8889Yu3YtCgoKtHgkRESkizjJJBERERERERG9VVevXsXXX3+Np0+fIiUlBTdu3MDIkSNx/fp1zJkzBz4+PgCA/Px89O/fH/Xr18fSpUsBvByxffv2bajVatSvX1+bh0FERDqII7iJiIiIiIiI6K0o67ltY2ODnTt3wtjYGK6urrCxsYGbmxvMzMzw/Plz/Pzzz/jxxx/Rt29f3Lt3D4sXL5ZakajVatStW5fhNhERvZaetgsgIiIiIiIiovfL48ePYW5uDrlcjuLiYujr66NOnTqoVq0a4uLi4OzsjNjYWDx//hxRUVEIDAxE69atYWRkhDNnzkBPTw+lpaVQKBTsuU1ERH+KI7iJiIiIiIiI6I05efIk3N3dceLECQCAvr4+AEijsxMSElBYWIiuXbti2rRpSEpKwvHjxxEZGYnY2FgolUqUlJRAoVBo8zCIiKiCYMBNRERERERERG9M9erVIYRAcHAwzp8/DwBwd3fHtWvXcODAAXTq1Anbt29HUVERnJyc8OzZMzg4OKB27dqQy+VQq9XQ0+MD50RE9NdwkkkiIiIiIiIieqPS09Mxfvx4KBQK5Obm4tmzZ4iKikLdunWlba5fv47OnTujQ4cO2LZtm/aKJSKiCo0BNxERERERERG9cenp6Rg7dizOnj2LdevWoW/fvgBeThopl798oDwjIwO1atViOxIiIvqfMeAmIiIiIiIiorfi5s2bGDduHORyOfz9/dG+fXsAmiE3AGlCSSIior+LATcRERERERERvTVl7UoAIDAwEO3atdNyRURE9D7hJJNERERERERE9NZYW1tj2bJlUCgUmDhxIi5duqTtkoiI6D3CgJuIiIiIiIiI3ipra2ssWLAAjo6OaNy4sbbLISKi9whblBARERERERHRO/X7HtxERET/KwbcRERERERERERERFQh8XYpEREREREREREREVVIDLiJiIiIiIiIiIiIqEJiwE1EREREREREREREFRIDbiIiIiIiIiIiIiKqkBhwExEREREREREREVGFxICbiIiIiIiIiIiIiCokBtxEREREREREREREVCEx4CYiIiIiIiIiIiKiCokBNxERERERERERERFVSAy4iYiIiIiIiIiIiKhC+j+WoO/Td8Tq6wAAAABJRU5ErkJggg==\n"},"metadata":{}}],"source":["correlation_matrix = cirrhosis_data_numeric.corr()\n","\n","plt.figure(figsize=(18, 12))\n","heatmap = sns.heatmap(correlation_matrix, annot=True, cmap='viridis', linewidths=1, fmt='.2f',\n","                      annot_kws={\"size\": 10}, cbar_kws={\"shrink\": 0.8})\n","plt.title('Correlation Heatmap of cirrhosis_data')\n","\n","heatmap.set_xticklabels(heatmap.get_xticklabels(), rotation=45, ha='right')\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"SdU_DUzAN48i"},"source":["##Data Splitting"]},{"cell_type":"markdown","metadata":{"id":"SlJXJ-oMJ6QO"},"source":["###All Records"]},{"cell_type":"markdown","metadata":{"id":"TS0xw7Pmnnjc"},"source":["####dropping categorical variables"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"utXw4paThd4v","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020383470,"user_tz":-60,"elapsed":23,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"33cd19a6-731d-41c9-e400-1b3e61a7f5be"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(7905, 29)"]},"metadata":{},"execution_count":45}],"source":["cirrhosis_data_shuffled_encoded.shape"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"D04ZQR8RkVKC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020383470,"user_tz":-60,"elapsed":16,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"b5422661-3f57-4cac-cdc7-a3e108c43059"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['id', 'N_Days', 'Drug', 'Age', 'Sex', 'Ascites', 'Hepatomegaly',\n","       'Spiders', 'Edema', 'Bilirubin', 'Cholesterol', 'Albumin', 'Copper',\n","       'Alk_Phos', 'SGOT', 'Tryglicerides', 'Platelets', 'Prothrombin',\n","       'Stage', 'Status', 'Edema_N', 'Edema_S', 'Edema_Y', 'Drug_encoded',\n","       'Sex_encoded', 'Ascites_encoded', 'Hepatomegaly_encoded',\n","       'Spiders_encoded', 'Status_encoded'],\n","      dtype='object')"]},"metadata":{},"execution_count":46}],"source":["cirrhosis_data_shuffled_encoded.columns"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DqsGNC-VjMNo"},"outputs":[],"source":["import pandas as pd\n","\n","#categorical columns to be dropped\n","categorical_columns = ['Drug', 'Sex', 'Ascites', 'Hepatomegaly', 'Spiders', 'Edema', 'Status']\n","\n","# Drop the original categorical columns from cirrhosis_data_shuffled_encoded\n","cirrhosis_data_shuffled_encoded = cirrhosis_data_shuffled_encoded.drop(columns=categorical_columns)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zshbbdy2jfij","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020383470,"user_tz":-60,"elapsed":13,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"eca9d116-3701-4f86-e09d-6c41de794086"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(7905, 22)"]},"metadata":{},"execution_count":48}],"source":["cirrhosis_data_shuffled_encoded.shape"]},{"cell_type":"markdown","metadata":{"id":"TWvwYWmcpKdX"},"source":["####split"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lSt_YH9cxkHm"},"outputs":[],"source":["features_a = ['id', 'N_Days', 'Age', 'Bilirubin', 'Cholesterol', 'Albumin', 'Copper',\n","       'Alk_Phos', 'SGOT', 'Tryglicerides', 'Platelets', 'Prothrombin',\n","       'Stage', 'Edema_N', 'Edema_S', 'Edema_Y', 'Drug_encoded',\n","       'Sex_encoded', 'Ascites_encoded', 'Hepatomegaly_encoded',\n","       'Spiders_encoded']\n","\n","target_a = ['Status_encoded']"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"w34_v9E7yjfC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020383470,"user_tz":-60,"elapsed":11,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"e29e6a4f-3236-415e-ae5b-a029229e1df5"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["7905"]},"metadata":{},"execution_count":50}],"source":["X = cirrhosis_data_shuffled_encoded[features_a]\n","y = cirrhosis_data_shuffled_encoded[target_a]\n","\n","len(X)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jE609LbApXAz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020383470,"user_tz":-60,"elapsed":9,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"aee62355-f7d5-40ce-ea46-64cfdc61c71f"},"outputs":[{"output_type":"stream","name":"stdout","text":["(5533, 22)\n","(2372, 22)\n"]}],"source":["# Split the data into 70% train and 30% test\n","train_set, temp_test_set =  train_test_split(cirrhosis_data_shuffled_encoded,\n","                                             test_size=0.3, random_state = 42)\n","\n","print( train_set.shape )\n","print( temp_test_set.shape )"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6qmhExElqR7_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020383856,"user_tz":-60,"elapsed":393,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"46e1b036-c760-42b2-e4b0-0a5afe3ac664"},"outputs":[{"output_type":"stream","name":"stdout","text":["(1186, 22)\n","(1186, 22)\n"]}],"source":["# Split the test_dataset dataframe to 50% test and 50% validation.\n","test_set, val_set =  train_test_split(temp_test_set, test_size=0.5,\n","                                      random_state = 42)\n","\n","print( test_set.shape )\n","print( val_set.shape )"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BfUij3IVqgN6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020383856,"user_tz":-60,"elapsed":22,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"4b985a21-777a-4843-f8ca-0aded6d18416"},"outputs":[{"output_type":"stream","name":"stdout","text":[" Train set      : (5533, 22)\n"," Validation set : (1186, 22)\n"," Test set       : (1186, 22)\n"]}],"source":["print(f\" Train set      : {train_set.shape}\")\n","print(f\" Validation set : {val_set.shape}\")\n","print(f\" Test set       : {test_set.shape}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"D34LB00HFIpC"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SfT-eVF3SXJ3"},"outputs":[],"source":["X_train = train_set.drop(columns=['Status_encoded', 'Edema_N', 'Edema_S', 'Edema_Y', 'Drug_encoded',\n","       'Sex_encoded', 'Ascites_encoded','Spiders_encoded', 'Hepatomegaly_encoded', 'Stage'])\n","X_val = val_set.drop(columns=['Status_encoded', 'Edema_N', 'Edema_S', 'Edema_Y', 'Drug_encoded',\n","       'Sex_encoded', 'Ascites_encoded','Spiders_encoded', 'Hepatomegaly_encoded', 'Stage'])\n","X_test = test_set.drop(columns=['Status_encoded', 'Edema_N', 'Edema_S', 'Edema_Y', 'Drug_encoded',\n","       'Sex_encoded', 'Ascites_encoded','Spiders_encoded', 'Hepatomegaly_encoded', 'Stage'])"]},{"cell_type":"code","source":[],"metadata":{"id":"qIrvw2iRnJer"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OzanLF3ISn80"},"outputs":[],"source":["y_train = train_set[['Status_encoded']]\n","y_val = val_set[['Status_encoded']]\n","y_test = test_set[['Status_encoded']]"]},{"cell_type":"markdown","metadata":{"id":"444F4HVmfkcC"},"source":["#### standardisation"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mMSbcEcZASa3"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lj1xatCDZdjc","colab":{"base_uri":"https://localhost:8080/","height":445},"executionInfo":{"status":"ok","timestamp":1715020383857,"user_tz":-60,"elapsed":19,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"d60518b2-90fa-4198-c678-7d14fa313998"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                count          mean          std      min       25%       50%  \\\n","id             5533.0   3952.823242  2297.049438     0.00   1935.00   3961.00   \n","N_Days         5533.0   2023.970721  1098.952262    41.00   1230.00   1831.00   \n","Age            5533.0  18378.247425  3675.124385  9598.00  15574.00  18701.00   \n","Bilirubin      5533.0      2.648961     3.921265     0.30      0.70      1.10   \n","Cholesterol    5533.0    349.123803   194.166423   120.00    248.00    298.00   \n","Albumin        5533.0      3.545554     0.350367     1.96      3.35      3.58   \n","Copper         5533.0     84.272547    76.093832     4.00     39.00     63.00   \n","Alk_Phos       5533.0   1808.094090  1871.749732   289.00    824.00   1174.00   \n","SGOT           5533.0    114.634536    49.744508    26.35     75.95    106.95   \n","Tryglicerides  5533.0    116.233689    54.863903    33.00     85.00    104.00   \n","Platelets      5533.0    264.177842    87.792847    62.00    210.00    264.00   \n","Prothrombin    5533.0     10.641008     0.793042     9.00     10.00     10.60   \n","\n","                    75%       max  \n","id              5943.00   7904.00  \n","N_Days          2692.00   4795.00  \n","Age            20684.00  28650.00  \n","Bilirubin          3.00     28.00  \n","Cholesterol      387.00   1775.00  \n","Albumin            3.77      4.64  \n","Copper           102.00    588.00  \n","Alk_Phos        1857.00  13862.40  \n","SGOT             137.95    457.25  \n","Tryglicerides    139.00    598.00  \n","Platelets        312.00    563.00  \n","Prothrombin       11.00     18.00  "],"text/html":["\n","  <div id=\"df-11c65a47-0592-4d41-a29a-0b8ddff96338\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","      <th>mean</th>\n","      <th>std</th>\n","      <th>min</th>\n","      <th>25%</th>\n","      <th>50%</th>\n","      <th>75%</th>\n","      <th>max</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>id</th>\n","      <td>5533.0</td>\n","      <td>3952.823242</td>\n","      <td>2297.049438</td>\n","      <td>0.00</td>\n","      <td>1935.00</td>\n","      <td>3961.00</td>\n","      <td>5943.00</td>\n","      <td>7904.00</td>\n","    </tr>\n","    <tr>\n","      <th>N_Days</th>\n","      <td>5533.0</td>\n","      <td>2023.970721</td>\n","      <td>1098.952262</td>\n","      <td>41.00</td>\n","      <td>1230.00</td>\n","      <td>1831.00</td>\n","      <td>2692.00</td>\n","      <td>4795.00</td>\n","    </tr>\n","    <tr>\n","      <th>Age</th>\n","      <td>5533.0</td>\n","      <td>18378.247425</td>\n","      <td>3675.124385</td>\n","      <td>9598.00</td>\n","      <td>15574.00</td>\n","      <td>18701.00</td>\n","      <td>20684.00</td>\n","      <td>28650.00</td>\n","    </tr>\n","    <tr>\n","      <th>Bilirubin</th>\n","      <td>5533.0</td>\n","      <td>2.648961</td>\n","      <td>3.921265</td>\n","      <td>0.30</td>\n","      <td>0.70</td>\n","      <td>1.10</td>\n","      <td>3.00</td>\n","      <td>28.00</td>\n","    </tr>\n","    <tr>\n","      <th>Cholesterol</th>\n","      <td>5533.0</td>\n","      <td>349.123803</td>\n","      <td>194.166423</td>\n","      <td>120.00</td>\n","      <td>248.00</td>\n","      <td>298.00</td>\n","      <td>387.00</td>\n","      <td>1775.00</td>\n","    </tr>\n","    <tr>\n","      <th>Albumin</th>\n","      <td>5533.0</td>\n","      <td>3.545554</td>\n","      <td>0.350367</td>\n","      <td>1.96</td>\n","      <td>3.35</td>\n","      <td>3.58</td>\n","      <td>3.77</td>\n","      <td>4.64</td>\n","    </tr>\n","    <tr>\n","      <th>Copper</th>\n","      <td>5533.0</td>\n","      <td>84.272547</td>\n","      <td>76.093832</td>\n","      <td>4.00</td>\n","      <td>39.00</td>\n","      <td>63.00</td>\n","      <td>102.00</td>\n","      <td>588.00</td>\n","    </tr>\n","    <tr>\n","      <th>Alk_Phos</th>\n","      <td>5533.0</td>\n","      <td>1808.094090</td>\n","      <td>1871.749732</td>\n","      <td>289.00</td>\n","      <td>824.00</td>\n","      <td>1174.00</td>\n","      <td>1857.00</td>\n","      <td>13862.40</td>\n","    </tr>\n","    <tr>\n","      <th>SGOT</th>\n","      <td>5533.0</td>\n","      <td>114.634536</td>\n","      <td>49.744508</td>\n","      <td>26.35</td>\n","      <td>75.95</td>\n","      <td>106.95</td>\n","      <td>137.95</td>\n","      <td>457.25</td>\n","    </tr>\n","    <tr>\n","      <th>Tryglicerides</th>\n","      <td>5533.0</td>\n","      <td>116.233689</td>\n","      <td>54.863903</td>\n","      <td>33.00</td>\n","      <td>85.00</td>\n","      <td>104.00</td>\n","      <td>139.00</td>\n","      <td>598.00</td>\n","    </tr>\n","    <tr>\n","      <th>Platelets</th>\n","      <td>5533.0</td>\n","      <td>264.177842</td>\n","      <td>87.792847</td>\n","      <td>62.00</td>\n","      <td>210.00</td>\n","      <td>264.00</td>\n","      <td>312.00</td>\n","      <td>563.00</td>\n","    </tr>\n","    <tr>\n","      <th>Prothrombin</th>\n","      <td>5533.0</td>\n","      <td>10.641008</td>\n","      <td>0.793042</td>\n","      <td>9.00</td>\n","      <td>10.00</td>\n","      <td>10.60</td>\n","      <td>11.00</td>\n","      <td>18.00</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-11c65a47-0592-4d41-a29a-0b8ddff96338')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-11c65a47-0592-4d41-a29a-0b8ddff96338 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-11c65a47-0592-4d41-a29a-0b8ddff96338');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e1f87b3c-17dd-477d-887c-ae8d499c2b47\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e1f87b3c-17dd-477d-887c-ae8d499c2b47')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e1f87b3c-17dd-477d-887c-ae8d499c2b47 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"X_train\",\n  \"rows\": 12,\n  \"fields\": [\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 5533.0,\n        \"max\": 5533.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          5533.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5220.04158165569,\n        \"min\": 2.6489607807699262,\n        \"max\": 18378.247424543646,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          264.17784203867706\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1212.467999021858,\n        \"min\": 0.35036728666517164,\n        \"max\": 3675.1243845501835,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          87.7928474137835\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2756.5307167529027,\n        \"min\": 0.0,\n        \"max\": 9598.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          62.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"25%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4415.721277075601,\n        \"min\": 0.7,\n        \"max\": 15574.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          210.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"50%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5323.457794839612,\n        \"min\": 1.1,\n        \"max\": 18701.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          264.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"75%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5934.106129380013,\n        \"min\": 3.0,\n        \"max\": 20684.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          312.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8583.040393442341,\n        \"min\": 4.64,\n        \"max\": 28650.0,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          563.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":56}],"source":["X_train.describe().transpose()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YuyYAGRTd_Dn"},"outputs":[],"source":["# Initialize the RobustScaler\n","scaler = RobustScaler()\n","\n","X_train_norm = scaler.fit_transform(X_train)\n","X_val_norm = scaler.transform(X_val)\n","X_test_norm = scaler.transform(X_test)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vu0GG1iuhryE"},"outputs":[],"source":["# put normalised data in a df\n","\n","X_train_norm = pd.DataFrame(X_train_norm, columns=X_train.columns)\n","X_val_norm = pd.DataFrame(X_val_norm, columns=X_val.columns)\n","X_test_norm = pd.DataFrame(X_test_norm, columns=X_test.columns)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jecbUqyufWXP","colab":{"base_uri":"https://localhost:8080/","height":445},"executionInfo":{"status":"ok","timestamp":1715020383858,"user_tz":-60,"elapsed":19,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"18b28b9a-207d-4469-ae7a-64d158809727"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                count      mean       std       min       25%  50%       75%  \\\n","id             5533.0 -0.002040  0.573116 -0.988273 -0.505489  0.0  0.494511   \n","N_Days         5533.0  0.131991  0.751677 -1.224350 -0.411081  0.0  0.588919   \n","Age            5533.0 -0.063161  0.719202 -1.781409 -0.611937  0.0  0.388063   \n","Bilirubin      5533.0  0.673461  1.704898 -0.347826 -0.173913  0.0  0.826087   \n","Cholesterol    5533.0  0.367797  1.396881 -1.280576 -0.359712  0.0  0.640288   \n","Albumin        5533.0 -0.082014  0.834208 -3.857143 -0.547619  0.0  0.452381   \n","Copper         5533.0  0.337659  1.207839 -0.936508 -0.380952  0.0  0.619048   \n","Alk_Phos       5533.0  0.613837  1.811955 -0.856728 -0.338819  0.0  0.661181   \n","SGOT           5533.0  0.123944  0.802331 -1.300000 -0.500000  0.0  0.500000   \n","Tryglicerides  5533.0  0.226550  1.015998 -1.314815 -0.351852  0.0  0.648148   \n","Platelets      5533.0  0.001744  0.860714 -1.980392 -0.529412  0.0  0.470588   \n","Prothrombin    5533.0  0.041008  0.793042 -1.600000 -0.600000  0.0  0.400000   \n","\n","                     max  \n","id              0.983782  \n","N_Days          2.027360  \n","Age             1.946967  \n","Bilirubin      11.695652  \n","Cholesterol    10.625899  \n","Albumin         2.523810  \n","Copper          8.333333  \n","Alk_Phos       12.283059  \n","SGOT            5.650000  \n","Tryglicerides   9.148148  \n","Platelets       2.931373  \n","Prothrombin     7.400000  "],"text/html":["\n","  <div id=\"df-0f36e523-3548-4520-b0e5-5c85bb7f107f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","      <th>mean</th>\n","      <th>std</th>\n","      <th>min</th>\n","      <th>25%</th>\n","      <th>50%</th>\n","      <th>75%</th>\n","      <th>max</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>id</th>\n","      <td>5533.0</td>\n","      <td>-0.002040</td>\n","      <td>0.573116</td>\n","      <td>-0.988273</td>\n","      <td>-0.505489</td>\n","      <td>0.0</td>\n","      <td>0.494511</td>\n","      <td>0.983782</td>\n","    </tr>\n","    <tr>\n","      <th>N_Days</th>\n","      <td>5533.0</td>\n","      <td>0.131991</td>\n","      <td>0.751677</td>\n","      <td>-1.224350</td>\n","      <td>-0.411081</td>\n","      <td>0.0</td>\n","      <td>0.588919</td>\n","      <td>2.027360</td>\n","    </tr>\n","    <tr>\n","      <th>Age</th>\n","      <td>5533.0</td>\n","      <td>-0.063161</td>\n","      <td>0.719202</td>\n","      <td>-1.781409</td>\n","      <td>-0.611937</td>\n","      <td>0.0</td>\n","      <td>0.388063</td>\n","      <td>1.946967</td>\n","    </tr>\n","    <tr>\n","      <th>Bilirubin</th>\n","      <td>5533.0</td>\n","      <td>0.673461</td>\n","      <td>1.704898</td>\n","      <td>-0.347826</td>\n","      <td>-0.173913</td>\n","      <td>0.0</td>\n","      <td>0.826087</td>\n","      <td>11.695652</td>\n","    </tr>\n","    <tr>\n","      <th>Cholesterol</th>\n","      <td>5533.0</td>\n","      <td>0.367797</td>\n","      <td>1.396881</td>\n","      <td>-1.280576</td>\n","      <td>-0.359712</td>\n","      <td>0.0</td>\n","      <td>0.640288</td>\n","      <td>10.625899</td>\n","    </tr>\n","    <tr>\n","      <th>Albumin</th>\n","      <td>5533.0</td>\n","      <td>-0.082014</td>\n","      <td>0.834208</td>\n","      <td>-3.857143</td>\n","      <td>-0.547619</td>\n","      <td>0.0</td>\n","      <td>0.452381</td>\n","      <td>2.523810</td>\n","    </tr>\n","    <tr>\n","      <th>Copper</th>\n","      <td>5533.0</td>\n","      <td>0.337659</td>\n","      <td>1.207839</td>\n","      <td>-0.936508</td>\n","      <td>-0.380952</td>\n","      <td>0.0</td>\n","      <td>0.619048</td>\n","      <td>8.333333</td>\n","    </tr>\n","    <tr>\n","      <th>Alk_Phos</th>\n","      <td>5533.0</td>\n","      <td>0.613837</td>\n","      <td>1.811955</td>\n","      <td>-0.856728</td>\n","      <td>-0.338819</td>\n","      <td>0.0</td>\n","      <td>0.661181</td>\n","      <td>12.283059</td>\n","    </tr>\n","    <tr>\n","      <th>SGOT</th>\n","      <td>5533.0</td>\n","      <td>0.123944</td>\n","      <td>0.802331</td>\n","      <td>-1.300000</td>\n","      <td>-0.500000</td>\n","      <td>0.0</td>\n","      <td>0.500000</td>\n","      <td>5.650000</td>\n","    </tr>\n","    <tr>\n","      <th>Tryglicerides</th>\n","      <td>5533.0</td>\n","      <td>0.226550</td>\n","      <td>1.015998</td>\n","      <td>-1.314815</td>\n","      <td>-0.351852</td>\n","      <td>0.0</td>\n","      <td>0.648148</td>\n","      <td>9.148148</td>\n","    </tr>\n","    <tr>\n","      <th>Platelets</th>\n","      <td>5533.0</td>\n","      <td>0.001744</td>\n","      <td>0.860714</td>\n","      <td>-1.980392</td>\n","      <td>-0.529412</td>\n","      <td>0.0</td>\n","      <td>0.470588</td>\n","      <td>2.931373</td>\n","    </tr>\n","    <tr>\n","      <th>Prothrombin</th>\n","      <td>5533.0</td>\n","      <td>0.041008</td>\n","      <td>0.793042</td>\n","      <td>-1.600000</td>\n","      <td>-0.600000</td>\n","      <td>0.0</td>\n","      <td>0.400000</td>\n","      <td>7.400000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0f36e523-3548-4520-b0e5-5c85bb7f107f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0f36e523-3548-4520-b0e5-5c85bb7f107f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0f36e523-3548-4520-b0e5-5c85bb7f107f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-83480fc4-3ecb-48be-a665-8d880d5aa642\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-83480fc4-3ecb-48be-a665-8d880d5aa642')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-83480fc4-3ecb-48be-a665-8d880d5aa642 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"X_train_norm\",\n  \"rows\": 12,\n  \"fields\": [\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 5533.0,\n        \"max\": 5533.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          5533.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2536580317486035,\n        \"min\": -0.08201440706410902,\n        \"max\": 0.6734612090304026,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          0.001743549398794399\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.40340577541373623,\n        \"min\": 0.5731161273425297,\n        \"max\": 1.811955210002769,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          0.8607141903312108\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.872385495715636,\n        \"min\": -3.857142857142858,\n        \"max\": -0.3478260869565218,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          -1.9803921568627452\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"25%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12867423646167145,\n        \"min\": -0.6119373776908024,\n        \"max\": -0.17391304347826095,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          -0.5294117647058824\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"50%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"75%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12867423646167148,\n        \"min\": 0.38806262230919764,\n        \"max\": 0.8260869565217391,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          0.47058823529411764\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.140442763727455,\n        \"min\": 0.9837824351297405,\n        \"max\": 12.283059051306873,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          2.9313725490196076\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":59}],"source":["X_train_norm.describe().transpose()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sCdpf4tbfa45","colab":{"base_uri":"https://localhost:8080/","height":445},"executionInfo":{"status":"ok","timestamp":1715020383858,"user_tz":-60,"elapsed":18,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"95e53647-08e4-4e9d-b908-8e2f1152b593"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                count      mean       std       min       25%       50%  \\\n","id             1186.0 -0.001200  0.554505 -0.987774 -0.469623 -0.016218   \n","N_Days         1186.0  0.139316  0.744067 -1.224350 -0.420657  0.034884   \n","Age            1186.0 -0.071771  0.736540 -1.781409 -0.617025 -0.039530   \n","Bilirubin      1186.0  0.595425  1.532493 -0.347826 -0.173913  0.000000   \n","Cholesterol    1186.0  0.444393  1.518490 -1.280576 -0.359712  0.000000   \n","Albumin        1186.0 -0.060748  0.814219 -3.214286 -0.547619  0.047619   \n","Copper         1186.0  0.304130  1.135277 -0.936508 -0.380952  0.007937   \n","Alk_Phos       1186.0  0.635344  1.931772 -0.856728 -0.347531 -0.010649   \n","SGOT           1186.0  0.130371  0.783990 -1.300000 -0.500000  0.050000   \n","Tryglicerides  1186.0  0.171976  0.856963 -1.314815 -0.370370 -0.027778   \n","Platelets      1186.0  0.057038  0.845456 -1.980392 -0.497549  0.029412   \n","Prothrombin    1186.0 -0.003120  0.765070 -1.500000 -0.600000  0.000000   \n","\n","                    75%        max  \n","id             0.490020   0.983533  \n","N_Days         0.562756   2.027360  \n","Age            0.383757   1.946967  \n","Bilirubin      0.826087  11.695652  \n","Cholesterol    0.705036  10.625899  \n","Albumin        0.428571   2.523810  \n","Copper         0.539683   7.857143  \n","Alk_Phos       0.669894  12.283059  \n","SGOT           0.500000   5.650000  \n","Tryglicerides  0.638889   5.148148  \n","Platelets      0.539216   2.931373  \n","Prothrombin    0.400000   6.500000  "],"text/html":["\n","  <div id=\"df-d1bda5e4-9211-4d32-b956-cc560eed1ed8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","      <th>mean</th>\n","      <th>std</th>\n","      <th>min</th>\n","      <th>25%</th>\n","      <th>50%</th>\n","      <th>75%</th>\n","      <th>max</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>id</th>\n","      <td>1186.0</td>\n","      <td>-0.001200</td>\n","      <td>0.554505</td>\n","      <td>-0.987774</td>\n","      <td>-0.469623</td>\n","      <td>-0.016218</td>\n","      <td>0.490020</td>\n","      <td>0.983533</td>\n","    </tr>\n","    <tr>\n","      <th>N_Days</th>\n","      <td>1186.0</td>\n","      <td>0.139316</td>\n","      <td>0.744067</td>\n","      <td>-1.224350</td>\n","      <td>-0.420657</td>\n","      <td>0.034884</td>\n","      <td>0.562756</td>\n","      <td>2.027360</td>\n","    </tr>\n","    <tr>\n","      <th>Age</th>\n","      <td>1186.0</td>\n","      <td>-0.071771</td>\n","      <td>0.736540</td>\n","      <td>-1.781409</td>\n","      <td>-0.617025</td>\n","      <td>-0.039530</td>\n","      <td>0.383757</td>\n","      <td>1.946967</td>\n","    </tr>\n","    <tr>\n","      <th>Bilirubin</th>\n","      <td>1186.0</td>\n","      <td>0.595425</td>\n","      <td>1.532493</td>\n","      <td>-0.347826</td>\n","      <td>-0.173913</td>\n","      <td>0.000000</td>\n","      <td>0.826087</td>\n","      <td>11.695652</td>\n","    </tr>\n","    <tr>\n","      <th>Cholesterol</th>\n","      <td>1186.0</td>\n","      <td>0.444393</td>\n","      <td>1.518490</td>\n","      <td>-1.280576</td>\n","      <td>-0.359712</td>\n","      <td>0.000000</td>\n","      <td>0.705036</td>\n","      <td>10.625899</td>\n","    </tr>\n","    <tr>\n","      <th>Albumin</th>\n","      <td>1186.0</td>\n","      <td>-0.060748</td>\n","      <td>0.814219</td>\n","      <td>-3.214286</td>\n","      <td>-0.547619</td>\n","      <td>0.047619</td>\n","      <td>0.428571</td>\n","      <td>2.523810</td>\n","    </tr>\n","    <tr>\n","      <th>Copper</th>\n","      <td>1186.0</td>\n","      <td>0.304130</td>\n","      <td>1.135277</td>\n","      <td>-0.936508</td>\n","      <td>-0.380952</td>\n","      <td>0.007937</td>\n","      <td>0.539683</td>\n","      <td>7.857143</td>\n","    </tr>\n","    <tr>\n","      <th>Alk_Phos</th>\n","      <td>1186.0</td>\n","      <td>0.635344</td>\n","      <td>1.931772</td>\n","      <td>-0.856728</td>\n","      <td>-0.347531</td>\n","      <td>-0.010649</td>\n","      <td>0.669894</td>\n","      <td>12.283059</td>\n","    </tr>\n","    <tr>\n","      <th>SGOT</th>\n","      <td>1186.0</td>\n","      <td>0.130371</td>\n","      <td>0.783990</td>\n","      <td>-1.300000</td>\n","      <td>-0.500000</td>\n","      <td>0.050000</td>\n","      <td>0.500000</td>\n","      <td>5.650000</td>\n","    </tr>\n","    <tr>\n","      <th>Tryglicerides</th>\n","      <td>1186.0</td>\n","      <td>0.171976</td>\n","      <td>0.856963</td>\n","      <td>-1.314815</td>\n","      <td>-0.370370</td>\n","      <td>-0.027778</td>\n","      <td>0.638889</td>\n","      <td>5.148148</td>\n","    </tr>\n","    <tr>\n","      <th>Platelets</th>\n","      <td>1186.0</td>\n","      <td>0.057038</td>\n","      <td>0.845456</td>\n","      <td>-1.980392</td>\n","      <td>-0.497549</td>\n","      <td>0.029412</td>\n","      <td>0.539216</td>\n","      <td>2.931373</td>\n","    </tr>\n","    <tr>\n","      <th>Prothrombin</th>\n","      <td>1186.0</td>\n","      <td>-0.003120</td>\n","      <td>0.765070</td>\n","      <td>-1.500000</td>\n","      <td>-0.600000</td>\n","      <td>0.000000</td>\n","      <td>0.400000</td>\n","      <td>6.500000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d1bda5e4-9211-4d32-b956-cc560eed1ed8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d1bda5e4-9211-4d32-b956-cc560eed1ed8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d1bda5e4-9211-4d32-b956-cc560eed1ed8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-36302b9d-deec-4bc8-baea-57e8a95d9635\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-36302b9d-deec-4bc8-baea-57e8a95d9635')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-36302b9d-deec-4bc8-baea-57e8a95d9635 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"X_val_norm\",\n  \"rows\": 12,\n  \"fields\": [\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 1186.0,\n        \"max\": 1186.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1186.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2467074786341804,\n        \"min\": -0.07177062467205458,\n        \"max\": 0.6353444265054222,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          0.05703799226267234\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.42092725413578325,\n        \"min\": 0.5545045042982989,\n        \"max\": 1.9317716782921652,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          0.8454557361113454\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7155943729936468,\n        \"min\": -3.214285714285715,\n        \"max\": -0.3478260869565218,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          -1.9803921568627452\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"25%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12461400252149422,\n        \"min\": -0.6170254403131116,\n        \"max\": -0.17391304347826095,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          -0.49754901960784315\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"50%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.028834786614521584,\n        \"min\": -0.03953033268101761,\n        \"max\": 0.04999999999999992,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          -0.027777777777777776\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"75%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.13256687192624142,\n        \"min\": 0.3837573385518591,\n        \"max\": 0.8260869565217391,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          0.5392156862745098\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.00521759048081,\n        \"min\": 0.9835329341317365,\n        \"max\": 12.283059051306873,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          2.9313725490196076\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":60}],"source":["X_val_norm.describe().transpose()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M7Yr-jT4eKDx","colab":{"base_uri":"https://localhost:8080/","height":445},"executionInfo":{"status":"ok","timestamp":1715020383858,"user_tz":-60,"elapsed":17,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"47a0f113-17be-4923-bb3e-ab898f94bdfa"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                count      mean       std       min       25%       50%  \\\n","id             1186.0 -0.004250  0.567111 -0.986527 -0.484968  0.004117   \n","N_Days         1186.0  0.152944  0.738030 -1.217510 -0.407661  0.010944   \n","Age            1186.0 -0.061205  0.708447 -1.781409 -0.608611  0.005871   \n","Bilirubin      1186.0  0.593629  1.550747 -0.347826 -0.173913  0.000000   \n","Cholesterol    1186.0  0.360161  1.325869 -1.280576 -0.330935  0.014388   \n","Albumin        1186.0 -0.059343  0.786655 -3.119048 -0.517857  0.000000   \n","Copper         1186.0  0.332075  1.257272 -0.936508 -0.396825 -0.015873   \n","Alk_Phos       1186.0  0.648151  1.895836 -0.856728 -0.288480  0.034850   \n","SGOT           1186.0  0.114299  0.714664 -1.300000 -0.450000  0.050000   \n","Tryglicerides  1186.0  0.170836  0.868544 -1.314815 -0.370370  0.000000   \n","Platelets      1186.0  0.015136  0.853704 -1.901961 -0.500000  0.004902   \n","Prothrombin    1186.0  0.008179  0.743405 -1.600000 -0.600000  0.000000   \n","\n","                    75%        max  \n","id             0.475923   0.982535  \n","N_Days         0.571135   2.027360  \n","Age            0.381556   1.946967  \n","Bilirubin      0.771739  11.695652  \n","Cholesterol    0.721223  10.625899  \n","Albumin        0.428571   2.523810  \n","Copper         0.523810   8.333333  \n","Alk_Phos       0.644724  12.283059  \n","SGOT           0.480484   3.726613  \n","Tryglicerides  0.611111   6.074074  \n","Platelets      0.568627   2.931373  \n","Prothrombin    0.400000   3.000000  "],"text/html":["\n","  <div id=\"df-542a6899-5d1b-4fa2-8313-cfd78decac8a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","      <th>mean</th>\n","      <th>std</th>\n","      <th>min</th>\n","      <th>25%</th>\n","      <th>50%</th>\n","      <th>75%</th>\n","      <th>max</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>id</th>\n","      <td>1186.0</td>\n","      <td>-0.004250</td>\n","      <td>0.567111</td>\n","      <td>-0.986527</td>\n","      <td>-0.484968</td>\n","      <td>0.004117</td>\n","      <td>0.475923</td>\n","      <td>0.982535</td>\n","    </tr>\n","    <tr>\n","      <th>N_Days</th>\n","      <td>1186.0</td>\n","      <td>0.152944</td>\n","      <td>0.738030</td>\n","      <td>-1.217510</td>\n","      <td>-0.407661</td>\n","      <td>0.010944</td>\n","      <td>0.571135</td>\n","      <td>2.027360</td>\n","    </tr>\n","    <tr>\n","      <th>Age</th>\n","      <td>1186.0</td>\n","      <td>-0.061205</td>\n","      <td>0.708447</td>\n","      <td>-1.781409</td>\n","      <td>-0.608611</td>\n","      <td>0.005871</td>\n","      <td>0.381556</td>\n","      <td>1.946967</td>\n","    </tr>\n","    <tr>\n","      <th>Bilirubin</th>\n","      <td>1186.0</td>\n","      <td>0.593629</td>\n","      <td>1.550747</td>\n","      <td>-0.347826</td>\n","      <td>-0.173913</td>\n","      <td>0.000000</td>\n","      <td>0.771739</td>\n","      <td>11.695652</td>\n","    </tr>\n","    <tr>\n","      <th>Cholesterol</th>\n","      <td>1186.0</td>\n","      <td>0.360161</td>\n","      <td>1.325869</td>\n","      <td>-1.280576</td>\n","      <td>-0.330935</td>\n","      <td>0.014388</td>\n","      <td>0.721223</td>\n","      <td>10.625899</td>\n","    </tr>\n","    <tr>\n","      <th>Albumin</th>\n","      <td>1186.0</td>\n","      <td>-0.059343</td>\n","      <td>0.786655</td>\n","      <td>-3.119048</td>\n","      <td>-0.517857</td>\n","      <td>0.000000</td>\n","      <td>0.428571</td>\n","      <td>2.523810</td>\n","    </tr>\n","    <tr>\n","      <th>Copper</th>\n","      <td>1186.0</td>\n","      <td>0.332075</td>\n","      <td>1.257272</td>\n","      <td>-0.936508</td>\n","      <td>-0.396825</td>\n","      <td>-0.015873</td>\n","      <td>0.523810</td>\n","      <td>8.333333</td>\n","    </tr>\n","    <tr>\n","      <th>Alk_Phos</th>\n","      <td>1186.0</td>\n","      <td>0.648151</td>\n","      <td>1.895836</td>\n","      <td>-0.856728</td>\n","      <td>-0.288480</td>\n","      <td>0.034850</td>\n","      <td>0.644724</td>\n","      <td>12.283059</td>\n","    </tr>\n","    <tr>\n","      <th>SGOT</th>\n","      <td>1186.0</td>\n","      <td>0.114299</td>\n","      <td>0.714664</td>\n","      <td>-1.300000</td>\n","      <td>-0.450000</td>\n","      <td>0.050000</td>\n","      <td>0.480484</td>\n","      <td>3.726613</td>\n","    </tr>\n","    <tr>\n","      <th>Tryglicerides</th>\n","      <td>1186.0</td>\n","      <td>0.170836</td>\n","      <td>0.868544</td>\n","      <td>-1.314815</td>\n","      <td>-0.370370</td>\n","      <td>0.000000</td>\n","      <td>0.611111</td>\n","      <td>6.074074</td>\n","    </tr>\n","    <tr>\n","      <th>Platelets</th>\n","      <td>1186.0</td>\n","      <td>0.015136</td>\n","      <td>0.853704</td>\n","      <td>-1.901961</td>\n","      <td>-0.500000</td>\n","      <td>0.004902</td>\n","      <td>0.568627</td>\n","      <td>2.931373</td>\n","    </tr>\n","    <tr>\n","      <th>Prothrombin</th>\n","      <td>1186.0</td>\n","      <td>0.008179</td>\n","      <td>0.743405</td>\n","      <td>-1.600000</td>\n","      <td>-0.600000</td>\n","      <td>0.000000</td>\n","      <td>0.400000</td>\n","      <td>3.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-542a6899-5d1b-4fa2-8313-cfd78decac8a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-542a6899-5d1b-4fa2-8313-cfd78decac8a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-542a6899-5d1b-4fa2-8313-cfd78decac8a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8d549b1a-1fa9-4715-9db6-4ad926a1ae8e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8d549b1a-1fa9-4715-9db6-4ad926a1ae8e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8d549b1a-1fa9-4715-9db6-4ad926a1ae8e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"X_test_norm\",\n  \"rows\": 12,\n  \"fields\": [\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 1186.0,\n        \"max\": 1186.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1186.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.24421807909897308,\n        \"min\": -0.06120476003471684,\n        \"max\": 0.6481506573137067,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          0.015135733888833776\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4101769910379687,\n        \"min\": 0.5671106297902077,\n        \"max\": 1.8958361140254576,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          0.8537037536580891\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6904100343183772,\n        \"min\": -3.1190476190476195,\n        \"max\": -0.3478260869565218,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          -1.9019607843137254\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"25%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12697266868470544,\n        \"min\": -0.6086105675146771,\n        \"max\": -0.17391304347826095,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          -0.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"50%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.01751626069110358,\n        \"min\": -0.015873015873015872,\n        \"max\": 0.04999999999999992,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          0.04999999999999992\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"75%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12379365475695975,\n        \"min\": 0.3815557729941292,\n        \"max\": 0.7717391304347826,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          0.5686274509803921\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.144739392961665,\n        \"min\": 0.9825349301397206,\n        \"max\": 12.283059051306873,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          2.9313725490196076\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":61}],"source":["X_test_norm.describe().transpose()"]},{"cell_type":"markdown","metadata":{"id":"DTuw1Gx_fr_W"},"source":["## Feature Importance"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"G0R4cdUvhAZG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020383858,"user_tz":-60,"elapsed":16,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"05747788-6886-4450-a4f7-4bfd4acbb3ae"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['id', 'N_Days', 'Age', 'Bilirubin', 'Cholesterol', 'Albumin', 'Copper',\n","       'Alk_Phos', 'SGOT', 'Tryglicerides', 'Platelets', 'Prothrombin'],\n","      dtype='object')"]},"metadata":{},"execution_count":62}],"source":["X_train.columns"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"01KhgBjjgD9T"},"outputs":[],"source":["from sklearn.ensemble import RandomForestRegressor\n","from sklearn.metrics import mean_squared_error\n","\n","# X & y contains the feature and target variables from the train data respectively\n","\n","X = X_train_norm[['N_Days', 'Age', 'Bilirubin', 'Cholesterol', 'Albumin', 'Copper',\n","       'Alk_Phos', 'SGOT', 'Tryglicerides', 'Platelets', 'Prothrombin',\n","       ]]\n","\n","      #  , 'Edema_N', 'Edema_S', 'Edema_Y', 'Drug_encoded', 'Sex_encoded',\n","      #  'Ascites_encoded',  'Spiders_encoded']]\n","\n","y = y_train[['Status_encoded']]\n","\n","# Split the training set into training and testing sets for feature importance check\n","X_train_fi, X_test_fi, y_train_fi, y_test_fi = train_test_split(X, y, test_size=0.2, random_state=42)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"m2pGETqBkErz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020388933,"user_tz":-60,"elapsed":4261,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"1dd32563-7e17-416f-db10-598b59dd3378"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-64-da1d538c1bd0>:3: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  feature_imp_model.fit(X_train_fi, y_train_fi)\n"]}],"source":["# Train Random Forest model\n","feature_imp_model = RandomForestRegressor(n_estimators=100, random_state=42)\n","feature_imp_model.fit(X_train_fi, y_train_fi)\n","\n","# Get feature importances\n","feature_importances = feature_imp_model.feature_importances_\n","\n","# Create a DataFrame with feature names and their importance scores\n","feature_importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': feature_importances})\n","\n","# Sort features by importance in descending order\n","feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"E9McSBNUlVAG","colab":{"base_uri":"https://localhost:8080/","height":612},"executionInfo":{"status":"ok","timestamp":1715020390012,"user_tz":-60,"elapsed":1093,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"562f05ac-e5a7-474d-9b6c-02e67e9ca2f4"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["          Feature  Importance\n","2       Bilirubin    0.346246\n","0          N_Days    0.140897\n","10    Prothrombin    0.072215\n","1             Age    0.063915\n","5          Copper    0.060902\n","9       Platelets    0.057067\n","6        Alk_Phos    0.054025\n","3     Cholesterol    0.053096\n","4         Albumin    0.052689\n","7            SGOT    0.052435\n","8   Tryglicerides    0.046514\n"]}],"source":["# Sort the feature importance DataFrame in descending order of importance\n","feature_importance_df_sorted = feature_importance_df.sort_values(by='Importance', ascending=True)\n","\n","# Plot the feature importances\n","plt.figure(figsize=(10, 6))\n","plt.barh(feature_importance_df_sorted['Feature'], feature_importance_df_sorted['Importance'])\n","plt.xlabel('Feature Importance')\n","plt.ylabel('Feature')\n","plt.title('Essential Parameters for Cirrhosis Outcomes Prediction')\n","plt.show()\n","\n","# Display the sorted feature importance DataFrame\n","print(feature_importance_df)\n","\n"]},{"cell_type":"markdown","metadata":{"id":"dspqTkHioLIu"},"source":["#Model Training"]},{"cell_type":"markdown","metadata":{"id":"zim3UecmwZnj"},"source":["* Naive Bayes (NB)\n","* K-nearest Neighbour (KNN)\n","* Decision Tree (DT)\n","* Random Forest (RF)\n","* Support Vector Machine (SVM)\n","* Logistic Regression (LR) Adaptive Boosting (AdaBoost)\n","* Extreme Gradient Boosting (XGBoost)\n","* Artificial Neural Network (ANN)"]},{"cell_type":"markdown","metadata":{"id":"8tIWT1-wx9m7"},"source":["* Classification Metrics:\n","\n","*  Accuracy: The proportion of correctly classified instances among all instances.\n","* Precision: The ratio of correctly predicted positive observations to the total predicted positives. It indicates the accuracy of positive predictions.\n","* Recall (Sensitivity): The ratio of correctly predicted positive observations to the total actual positives. It measures the ability of the classifier to find all the positive samples.\n","* Specificity: The ratio of correctly predicted negative observations to the total actual negatives. It measures the ability of the classifier to find all the negative samples.\n","* F1-score: The harmonic mean of precision and recall. It provides a single score that balances both precision and recall.\n","* ROC Curve and AUC: Receiver Operating Characteristic (ROC) curve is a graphical plot that illustrates the diagnostic ability of a binary classifier system as its discrimination threshold is varied. Area Under the ROC Curve (AUC) represents the degree of separability between classes.\n","* Confusion Matrix: A table summarizing the performance of a classification algorithm, displaying counts of true positive, true negative, false positive, and false negative predictions."]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pzIXMQZq_ya5"},"outputs":[],"source":["# Importing Naive Bayes (NB)\n","from sklearn.naive_bayes import BernoulliNB\n","\n","# Importing K-nearest Neighbour (KNN)\n","from sklearn.neighbors import KNeighborsClassifier\n","\n","# Importing Decision Tree (DT)\n","from sklearn.tree import DecisionTreeClassifier\n","\n","# Importing Random Forest (RF)\n","from sklearn.ensemble import RandomForestClassifier\n","\n","# Importing Support Vector Machine (SVM)\n","from sklearn.svm import SVC\n","\n","# Importing Logistic Regression (LR)\n","from sklearn.linear_model import LogisticRegression\n","\n","# Importing Adaptive Boosting (AdaBoost)\n","from sklearn.ensemble import AdaBoostClassifier\n","\n","# Importing Extreme Gradient Boosting (XGBoost)\n","from xgboost import XGBClassifier"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"lYCysxBpsUhP"},"outputs":[],"source":["from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n","from sklearn.metrics import confusion_matrix, classification_report"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dGR7oHVz0RxS"},"outputs":[],"source":["from sklearn.model_selection import GridSearchCV"]},{"cell_type":"markdown","metadata":{"id":"6QR9tbn5o7jR"},"source":["##All features"]},{"cell_type":"markdown","metadata":{"id":"tUd8N3iozssx"},"source":["###Random Forest (RF)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"L2DYW2sWDPDT","colab":{"base_uri":"https://localhost:8080/","height":130},"executionInfo":{"status":"ok","timestamp":1715020392439,"user_tz":-60,"elapsed":2106,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"2253af9f-cc6a-4aa0-b492-d2b2d9a9d8f1"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-69-0fd070780e84>:3: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf.fit(X_train_norm, y_train)\n"]},{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(random_state=42)"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":69}],"source":["# Model Training\n","rf = RandomForestClassifier(n_estimators=100, random_state=42)\n","rf.fit(X_train_norm, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xe705Tm6qXLQ"},"outputs":[],"source":["#Performance Evaluation on the Training Set\n","rf_train_pred = rf.predict(X_train_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7BTgCa-boOS5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020392811,"user_tz":-60,"elapsed":374,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"e132cad6-d5d2-489f-9e33-63a0fc5065da"},"outputs":[{"output_type":"stream","name":"stdout","text":["Random Forest Evaluation (train set):\n","Accuracy: 1.0\n","Precision: 1.0\n","Recall: 1.0\n","F1-score: 1.0\n","Confusion Matrix:\n"," [[3459    0    0]\n"," [   0  199    0]\n"," [   0    0 1875]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00      3459\n","           1       1.00      1.00      1.00       199\n","           2       1.00      1.00      1.00      1875\n","\n","    accuracy                           1.00      5533\n","   macro avg       1.00      1.00      1.00      5533\n","weighted avg       1.00      1.00      1.00      5533\n","\n"]}],"source":["print(\"Random Forest Evaluation (train set):\")\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_train, rf_train_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_train, rf_train_pred, average='weighted')\n","recall = recall_score(y_train, rf_train_pred, average='weighted')\n","f1 = f1_score(y_train, rf_train_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_train, rf_train_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_train, rf_train_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RdbMx0bvlVuK"},"outputs":[],"source":["#Performance Evaluation on the validation Set\n","rf_val_pred = rf.predict(X_val_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9e9zlWGflVpT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020392811,"user_tz":-60,"elapsed":5,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"3a7785f7-f03b-4e52-d5c6-dff79930359e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Random Forest Evaluation (validation set):\n","Accuracy: 0.8330522765598651\n","Precision: 0.8261708819591371\n","Recall: 0.8330522765598651\n","F1-score: 0.8208531144716016\n","Confusion Matrix:\n"," [[707   1  54]\n"," [ 19   4  17]\n"," [106   1 277]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.85      0.93      0.89       762\n","           1       0.67      0.10      0.17        40\n","           2       0.80      0.72      0.76       384\n","\n","    accuracy                           0.83      1186\n","   macro avg       0.77      0.58      0.61      1186\n","weighted avg       0.83      0.83      0.82      1186\n","\n"]}],"source":["print(\"Random Forest Evaluation (validation set):\")\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_val, rf_val_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_val, rf_val_pred, average='weighted')\n","recall = recall_score(y_val, rf_val_pred, average='weighted')\n","f1 = f1_score(y_val, rf_val_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_val, rf_val_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_val, rf_val_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"markdown","metadata":{"id":"E8Ry61m9FaVp"},"source":["####Hyperparameter tuning"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"S7KT16DDlVn2"},"outputs":[],"source":["#Getting the hyperparameters\n","\n","\n","# param_grid = {\n","#     'n_estimators': [50, 100, 150, 200],\n","#     'max_depth': [None, 10, 20, 30],\n","#     'min_samples_split': [2, 5, 10, 15],\n","#     'min_samples_leaf': [1, 2, 4, 8]\n","# }\n","\n","# # # Perform Grid Search to find the best hyperparameters\n","# grid_search = GridSearchCV(estimator=rf, param_grid=param_grid, scoring='neg_mean_squared_error', cv=3)\n","# grid_search.fit(X_train_norm, y_train)\n","\n","# # Print the best hyperparameters\n","# print(\"Best Hyperparameters:\", grid_search.best_params_)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sgbjxT0Z7hE1","colab":{"base_uri":"https://localhost:8080/","height":148},"executionInfo":{"status":"ok","timestamp":1715020395248,"user_tz":-60,"elapsed":2439,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"2e5972ed-6061-4cf0-a713-9519eb0632d1"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-75-0b1b45fca8e3>:6: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  rf_best.fit(X_train_norm, y_train)\n"]},{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(max_depth=20, min_samples_leaf=2, min_samples_split=5,\n","                       random_state=42)"],"text/html":["<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(max_depth=20, min_samples_leaf=2, min_samples_split=5,\n","                       random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(max_depth=20, min_samples_leaf=2, min_samples_split=5,\n","                       random_state=42)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":75}],"source":["best_hyperparameters = {'max_depth': 20, 'min_samples_leaf': 2,\n","                        'min_samples_split': 5, 'n_estimators': 100}\n","\n","# Retraining with best hyperparameters\n","rf_best = RandomForestClassifier(random_state=42, **best_hyperparameters)\n","rf_best.fit(X_train_norm, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VfAOou4UlVly"},"outputs":[],"source":["#Performance Evaluation on the Training Set\n","rf_val_best_pred = rf_best.predict(X_val_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rzfDCawxlVi-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020395601,"user_tz":-60,"elapsed":355,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"59027934-6e53-4757-cb19-707002b2cc1e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Hyperparameter Tuned Random Forest Model Evaluation (validation set):\n","Accuracy: 0.8338954468802698\n","Precision: 0.821870633963162\n","Recall: 0.8338954468802698\n","F1-score: 0.8195667772571634\n","Confusion Matrix:\n"," [[711   1  50]\n"," [ 21   2  17]\n"," [107   1 276]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.85      0.93      0.89       762\n","           1       0.50      0.05      0.09        40\n","           2       0.80      0.72      0.76       384\n","\n","    accuracy                           0.83      1186\n","   macro avg       0.72      0.57      0.58      1186\n","weighted avg       0.82      0.83      0.82      1186\n","\n"]}],"source":["print(\"Hyperparameter Tuned Random Forest Model Evaluation (validation set):\")\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_val, rf_val_best_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_val, rf_val_best_pred, average='weighted')\n","recall = recall_score(y_val, rf_val_best_pred, average='weighted')\n","f1 = f1_score(y_val, rf_val_best_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_val, rf_val_best_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_val, rf_val_best_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EUifAq_hlVhG"},"outputs":[],"source":["# Evaluation on the test set\n","\n","rf_test_pred = rf.predict(X_test_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"i6n0B2mflVer","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020395601,"user_tz":-60,"elapsed":6,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"13b8340b-75e7-4440-a727-9ddefa4b1b2a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Random Forest Model Evaluation (test set):\n","Accuracy: 0.8086003372681282\n","Precision: 0.8120506904992956\n","Recall: 0.8086003372681282\n","F1-score: 0.7961937732443378\n","Confusion Matrix:\n"," [[682   0  62]\n"," [ 20   4  12]\n"," [133   0 273]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.82      0.92      0.86       744\n","           1       1.00      0.11      0.20        36\n","           2       0.79      0.67      0.73       406\n","\n","    accuracy                           0.81      1186\n","   macro avg       0.87      0.57      0.60      1186\n","weighted avg       0.81      0.81      0.80      1186\n","\n"]}],"source":["print(\"Random Forest Model Evaluation (test set):\")\n","\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_test, rf_test_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_test, rf_test_pred, average='weighted')\n","recall = recall_score(y_test, rf_test_pred, average='weighted')\n","f1 = f1_score(y_test, rf_test_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_test, rf_test_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_test, rf_test_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GH4G5_w8lVbz"},"outputs":[],"source":["#using the hyperparameter tuned model\n","\n","rf_test_pred_best = rf_best.predict(X_test_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SmIBqjXAlVZm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020395869,"user_tz":-60,"elapsed":271,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"5051a166-656b-4898-ae41-ea679e060c4e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Hyperparameter Tuned Random Forest Model Evaluation (test set):\n","Accuracy: 0.8086003372681282\n","Precision: 0.8118446487182598\n","Recall: 0.8086003372681282\n","F1-score: 0.7963124428768859\n","Confusion Matrix:\n"," [[675   0  69]\n"," [ 21   3  12]\n"," [125   0 281]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.82      0.91      0.86       744\n","           1       1.00      0.08      0.15        36\n","           2       0.78      0.69      0.73       406\n","\n","    accuracy                           0.81      1186\n","   macro avg       0.87      0.56      0.58      1186\n","weighted avg       0.81      0.81      0.80      1186\n","\n"]}],"source":["print(\"Hyperparameter Tuned Random Forest Model Evaluation (test set):\")\n","\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_test, rf_test_pred_best)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_test, rf_test_pred_best, average='weighted')\n","recall = recall_score(y_test, rf_test_pred_best, average='weighted')\n","f1 = f1_score(y_test, rf_test_pred_best, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_test, rf_test_pred_best)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_test, rf_test_pred_best)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"markdown","metadata":{"id":"Clcka9K9FhkM"},"source":["###Decision Tree"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KgxhZpkxlVYJ","colab":{"base_uri":"https://localhost:8080/","height":74},"executionInfo":{"status":"ok","timestamp":1715020396229,"user_tz":-60,"elapsed":365,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"7dff551a-5b9c-4479-d0db-df00d0f5ecae"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeClassifier(random_state=42)"],"text/html":["<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(random_state=42)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":82}],"source":["dt = DecisionTreeClassifier(random_state=42)\n","dt.fit(X_train_norm, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3HrnL0XflVUn"},"outputs":[],"source":["#Performance Evaluation on the Training Set\n","dt_train_pred = dt.predict(X_train_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0CeN77jN7XyX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020396230,"user_tz":-60,"elapsed":9,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"1f3172b8-3f80-4772-cda5-71a8a87f8cce"},"outputs":[{"output_type":"stream","name":"stdout","text":["Decision Evaluation (train set):\n","Accuracy: 1.0\n","Precision: 1.0\n","Recall: 1.0\n","F1-score: 1.0\n","Confusion Matrix:\n"," [[3459    0    0]\n"," [   0  199    0]\n"," [   0    0 1875]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00      3459\n","           1       1.00      1.00      1.00       199\n","           2       1.00      1.00      1.00      1875\n","\n","    accuracy                           1.00      5533\n","   macro avg       1.00      1.00      1.00      5533\n","weighted avg       1.00      1.00      1.00      5533\n","\n"]}],"source":["print(\"Decision Evaluation (train set):\")\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_train, dt_train_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_train, dt_train_pred, average='weighted')\n","recall = recall_score(y_train, dt_train_pred, average='weighted')\n","f1 = f1_score(y_train, dt_train_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_train, dt_train_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_train, dt_train_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7upgM8Yw8EMa"},"outputs":[],"source":["#Performance Evaluation on the Val Set\n","dt_val_pred = dt.predict(X_val_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YQNy49_b8N_S","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020396523,"user_tz":-60,"elapsed":7,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"6ef7ddaf-4edf-4eca-b438-8cc3fa46aa64"},"outputs":[{"output_type":"stream","name":"stdout","text":["DT Evaluation (validation set):\n","Accuracy: 0.7335581787521079\n","Precision: 0.7419461658036058\n","Recall: 0.7335581787521079\n","F1-score: 0.7375039641301633\n","Confusion Matrix:\n"," [[611  25 126]\n"," [ 15   8  17]\n"," [114  19 251]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.83      0.80      0.81       762\n","           1       0.15      0.20      0.17        40\n","           2       0.64      0.65      0.65       384\n","\n","    accuracy                           0.73      1186\n","   macro avg       0.54      0.55      0.54      1186\n","weighted avg       0.74      0.73      0.74      1186\n","\n"]}],"source":["print(\"DT Evaluation (validation set):\")\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_val, dt_val_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_val, dt_val_pred, average='weighted')\n","recall = recall_score(y_val, dt_val_pred, average='weighted')\n","f1 = f1_score(y_val, dt_val_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_val, dt_val_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_val, dt_val_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"markdown","metadata":{"id":"Z6PpoKuRBDly"},"source":["####hyp tuning"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8EGAQCTnlVSW"},"outputs":[],"source":["# # Hyperparameter tuning using GridSearchCV\n","# param_grid = {\n","#     'max_depth': [None, 10, 20, 30],\n","#     'min_samples_split': [2, 5, 10],\n","#     'min_samples_leaf': [1, 2, 4],\n","# }\n","\n","# grid_search = GridSearchCV(estimator=dt, param_grid=param_grid, scoring='accuracy', cv=3)\n","# grid_search.fit(X_train_norm, y_train)\n","\n","# print(\"Best Hyperparameters:\", grid_search.best_params_)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VZBI5MfD-VnU","colab":{"base_uri":"https://localhost:8080/","height":92},"executionInfo":{"status":"ok","timestamp":1715020396523,"user_tz":-60,"elapsed":6,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"9accd92c-5c3f-4627-c4fc-7fb5edae05d9"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeClassifier(max_depth=10, min_samples_leaf=2, min_samples_split=10,\n","                       random_state=42)"],"text/html":["<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(max_depth=10, min_samples_leaf=2, min_samples_split=10,\n","                       random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(max_depth=10, min_samples_leaf=2, min_samples_split=10,\n","                       random_state=42)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":88}],"source":["best_hyperparameters_dt = {'max_depth': 10, 'min_samples_leaf': 2,\n","                           'min_samples_split': 10}\n","\n","# Retraining with best hyperparameters\n","dt_best = DecisionTreeClassifier(random_state=42, **best_hyperparameters_dt)\n","dt_best.fit(X_train_norm, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nPddk0Yw-VeR"},"outputs":[],"source":["#Performance Evaluation on the Val Set\n","dt_val_best_pred = dt_best.predict(X_val_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"N-xkQRIzlVQV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020396778,"user_tz":-60,"elapsed":10,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"7a649d63-62fe-47aa-a14e-9e827c5e479b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Hyperparameter Tuned Decision Tree Model Evaluation (validation set):\n","Accuracy: 0.7807757166947723\n","Precision: 0.7684476741528417\n","Recall: 0.7807757166947723\n","F1-score: 0.772935343021871\n","Confusion Matrix:\n"," [[672   7  83]\n"," [ 19   5  16]\n"," [125  10 249]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.82      0.88      0.85       762\n","           1       0.23      0.12      0.16        40\n","           2       0.72      0.65      0.68       384\n","\n","    accuracy                           0.78      1186\n","   macro avg       0.59      0.55      0.56      1186\n","weighted avg       0.77      0.78      0.77      1186\n","\n"]}],"source":["print(\"Hyperparameter Tuned Decision Tree Model Evaluation (validation set):\")\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_val, dt_val_best_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_val, dt_val_best_pred, average='weighted')\n","recall = recall_score(y_val, dt_val_best_pred, average='weighted')\n","f1 = f1_score(y_val, dt_val_best_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_val, dt_val_best_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_val, dt_val_best_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ijdWKQkzlVIO"},"outputs":[],"source":["# Evaluation on the test set\n","\n","dt_test_pred = dt.predict(X_test_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bXczhuZe_p9y","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020397129,"user_tz":-60,"elapsed":356,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"e1127f39-4866-472b-d228-e3208198939e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Decision Tree Model Evaluation (test set):\n","Accuracy: 0.7175379426644182\n","Precision: 0.7289727303786316\n","Recall: 0.7175379426644182\n","F1-score: 0.7227314518560296\n","Confusion Matrix:\n"," [[582  25 137]\n"," [ 14  11  11]\n"," [126  22 258]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.81      0.78      0.79       744\n","           1       0.19      0.31      0.23        36\n","           2       0.64      0.64      0.64       406\n","\n","    accuracy                           0.72      1186\n","   macro avg       0.54      0.57      0.55      1186\n","weighted avg       0.73      0.72      0.72      1186\n","\n"]}],"source":["print(\"Decision Tree Model Evaluation (test set):\")\n","\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_test, dt_test_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_test, dt_test_pred, average='weighted')\n","recall = recall_score(y_test, dt_test_pred, average='weighted')\n","f1 = f1_score(y_test, dt_test_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_test, dt_test_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_test, dt_test_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-BD5-4bG_p0r"},"outputs":[],"source":["#using the hyperparameter tuned model\n","\n","dt_test_pred_best = dt_best.predict(X_test_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dd8NNAhN_prr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020397129,"user_tz":-60,"elapsed":8,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"54db5374-e245-478c-d811-e2c94dbdfd58"},"outputs":[{"output_type":"stream","name":"stdout","text":["Hyperparameter Tuned Decision Tree Model Evaluation (test set):\n","Accuracy: 0.7571669477234402\n","Precision: 0.7462526485306374\n","Recall: 0.7571669477234402\n","F1-score: 0.749394178086453\n","Confusion Matrix:\n"," [[645   4  95]\n"," [ 20   5  11]\n"," [145  13 248]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.80      0.87      0.83       744\n","           1       0.23      0.14      0.17        36\n","           2       0.70      0.61      0.65       406\n","\n","    accuracy                           0.76      1186\n","   macro avg       0.57      0.54      0.55      1186\n","weighted avg       0.75      0.76      0.75      1186\n","\n"]}],"source":["print(\"Hyperparameter Tuned Decision Tree Model Evaluation (test set):\")\n","\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_test, dt_test_pred_best)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_test, dt_test_pred_best, average='weighted')\n","recall = recall_score(y_test, dt_test_pred_best, average='weighted')\n","f1 = f1_score(y_test, dt_test_pred_best, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_test, dt_test_pred_best)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_test, dt_test_pred_best)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"markdown","metadata":{"id":"NX1k6jbMA3We"},"source":["## Naive Bayes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CpZoBHuR_piv","colab":{"base_uri":"https://localhost:8080/","height":130},"executionInfo":{"status":"ok","timestamp":1715020397129,"user_tz":-60,"elapsed":6,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"1bb1daf3-7371-4247-a9b1-b551be0696ce"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"]},{"output_type":"execute_result","data":{"text/plain":["BernoulliNB()"],"text/html":["<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>BernoulliNB()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">BernoulliNB</label><div class=\"sk-toggleable__content\"><pre>BernoulliNB()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":95}],"source":["\n","from sklearn.naive_bayes import BernoulliNB\n","nb = BernoulliNB()\n","# nb = GaussianNB()\n","nb.fit(X_train_norm, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JdcKrKOY_pZX"},"outputs":[],"source":["#Performance Evaluation on the Training Set\n","nb_train_pred = nb.predict(X_train_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ybmkcJ18lVFF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020397333,"user_tz":-60,"elapsed":9,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"63a825ad-a297-4e1e-e014-b21a1f84268d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Naive Bayes Evaluation (train set):\n","Accuracy: 0.7655882884511115\n","Precision: 0.7572253333829315\n","Recall: 0.7655882884511115\n","F1-score: 0.7567831722752653\n","Confusion Matrix:\n"," [[2848    9  602]\n"," [  55    8  136]\n"," [ 486    9 1380]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.84      0.82      0.83      3459\n","           1       0.31      0.04      0.07       199\n","           2       0.65      0.74      0.69      1875\n","\n","    accuracy                           0.77      5533\n","   macro avg       0.60      0.53      0.53      5533\n","weighted avg       0.76      0.77      0.76      5533\n","\n"]}],"source":["print(\"Naive Bayes Evaluation (train set):\")\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_train, nb_train_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_train, nb_train_pred, average='weighted')\n","recall = recall_score(y_train, nb_train_pred, average='weighted')\n","f1 = f1_score(y_train, nb_train_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_train, nb_train_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_train, nb_train_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1HWxbMA2BwKw"},"outputs":[],"source":["#Performance Evaluation on the validation Set\n","nb_val_pred = nb.predict(X_val_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JhNfFsWOBv9l","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020397600,"user_tz":-60,"elapsed":271,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"1ff7d295-8f40-40e8-99d0-7b38547b9cb5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Naive Bayes Evaluation (validation set):\n","Accuracy: 0.7647554806070826\n","Precision: 0.7563418142439438\n","Recall: 0.7647554806070826\n","F1-score: 0.7593769357036656\n","Confusion Matrix:\n"," [[628   8 126]\n"," [ 12   1  27]\n"," [100   6 278]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.85      0.82      0.84       762\n","           1       0.07      0.03      0.04        40\n","           2       0.65      0.72      0.68       384\n","\n","    accuracy                           0.76      1186\n","   macro avg       0.52      0.52      0.52      1186\n","weighted avg       0.76      0.76      0.76      1186\n","\n"]}],"source":["print(\"Naive Bayes Evaluation (validation set):\")\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_val, nb_val_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_val, nb_val_pred, average='weighted')\n","recall = recall_score(y_val, nb_val_pred, average='weighted')\n","f1 = f1_score(y_val, nb_val_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_val, nb_val_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_val, nb_val_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"markdown","metadata":{"id":"eF4Bp_kteeiV"},"source":["hyper param"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MSDb8N8Pes79","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020399758,"user_tz":-60,"elapsed":2160,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"98feaf48-5026-4b05-a9c1-08b999f5e6dd"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"]},{"output_type":"stream","name":"stdout","text":["Best Hyperparameters: {'alpha': 0.1, 'binarize': 0.5}\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"]}],"source":["param_grid = {\n","    'alpha': [0.1, 0.5, 1.0, 2.0],\n","    'binarize': [0.0, 0.5, 1.0]\n","}\n","\n","# Create the GridSearchCV object\n","grid_search = GridSearchCV(estimator=nb, param_grid=param_grid, cv=5, scoring='accuracy')\n","\n","# Perform grid search on the training data\n","grid_search.fit(X_train_norm, y_train)\n","\n","# Print the best hyperparameters\n","print(\"Best Hyperparameters:\", grid_search.best_params_)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5AZyB_gCvEKx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020399758,"user_tz":-60,"elapsed":19,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"a783bd5f-2561-4371-888f-178458200815"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'alpha': 0.1, 'binarize': 0.5}"]},"metadata":{},"execution_count":101}],"source":[" grid_search.best_params_"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ynyTJtEGvIMx","colab":{"base_uri":"https://localhost:8080/","height":74},"executionInfo":{"status":"ok","timestamp":1715020399758,"user_tz":-60,"elapsed":12,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"2f4ac4d7-3d5e-4307-95cd-ab868138a821"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["BernoulliNB(alpha=0.1, binarize=0.5)"],"text/html":["<style>#sk-container-id-6 {color: black;background-color: white;}#sk-container-id-6 pre{padding: 0;}#sk-container-id-6 div.sk-toggleable {background-color: white;}#sk-container-id-6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-6 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-6 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-6 div.sk-item {position: relative;z-index: 1;}#sk-container-id-6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-6 div.sk-item::before, #sk-container-id-6 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-6 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-6 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-6 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-6 div.sk-label-container {text-align: center;}#sk-container-id-6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-6 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>BernoulliNB(alpha=0.1, binarize=0.5)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" checked><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">BernoulliNB</label><div class=\"sk-toggleable__content\"><pre>BernoulliNB(alpha=0.1, binarize=0.5)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":102}],"source":["grid_search.best_estimator_"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WhFuaMUqw5qf","colab":{"base_uri":"https://localhost:8080/","height":130},"executionInfo":{"status":"ok","timestamp":1715020399758,"user_tz":-60,"elapsed":11,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"5655885e-ad77-47cd-c5db-0ae655d5a6aa"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"]},{"output_type":"execute_result","data":{"text/plain":["BernoulliNB(alpha=0.1, binarize=0.5)"],"text/html":["<style>#sk-container-id-7 {color: black;background-color: white;}#sk-container-id-7 pre{padding: 0;}#sk-container-id-7 div.sk-toggleable {background-color: white;}#sk-container-id-7 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-7 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-7 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-7 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-7 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-7 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-7 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-7 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-7 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-7 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-7 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-7 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-7 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-7 div.sk-item {position: relative;z-index: 1;}#sk-container-id-7 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-7 div.sk-item::before, #sk-container-id-7 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-7 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-7 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-7 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-7 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-7 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-7 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-7 div.sk-label-container {text-align: center;}#sk-container-id-7 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-7 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-7\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>BernoulliNB(alpha=0.1, binarize=0.5)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" checked><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">BernoulliNB</label><div class=\"sk-toggleable__content\"><pre>BernoulliNB(alpha=0.1, binarize=0.5)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":103}],"source":["nb_best = grid_search.best_estimator_\n","\n","nb_best.fit(X_train_norm, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oblxqH5Ix_tu"},"outputs":[],"source":["# Evaluation on the test set\n","\n","nb_best_val_pred = nb.predict(X_val_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gNMqabMUyXPM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020400166,"user_tz":-60,"elapsed":415,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"b66e0d23-ed79-48fb-9dce-361696efdec8"},"outputs":[{"output_type":"stream","name":"stdout","text":["HPT Naive Bayes Evaluation (validation set):\n","Accuracy: 0.7647554806070826\n","Precision: 0.7563418142439438\n","Recall: 0.7647554806070826\n","F1-score: 0.7593769357036656\n","Confusion Matrix:\n"," [[628   8 126]\n"," [ 12   1  27]\n"," [100   6 278]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.85      0.82      0.84       762\n","           1       0.07      0.03      0.04        40\n","           2       0.65      0.72      0.68       384\n","\n","    accuracy                           0.76      1186\n","   macro avg       0.52      0.52      0.52      1186\n","weighted avg       0.76      0.76      0.76      1186\n","\n"]}],"source":["print(\"HPT Naive Bayes Evaluation (validation set):\")\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_val, nb_best_val_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_val, nb_best_val_pred, average='weighted')\n","recall = recall_score(y_val, nb_best_val_pred, average='weighted')\n","f1 = f1_score(y_val, nb_best_val_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_val, nb_best_val_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_val, nb_best_val_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oczKquDiDnFX"},"outputs":[],"source":["# Evaluation on the test set\n","\n","nb_test_pred = nb.predict(X_test_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8Mk5jbsHEKgP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020400167,"user_tz":-60,"elapsed":8,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"982eb403-6a95-48bb-e93e-5b2e10fe30f1"},"outputs":[{"output_type":"stream","name":"stdout","text":["Naive Bayes Model Evaluation (test set):\n","Accuracy: 0.7504215851602024\n","Precision: 0.744467195033675\n","Recall: 0.7504215851602024\n","F1-score: 0.7435030643468734\n","Confusion Matrix:\n"," [[594   1 149]\n"," [ 14   1  21]\n"," [109   2 295]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.83      0.80      0.81       744\n","           1       0.25      0.03      0.05        36\n","           2       0.63      0.73      0.68       406\n","\n","    accuracy                           0.75      1186\n","   macro avg       0.57      0.52      0.51      1186\n","weighted avg       0.74      0.75      0.74      1186\n","\n"]}],"source":["print(\"Naive Bayes Model Evaluation (test set):\")\n","\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_test, nb_test_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_test, nb_test_pred, average='weighted')\n","recall = recall_score(y_test, nb_test_pred, average='weighted')\n","f1 = f1_score(y_test, nb_test_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_test, nb_test_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_test, nb_test_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uDyBiHlCxa-D"},"outputs":[],"source":["nb_best_test_pred = nb_best.predict(X_test_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ehAc0jrKxTaG","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020400437,"user_tz":-60,"elapsed":275,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"210a55d1-e0b9-482a-ba5b-f86d1ca4ba7c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Naive Bayes best model Evaluation (test set):\n","Accuracy: 0.7588532883642496\n","Precision: 0.7318309088033892\n","Recall: 0.7588532883642496\n","F1-score: 0.7440721926776191\n","Confusion Matrix:\n"," [[644   0 100]\n"," [ 16   0  20]\n"," [150   0 256]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.80      0.87      0.83       744\n","           1       0.00      0.00      0.00        36\n","           2       0.68      0.63      0.65       406\n","\n","    accuracy                           0.76      1186\n","   macro avg       0.49      0.50      0.49      1186\n","weighted avg       0.73      0.76      0.74      1186\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}],"source":["print(\"Naive Bayes best model Evaluation (test set):\")\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_test, nb_best_test_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_test, nb_best_test_pred, average='weighted')\n","recall = recall_score(y_test, nb_best_test_pred, average='weighted')\n","f1 = f1_score(y_test, nb_best_test_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_test, nb_best_test_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_test, nb_best_test_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"markdown","metadata":{"id":"hg_XdwkYDkZE"},"source":["## KNN"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Zr-7_gYxBvxL","colab":{"base_uri":"https://localhost:8080/","height":130},"executionInfo":{"status":"ok","timestamp":1715020400437,"user_tz":-60,"elapsed":8,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"cdd4ba94-6c32-4f24-8645-ba83a4ae786e"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:215: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  return self._fit(X, y)\n"]},{"output_type":"execute_result","data":{"text/plain":["KNeighborsClassifier(n_neighbors=3)"],"text/html":["<style>#sk-container-id-8 {color: black;background-color: white;}#sk-container-id-8 pre{padding: 0;}#sk-container-id-8 div.sk-toggleable {background-color: white;}#sk-container-id-8 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-8 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-8 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-8 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-8 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-8 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-8 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-8 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-8 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-8 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-8 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-8 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-8 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-8 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-8 div.sk-item {position: relative;z-index: 1;}#sk-container-id-8 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-8 div.sk-item::before, #sk-container-id-8 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-8 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-8 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-8 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-8 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-8 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-8 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-8 div.sk-label-container {text-align: center;}#sk-container-id-8 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-8 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-8\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" checked><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=3)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":110}],"source":["knn = KNeighborsClassifier(n_neighbors=3)  # Example: Using 5 neighbors, you can adjust this parameter\n","knn.fit(X_train_norm, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1aX27Gi4DhHx"},"outputs":[],"source":["#Performance Evaluation on the Training Set\n","knn_train_pred = knn.predict(X_train_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Uuvfrpv4Dg04","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020402273,"user_tz":-60,"elapsed":312,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"39b9f97e-413a-48ab-b2af-a51b039ef30d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Random Forest Evaluation (train set):\n","Accuracy: 0.8653533345382252\n","Precision: 0.863862092267489\n","Recall: 0.8653533345382252\n","F1-score: 0.8590050406753497\n","Confusion Matrix:\n"," [[3271   11  177]\n"," [ 107   63   29]\n"," [ 413    8 1454]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.86      0.95      0.90      3459\n","           1       0.77      0.32      0.45       199\n","           2       0.88      0.78      0.82      1875\n","\n","    accuracy                           0.87      5533\n","   macro avg       0.84      0.68      0.72      5533\n","weighted avg       0.86      0.87      0.86      5533\n","\n"]}],"source":["print(\"Random Forest Evaluation (train set):\")\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_train, knn_train_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_train, knn_train_pred, average='weighted')\n","recall = recall_score(y_train, knn_train_pred, average='weighted')\n","f1 = f1_score(y_train, knn_train_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_train, knn_train_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_train, knn_train_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kkHRAW2TVnUD"},"outputs":[],"source":["# n = 5\n","# print(\"Precision:\", precision)\n","# print(\"Recall:\", recall)\n","# print(\"F1-score:\", f1)\n","\n","# # # Generate confusion matrix\n","# conf_matrix = confusion_matrix(y_train, knn_train_pred)\n","# print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # # Generate classification report\n","# class_report = classification_report(y_train, knn_train_pred)\n","\n","# Random Forest Evaluation (train set):\n","# Accuracy: 0.8411350081330201\n","# Precision: 0.8384070813560776\n","# Recall: 0.8411350081330201\n","# F1-score: 0.8311129192088266\n","# Confusion Matrix:\n","#  [[3312    5  175]\n","#  [ 110   39   36]\n","#  [ 537   16 1303]]\n","# Classification Report:\n","#                precision    recall  f1-score   support\n","\n","#            0       0.84      0.95      0.89      3492\n","#            1       0.65      0.21      0.32       185\n","#            2       0.86      0.70      0.77      1856\n","\n","#     accuracy                           0.84      5533\n","#    macro avg       0.78      0.62      0.66      5533\n","# weighted avg       0.84      0.84      0.83      5533"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7YUvB4klDge7"},"outputs":[],"source":["#Performance Evaluation on the validation Set\n","knn_val_pred = knn.predict(X_val_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"c193W0TSVLCn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020402963,"user_tz":-60,"elapsed":368,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"5d8ba96f-2cc5-4428-d73c-169ce267eebc"},"outputs":[{"output_type":"stream","name":"stdout","text":["KNN Evaluation (validation set):\n","Accuracy: 0.7807757166947723\n","Precision: 0.7698297713572896\n","Recall: 0.7807757166947723\n","F1-score: 0.769125406346783\n","Confusion Matrix:\n"," [[694   6  62]\n"," [ 24   6  10]\n"," [147  11 226]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.80      0.91      0.85       762\n","           1       0.26      0.15      0.19        40\n","           2       0.76      0.59      0.66       384\n","\n","    accuracy                           0.78      1186\n","   macro avg       0.61      0.55      0.57      1186\n","weighted avg       0.77      0.78      0.77      1186\n","\n"]}],"source":["print(\"KNN Evaluation (validation set):\")\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_val, knn_val_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_val, knn_val_pred, average='weighted')\n","recall = recall_score(y_val, knn_val_pred, average='weighted')\n","f1 = f1_score(y_val, knn_val_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_val, knn_val_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_val, knn_val_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"markdown","metadata":{"id":"L1vYhDZAX83O"},"source":["###Hyper param"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ub_H4k89VKzt"},"outputs":[],"source":["# # Define the parameter grid\n","# param_grid = {'n_neighbors': range(1, 21)}  # Example: Search for n_neighbors from 1 to 20\n","\n","# # Perform grid search with 5-fold cross-validation\n","# grid_search = GridSearchCV(knn, param_grid, cv=5, scoring='accuracy')\n","# grid_search.fit(X_train_norm, y_train)\n","\n","# # Print the best hyperparameters\n","# print(\"Best Hyperparameters:\", grid_search.best_params_)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OkPlwCzTVKoj","colab":{"base_uri":"https://localhost:8080/","height":130},"executionInfo":{"status":"ok","timestamp":1715020402964,"user_tz":-60,"elapsed":8,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"d60c1bc1-cc9b-4176-ab3e-0c17ee10010a"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/neighbors/_classification.py:215: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  return self._fit(X, y)\n"]},{"output_type":"execute_result","data":{"text/plain":["KNeighborsClassifier(n_neighbors=19)"],"text/html":["<style>#sk-container-id-9 {color: black;background-color: white;}#sk-container-id-9 pre{padding: 0;}#sk-container-id-9 div.sk-toggleable {background-color: white;}#sk-container-id-9 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-9 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-9 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-9 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-9 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-9 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-9 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-9 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-9 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-9 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-9 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-9 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-9 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-9 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-9 div.sk-item {position: relative;z-index: 1;}#sk-container-id-9 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-9 div.sk-item::before, #sk-container-id-9 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-9 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-9 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-9 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-9 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-9 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-9 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-9 div.sk-label-container {text-align: center;}#sk-container-id-9 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-9 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-9\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier(n_neighbors=19)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" checked><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier(n_neighbors=19)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":117}],"source":["best_hyperparameters_knn = {'n_neighbors': 19}\n","\n","knn_best = KNeighborsClassifier(n_neighbors = 19)\n","\n","# Train the KNN classifier on the entire training set\n","knn_best.fit(X_train_norm, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qTZviUWZVKdm"},"outputs":[],"source":["#Performance Evaluation on the Training Set\n","knn_best_train_pred = knn_best.predict(X_train_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wYt34CZdVFGF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020406553,"user_tz":-60,"elapsed":495,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"4a27b744-ab8a-465d-cf33-8167e921656e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Hyperparameter Tuned KNN Evaluation (train set):\n","Accuracy: 0.8010121091632026\n","Precision: 0.786892340621384\n","Recall: 0.8010121091632026\n","F1-score: 0.781326835890998\n","Confusion Matrix:\n"," [[3223    3  233]\n"," [ 130    2   67]\n"," [ 668    0 1207]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.80      0.93      0.86      3459\n","           1       0.40      0.01      0.02       199\n","           2       0.80      0.64      0.71      1875\n","\n","    accuracy                           0.80      5533\n","   macro avg       0.67      0.53      0.53      5533\n","weighted avg       0.79      0.80      0.78      5533\n","\n"]}],"source":["print(\"Hyperparameter Tuned KNN Evaluation (train set):\")\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_train, knn_best_train_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_train, knn_best_train_pred, average='weighted')\n","recall = recall_score(y_train, knn_best_train_pred, average='weighted')\n","f1 = f1_score(y_train, knn_best_train_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_train, knn_best_train_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_train, knn_best_train_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9i2QLJZ9aMhv"},"outputs":[],"source":["#Performance Evaluation on the Training Set\n","knn_val_best_pred = knn_best.predict(X_val_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"sdx_QYB4adjH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020407556,"user_tz":-60,"elapsed":364,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"881dc5f8-9ad0-4881-fa4b-4235d4f1b32c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Hyperparameter Tuned KNN Model Evaluation (validation set):\n","Accuracy: 0.7917369308600337\n","Precision: 0.7626492080812088\n","Recall: 0.7917369308600337\n","F1-score: 0.7714782937336947\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]},{"output_type":"stream","name":"stdout","text":["Confusion Matrix:\n"," [[704   0  58]\n"," [ 27   0  13]\n"," [149   0 235]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.80      0.92      0.86       762\n","           1       0.00      0.00      0.00        40\n","           2       0.77      0.61      0.68       384\n","\n","    accuracy                           0.79      1186\n","   macro avg       0.52      0.51      0.51      1186\n","weighted avg       0.76      0.79      0.77      1186\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}],"source":["print(\"Hyperparameter Tuned KNN Model Evaluation (validation set):\")\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_val, knn_val_best_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_val, knn_val_best_pred, average='weighted')\n","recall = recall_score(y_val, knn_val_best_pred, average='weighted')\n","f1 = f1_score(y_val, knn_val_best_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_val, knn_val_best_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_val, knn_val_best_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5lU_1Zt6a7xf"},"outputs":[],"source":["# Evaluation on the test set\n","\n","knn_test_pred = knn.predict(X_test_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BOkeSOFva7mu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020408418,"user_tz":-60,"elapsed":338,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"24d9802c-a840-4079-dfd8-1075f695d1f7"},"outputs":[{"output_type":"stream","name":"stdout","text":["KNN Model Evaluation (test set):\n","Accuracy: 0.7546374367622259\n","Precision: 0.7414069534746651\n","Recall: 0.7546374367622259\n","F1-score: 0.7430408670634852\n","Confusion Matrix:\n"," [[655   5  84]\n"," [ 21   4  11]\n"," [163   7 236]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.78      0.88      0.83       744\n","           1       0.25      0.11      0.15        36\n","           2       0.71      0.58      0.64       406\n","\n","    accuracy                           0.75      1186\n","   macro avg       0.58      0.52      0.54      1186\n","weighted avg       0.74      0.75      0.74      1186\n","\n"]}],"source":["print(\"KNN Model Evaluation (test set):\")\n","\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_test, knn_test_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_test, knn_test_pred, average='weighted')\n","recall = recall_score(y_test, knn_test_pred, average='weighted')\n","f1 = f1_score(y_test, knn_test_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_test, knn_test_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_test, knn_test_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"royYOWK6a7bm"},"outputs":[],"source":["#using the hyperparameter tuned model\n","\n","knn_test_pred_best = knn_best.predict(X_test_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aRt5I1doa7Q4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020409177,"user_tz":-60,"elapsed":6,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"5c89da9b-440e-4edd-8ee8-4a165d12037e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Hyperparameter Tuned KNN Model Evaluation (test set):\n","Accuracy: 0.7917369308600337\n","Precision: 0.7677113867903147\n","Recall: 0.7917369308600337\n","F1-score: 0.7728337670270573\n","Confusion Matrix:\n"," [[688   0  56]\n"," [ 26   0  10]\n"," [155   0 251]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.79      0.92      0.85       744\n","           1       0.00      0.00      0.00        36\n","           2       0.79      0.62      0.69       406\n","\n","    accuracy                           0.79      1186\n","   macro avg       0.53      0.51      0.52      1186\n","weighted avg       0.77      0.79      0.77      1186\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}],"source":["print(\"Hyperparameter Tuned KNN Model Evaluation (test set):\")\n","\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_test, knn_test_pred_best)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_test, knn_test_pred_best, average='weighted')\n","recall = recall_score(y_test, knn_test_pred_best, average='weighted')\n","f1 = f1_score(y_test, knn_test_pred_best, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_test, knn_test_pred_best)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_test, knn_test_pred_best)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"markdown","metadata":{"id":"U-GC0865b3us"},"source":["##SVM"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fOTYWSMna7F4","colab":{"base_uri":"https://localhost:8080/","height":130},"executionInfo":{"status":"ok","timestamp":1715020416143,"user_tz":-60,"elapsed":6968,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"18873a86-d862-40b0-c061-8085ac29b27c"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"]},{"output_type":"execute_result","data":{"text/plain":["SVC(probability=True, random_state=42)"],"text/html":["<style>#sk-container-id-10 {color: black;background-color: white;}#sk-container-id-10 pre{padding: 0;}#sk-container-id-10 div.sk-toggleable {background-color: white;}#sk-container-id-10 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-10 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-10 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-10 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-10 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-10 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-10 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-10 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-10 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-10 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-10 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-10 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-10 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-10 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-10 div.sk-item {position: relative;z-index: 1;}#sk-container-id-10 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-10 div.sk-item::before, #sk-container-id-10 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-10 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-10 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-10 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-10 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-10 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-10 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-10 div.sk-label-container {text-align: center;}#sk-container-id-10 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-10 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-10\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(probability=True, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" checked><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(probability=True, random_state=42)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":126}],"source":["svm_c = SVC(random_state=42, probability=True)\n","\n","# Train the Support Vector Machine classifier\n","svm_c.fit(X_train_norm, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9E5RCB5qcaZL"},"outputs":[],"source":["#Performance Evaluation on the Training Set\n","svm_c_train_pred = svm_c.predict(X_train_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"x32Q4Uf6caM3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020416996,"user_tz":-60,"elapsed":3,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"7f86817d-a64b-4cd7-ee9a-e986cde0455c"},"outputs":[{"output_type":"stream","name":"stdout","text":["SVM Evaluation (train set):\n","Accuracy: 0.8194469546358214\n","Precision: 0.8246544792997783\n","Recall: 0.8194469546358214\n","F1-score: 0.8023681028761277\n","Confusion Matrix:\n"," [[3210    0  249]\n"," [ 122    5   72]\n"," [ 556    0 1319]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.83      0.93      0.87      3459\n","           1       1.00      0.03      0.05       199\n","           2       0.80      0.70      0.75      1875\n","\n","    accuracy                           0.82      5533\n","   macro avg       0.88      0.55      0.56      5533\n","weighted avg       0.82      0.82      0.80      5533\n","\n"]}],"source":["print(\"SVM Evaluation (train set):\")\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_train, svm_c_train_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_train, svm_c_train_pred, average='weighted')\n","recall = recall_score(y_train, svm_c_train_pred, average='weighted')\n","f1 = f1_score(y_train, svm_c_train_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_train, svm_c_train_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_train, svm_c_train_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"A5HC0g0qc7Kx"},"outputs":[],"source":["#Performance Evaluation on the validation Set\n","svm_c_val_pred = svm_c.predict(X_val_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hD4M9MzMc6yr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020417298,"user_tz":-60,"elapsed":3,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"c93c79fc-2b8a-4ac8-ed6a-69467558f1e4"},"outputs":[{"output_type":"stream","name":"stdout","text":["SVM Evaluation (validation set):\n","Accuracy: 0.8001686340640809\n","Precision: 0.787837700946467\n","Recall: 0.8001686340640809\n","F1-score: 0.7850155660830153\n","Confusion Matrix:\n"," [[695   1  66]\n"," [ 23   2  15]\n"," [131   1 252]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.82      0.91      0.86       762\n","           1       0.50      0.05      0.09        40\n","           2       0.76      0.66      0.70       384\n","\n","    accuracy                           0.80      1186\n","   macro avg       0.69      0.54      0.55      1186\n","weighted avg       0.79      0.80      0.79      1186\n","\n"]}],"source":["print(\"SVM Evaluation (validation set):\")\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_val, svm_c_val_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_val, svm_c_val_pred, average='weighted')\n","recall = recall_score(y_val, svm_c_val_pred, average='weighted')\n","f1 = f1_score(y_val, svm_c_val_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_val, svm_c_val_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_val, svm_c_val_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"markdown","metadata":{"id":"doHbiwwrdZg7"},"source":["##Hyper param"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"n2IEmcGSc6ab"},"outputs":[],"source":["# # Define the parameter grid\n","# param_grid = {\n","#     'C': [0.1, 1, 10],\n","#     'gamma': [1, 0.1, 0.01],\n","#     'kernel': ['rbf', 'linear', 'poly', 'sigmoid']\n","# }\n","\n","# # Perform Grid Search to find the best hyperparameters\n","# grid_search = GridSearchCV(estimator=svm_c, param_grid=param_grid, scoring='accuracy', cv=3)\n","# grid_search.fit(X_train_norm, y_train)\n","\n","# # Print the best hyperparameters\n","# print(\"Best Hyperparameters:\", grid_search.best_params_)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qPq_IYpPcaAR","colab":{"base_uri":"https://localhost:8080/","height":130},"executionInfo":{"status":"ok","timestamp":1715020424877,"user_tz":-60,"elapsed":7581,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"4c36b974-4482-4e34-c6a0-756e12834a61"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"]},{"output_type":"execute_result","data":{"text/plain":["SVC(C=1, gamma=0.1, probability=True, random_state=42)"],"text/html":["<style>#sk-container-id-11 {color: black;background-color: white;}#sk-container-id-11 pre{padding: 0;}#sk-container-id-11 div.sk-toggleable {background-color: white;}#sk-container-id-11 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-11 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-11 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-11 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-11 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-11 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-11 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-11 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-11 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-11 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-11 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-11 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-11 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-11 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-11 div.sk-item {position: relative;z-index: 1;}#sk-container-id-11 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-11 div.sk-item::before, #sk-container-id-11 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-11 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-11 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-11 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-11 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-11 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-11 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-11 div.sk-label-container {text-align: center;}#sk-container-id-11 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-11 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-11\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(C=1, gamma=0.1, probability=True, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" checked><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(C=1, gamma=0.1, probability=True, random_state=42)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":132}],"source":["best_hyperparameters_svm =  {'C': 1, 'gamma': 0.1, 'kernel': 'rbf'}\n","\n","svm_c_best = svm_c.set_params(random_state=42, **best_hyperparameters_svm)\n","\n","# Train the Support Vector Machine classifier\n","svm_c_best.fit(X_train_norm, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_zXzHlufiV6E"},"outputs":[],"source":["#Performance Evaluation on the Train Set\n","svm_c_train_best_pred = svm_c_best.predict(X_train_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ETwlyF_1iVYf"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rlp84QaNcSmx"},"outputs":[],"source":["#Performance Evaluation on the Val Set\n","svm_c_val_best_pred = svm_c_best.predict(X_val_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SH30wC7JcSCt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020426411,"user_tz":-60,"elapsed":3,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"d604bb11-3ba3-4f66-c0e0-c8d6e30ebafb"},"outputs":[{"output_type":"stream","name":"stdout","text":["Hyperparameter Tuned SVM Model Evaluation (validation set):\n","Accuracy: 0.8043844856661045\n","Precision: 0.7951636377631968\n","Recall: 0.8043844856661045\n","F1-score: 0.7903757206124274\n","Confusion Matrix:\n"," [[696   1  65]\n"," [ 21   3  16]\n"," [128   1 255]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.82      0.91      0.87       762\n","           1       0.60      0.07      0.13        40\n","           2       0.76      0.66      0.71       384\n","\n","    accuracy                           0.80      1186\n","   macro avg       0.73      0.55      0.57      1186\n","weighted avg       0.80      0.80      0.79      1186\n","\n"]}],"source":["print(\"Hyperparameter Tuned SVM Model Evaluation (validation set):\")\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_val, svm_c_val_best_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_val, svm_c_val_best_pred, average='weighted')\n","recall = recall_score(y_val, svm_c_val_best_pred, average='weighted')\n","f1 = f1_score(y_val, svm_c_val_best_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_val, svm_c_val_best_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_val, svm_c_val_best_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","source":["#Performance Evaluation on the train Set\n","svm_c_test_pred = svm_c.predict(X_test_norm)"],"metadata":{"id":"J0H2MZv8QLTK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(\" SVM Model Evaluation (test set):\")\n","\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_test, svm_c_test_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_test, svm_c_test_pred, average='weighted')\n","recall = recall_score(y_test, svm_c_test_pred, average='weighted')\n","f1 = f1_score(y_test, svm_c_test_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_test, svm_c_test_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_test, svm_c_test_pred)\n","print(\"Classification Report:\\n\", class_report)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jYKNzBJlQR2-","executionInfo":{"status":"ok","timestamp":1715020426702,"user_tz":-60,"elapsed":7,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"ab14452c-efc4-4408-ab61-c60a5e92f972"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":[" SVM Model Evaluation (test set):\n","Accuracy: 0.7959527824620574\n","Precision: 0.7849735108904585\n","Recall: 0.7959527824620574\n","F1-score: 0.7811330585717615\n","Confusion Matrix:\n"," [[674   0  70]\n"," [ 22   1  13]\n"," [136   1 269]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.81      0.91      0.86       744\n","           1       0.50      0.03      0.05        36\n","           2       0.76      0.66      0.71       406\n","\n","    accuracy                           0.80      1186\n","   macro avg       0.69      0.53      0.54      1186\n","weighted avg       0.78      0.80      0.78      1186\n","\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"J3IMA1QZcRlf"},"outputs":[],"source":["#Performance Evaluation on the train Set\n","svm_c_test_best_pred = svm_c_best.predict(X_test_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rSZrD1I4cRYl","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020426953,"user_tz":-60,"elapsed":16,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"5af2f620-0be8-48b8-d642-2df1939944c7"},"outputs":[{"output_type":"stream","name":"stdout","text":["Hyperparameter Tuned SVM Model Evaluation (test set):\n","Accuracy: 0.7959527824620574\n","Precision: 0.7849735108904585\n","Recall: 0.7959527824620574\n","F1-score: 0.7811330585717615\n","Confusion Matrix:\n"," [[674   0  70]\n"," [ 22   1  13]\n"," [136   1 269]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.81      0.91      0.86       744\n","           1       0.50      0.03      0.05        36\n","           2       0.76      0.66      0.71       406\n","\n","    accuracy                           0.80      1186\n","   macro avg       0.69      0.53      0.54      1186\n","weighted avg       0.78      0.80      0.78      1186\n","\n"]}],"source":["print(\"Hyperparameter Tuned SVM Model Evaluation (test set):\")\n","\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_test, svm_c_test_best_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_test, svm_c_test_best_pred, average='weighted')\n","recall = recall_score(y_test, svm_c_test_best_pred, average='weighted')\n","f1 = f1_score(y_test, svm_c_test_best_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_test, svm_c_test_best_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_test, svm_c_test_best_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"markdown","metadata":{"id":"OKNv1_Latm1Q"},"source":["## LR"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"R5H4aQxzjDbw","colab":{"base_uri":"https://localhost:8080/","height":130},"executionInfo":{"status":"ok","timestamp":1715020426953,"user_tz":-60,"elapsed":15,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"d04d817c-d4e2-4e01-d71b-d0fe9db44cd5"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"]},{"output_type":"execute_result","data":{"text/plain":["LogisticRegression(max_iter=1000, multi_class='multinomial')"],"text/html":["<style>#sk-container-id-12 {color: black;background-color: white;}#sk-container-id-12 pre{padding: 0;}#sk-container-id-12 div.sk-toggleable {background-color: white;}#sk-container-id-12 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-12 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-12 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-12 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-12 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-12 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-12 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-12 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-12 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-12 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-12 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-12 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-12 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-12 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-12 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-12 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-12 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-12 div.sk-item {position: relative;z-index: 1;}#sk-container-id-12 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-12 div.sk-item::before, #sk-container-id-12 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-12 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-12 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-12 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-12 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-12 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-12 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-12 div.sk-label-container {text-align: center;}#sk-container-id-12 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-12 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-12\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=1000, multi_class=&#x27;multinomial&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" checked><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=1000, multi_class=&#x27;multinomial&#x27;)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":140}],"source":["logreg = LogisticRegression(multi_class='multinomial', solver='lbfgs', max_iter=1000)\n","logreg.fit(X_train_norm, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_4qqXoiJjFis"},"outputs":[],"source":["#Performance Evaluation on the Training Set\n","logreg_train_pred = logreg.predict(X_train_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FNOFXgjvjE1p","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020426953,"user_tz":-60,"elapsed":10,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"99386490-0c83-4d57-8d48-e7e5187df62c"},"outputs":[{"output_type":"stream","name":"stdout","text":["LogReg Evaluation (train set):\n","Accuracy: 0.7865534068317368\n","Precision: 0.7746405990456642\n","Recall: 0.7865534068317368\n","F1-score: 0.7665695596266042\n","Confusion Matrix:\n"," [[3175    0  284]\n"," [ 130    1   68]\n"," [ 698    1 1176]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.79      0.92      0.85      3459\n","           1       0.50      0.01      0.01       199\n","           2       0.77      0.63      0.69      1875\n","\n","    accuracy                           0.79      5533\n","   macro avg       0.69      0.52      0.52      5533\n","weighted avg       0.77      0.79      0.77      5533\n","\n"]}],"source":["print(\"LogReg Evaluation (train set):\")\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_train, logreg_train_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_train, logreg_train_pred, average='weighted')\n","recall = recall_score(y_train, logreg_train_pred, average='weighted')\n","f1 = f1_score(y_train, logreg_train_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_train, logreg_train_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_train, logreg_train_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YsY23c1hjDOr"},"outputs":[],"source":["#Performance Evaluation on the validation Set\n","logreg_val_pred = logreg.predict(X_val_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mSWy-DNxjDBP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020427286,"user_tz":-60,"elapsed":339,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"31894011-4331-4843-8321-bda55b3da139"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]},{"output_type":"stream","name":"stdout","text":["LogReg Evaluation (validation set):\n","Accuracy: 0.7934232715008431\n","Precision: 0.7633946392057324\n","Recall: 0.7934232715008431\n","F1-score: 0.7744974413853268\n","Confusion Matrix:\n"," [[698   0  64]\n"," [ 25   0  15]\n"," [141   0 243]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.81      0.92      0.86       762\n","           1       0.00      0.00      0.00        40\n","           2       0.75      0.63      0.69       384\n","\n","    accuracy                           0.79      1186\n","   macro avg       0.52      0.52      0.52      1186\n","weighted avg       0.76      0.79      0.77      1186\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}],"source":["print(\"LogReg Evaluation (validation set):\")\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_val, logreg_val_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_val, logreg_val_pred, average='weighted')\n","recall = recall_score(y_val, logreg_val_pred, average='weighted')\n","f1 = f1_score(y_val, logreg_val_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_val, logreg_val_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_val, logreg_val_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SegXoJu_3lB_"},"outputs":[],"source":["# # Define the hyperparameter grid\n","# param_grid = {\n","#     'C': [0.001, 0.01, 0.1, 1, 10, 100],\n","#     'solver': ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'],\n","#     'max_iter': [100, 200, 300, 400, 500]\n","# }\n","\n","# # Perform grid search with cross-validation\n","# grid_search = GridSearchCV(estimator=logreg, param_grid=param_grid, cv=5, scoring='accuracy')\n","# grid_search.fit(X_train_norm, y_train)\n","\n","# # Print the best hyperparameters\n","# print(\"Best Hyperparameters:\", grid_search.best_params_)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"20RHQQwQjCz1","colab":{"base_uri":"https://localhost:8080/","height":130},"executionInfo":{"status":"ok","timestamp":1715020427286,"user_tz":-60,"elapsed":11,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"dd3b2d6c-4030-41e5-f1d8-82a7609fa8f9"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"]},{"output_type":"execute_result","data":{"text/plain":["LogisticRegression(C=1, solver='newton-cg')"],"text/html":["<style>#sk-container-id-13 {color: black;background-color: white;}#sk-container-id-13 pre{padding: 0;}#sk-container-id-13 div.sk-toggleable {background-color: white;}#sk-container-id-13 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-13 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-13 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-13 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-13 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-13 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-13 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-13 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-13 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-13 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-13 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-13 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-13 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-13 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-13 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-13 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-13 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-13 div.sk-item {position: relative;z-index: 1;}#sk-container-id-13 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-13 div.sk-item::before, #sk-container-id-13 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-13 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-13 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-13 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-13 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-13 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-13 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-13 div.sk-label-container {text-align: center;}#sk-container-id-13 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-13 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-13\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(C=1, solver=&#x27;newton-cg&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" checked><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(C=1, solver=&#x27;newton-cg&#x27;)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":146}],"source":["#best hyerparams\n","best_parameters_logreg = {'C': 1, 'max_iter': 100, 'solver': 'newton-cg'}\n","\n","logreg_best = LogisticRegression(**best_parameters_logreg)\n","logreg_best.fit(X_train_norm, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YLro5nWD7bsP"},"outputs":[],"source":["#Performance Evaluation on the Val Set\n","logreg_val_best_pred = logreg_best.predict(X_val_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"361fkaLE8-nW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020427538,"user_tz":-60,"elapsed":258,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"da784fb0-bf01-4447-dbf7-be0ec983046f"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]},{"output_type":"stream","name":"stdout","text":["Hyperparameter Tuned LogReg Model Evaluation (validation set):\n","Accuracy: 0.7934232715008431\n","Precision: 0.7633946392057324\n","Recall: 0.7934232715008431\n","F1-score: 0.7744974413853268\n","Confusion Matrix:\n"," [[698   0  64]\n"," [ 25   0  15]\n"," [141   0 243]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.81      0.92      0.86       762\n","           1       0.00      0.00      0.00        40\n","           2       0.75      0.63      0.69       384\n","\n","    accuracy                           0.79      1186\n","   macro avg       0.52      0.52      0.52      1186\n","weighted avg       0.76      0.79      0.77      1186\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}],"source":["print(\"Hyperparameter Tuned LogReg Model Evaluation (validation set):\")\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_val, logreg_val_best_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_val, logreg_val_best_pred, average='weighted')\n","recall = recall_score(y_val, logreg_val_best_pred, average='weighted')\n","f1 = f1_score(y_val, logreg_val_best_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_val, logreg_val_best_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_val, logreg_val_best_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ypWm3cRj9KUI"},"outputs":[],"source":["# Evaluation on the test set\n","\n","logreg_test_pred = logreg.predict(X_test_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"29txlNpT8-UN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020427538,"user_tz":-60,"elapsed":12,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"7a52ce2c-4acf-4fc4-f0d4-6f2a8df8b0a4"},"outputs":[{"output_type":"stream","name":"stdout","text":["LR Model Evaluation (test set):\n","Accuracy: 0.7757166947723441\n","Precision: 0.750161740218694\n","Recall: 0.7757166947723441\n","F1-score: 0.7563760948134813\n","Confusion Matrix:\n"," [[679   0  65]\n"," [ 24   0  12]\n"," [165   0 241]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.78      0.91      0.84       744\n","           1       0.00      0.00      0.00        36\n","           2       0.76      0.59      0.67       406\n","\n","    accuracy                           0.78      1186\n","   macro avg       0.51      0.50      0.50      1186\n","weighted avg       0.75      0.78      0.76      1186\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}],"source":["print(\"LR Model Evaluation (test set):\")\n","\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_test, logreg_test_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_test, logreg_test_pred, average='weighted')\n","recall = recall_score(y_test, logreg_test_pred, average='weighted')\n","f1 = f1_score(y_test, logreg_test_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_test, logreg_test_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_test, logreg_test_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FRCSMHlw9aon"},"outputs":[],"source":["#using the hyperparameter tuned model\n","\n","logreg_test_pred_best = logreg_best.predict(X_test_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qHpo1Ndp9p8p","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020427539,"user_tz":-60,"elapsed":9,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"f714289c-054a-42d4-ee20-2d13b4a515ab"},"outputs":[{"output_type":"stream","name":"stdout","text":["Hyperparameter Tuned LogReg Model Evaluation (test set):\n","Accuracy: 0.7757166947723441\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]},{"output_type":"stream","name":"stdout","text":["Precision: 0.750161740218694\n","Recall: 0.7757166947723441\n","F1-score: 0.7563760948134813\n","Confusion Matrix:\n"," [[679   0  65]\n"," [ 24   0  12]\n"," [165   0 241]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.78      0.91      0.84       744\n","           1       0.00      0.00      0.00        36\n","           2       0.76      0.59      0.67       406\n","\n","    accuracy                           0.78      1186\n","   macro avg       0.51      0.50      0.50      1186\n","weighted avg       0.75      0.78      0.76      1186\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}],"source":["print(\"Hyperparameter Tuned LogReg Model Evaluation (test set):\")\n","\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_test, logreg_test_pred_best)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_test, logreg_test_pred_best, average='weighted')\n","recall = recall_score(y_test, logreg_test_pred_best, average='weighted')\n","f1 = f1_score(y_test, logreg_test_pred_best, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_test, logreg_test_pred_best)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_test, logreg_test_pred_best)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"markdown","metadata":{"id":"QtyKrdfS-Bwk"},"source":["##AdaBoost"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ykjHLLd395Xw","colab":{"base_uri":"https://localhost:8080/","height":130},"executionInfo":{"status":"ok","timestamp":1715020428003,"user_tz":-60,"elapsed":470,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"b1984148-7be3-4b89-d9e8-a6d5a02135b6"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"]},{"output_type":"execute_result","data":{"text/plain":["AdaBoostClassifier(random_state=42)"],"text/html":["<style>#sk-container-id-14 {color: black;background-color: white;}#sk-container-id-14 pre{padding: 0;}#sk-container-id-14 div.sk-toggleable {background-color: white;}#sk-container-id-14 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-14 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-14 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-14 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-14 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-14 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-14 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-14 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-14 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-14 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-14 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-14 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-14 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-14 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-14 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-14 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-14 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-14 div.sk-item {position: relative;z-index: 1;}#sk-container-id-14 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-14 div.sk-item::before, #sk-container-id-14 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-14 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-14 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-14 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-14 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-14 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-14 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-14 div.sk-label-container {text-align: center;}#sk-container-id-14 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-14 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-14\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>AdaBoostClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-14\" type=\"checkbox\" checked><label for=\"sk-estimator-id-14\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">AdaBoostClassifier</label><div class=\"sk-toggleable__content\"><pre>AdaBoostClassifier(random_state=42)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":153}],"source":["adaboost = AdaBoostClassifier(n_estimators=50, learning_rate=1.0, random_state=42)\n","\n","# Training the model\n","adaboost.fit(X_train_norm, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1E-zUFQcPBl7"},"outputs":[],"source":["#Performance Evaluation on the Training Set\n","adaboost_train_pred = adaboost.predict(X_train_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"w46A1jmRPBjV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020428003,"user_tz":-60,"elapsed":7,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"8f9957a6-113e-4be7-dae4-5808d5bc70d6"},"outputs":[{"output_type":"stream","name":"stdout","text":["AdaBoost Evaluation (train set):\n","Accuracy: 0.8084221941080788\n","Precision: 0.797341304477599\n","Recall: 0.8084221941080788\n","F1-score: 0.7997732922158198\n","Confusion Matrix:\n"," [[3118   30  311]\n"," [  98   32   69]\n"," [ 531   21 1323]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.83      0.90      0.87      3459\n","           1       0.39      0.16      0.23       199\n","           2       0.78      0.71      0.74      1875\n","\n","    accuracy                           0.81      5533\n","   macro avg       0.66      0.59      0.61      5533\n","weighted avg       0.80      0.81      0.80      5533\n","\n"]}],"source":["print(\"AdaBoost Evaluation (train set):\")\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_train, adaboost_train_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_train, adaboost_train_pred, average='weighted')\n","recall = recall_score(y_train, adaboost_train_pred, average='weighted')\n","f1 = f1_score(y_train, adaboost_train_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_train, adaboost_train_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_train, adaboost_train_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xAH3s8kAPBNo"},"outputs":[],"source":["#Performance Evaluation on the validation Set\n","adaboost_val_pred = adaboost.predict(X_val_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6uHTxfTlP8Us","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020428314,"user_tz":-60,"elapsed":4,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"5e81f191-ad38-4a43-f537-352de1a528c3"},"outputs":[{"output_type":"stream","name":"stdout","text":["AdaBoost Evaluation (validation set):\n","Accuracy: 0.8094435075885329\n","Precision: 0.7979702692022996\n","Recall: 0.8094435075885329\n","F1-score: 0.8018084107564165\n","Confusion Matrix:\n"," [[684   5  73]\n"," [ 17   6  17]\n"," [107   7 270]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.85      0.90      0.87       762\n","           1       0.33      0.15      0.21        40\n","           2       0.75      0.70      0.73       384\n","\n","    accuracy                           0.81      1186\n","   macro avg       0.64      0.58      0.60      1186\n","weighted avg       0.80      0.81      0.80      1186\n","\n"]}],"source":["print(\"AdaBoost Evaluation (validation set):\")\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_val, adaboost_val_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_val, adaboost_val_pred, average='weighted')\n","recall = recall_score(y_val, adaboost_val_pred, average='weighted')\n","f1 = f1_score(y_val, adaboost_val_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_val, adaboost_val_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_val, adaboost_val_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"markdown","metadata":{"id":"eWbMRoIiQYCc"},"source":["###Hyp param"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FjJXt6ObQUfj"},"outputs":[],"source":["# # Define the hyperparameter grid\n","# param_grid = {\n","#     'n_estimators': [50, 100, 200],\n","#     'learning_rate': [0.01, 0.1, 1]\n","# }\n","\n","# # Perform grid search with cross-validation\n","# grid_search = GridSearchCV(estimator=adaboost, param_grid=param_grid, cv=5, scoring='accuracy')\n","# grid_search.fit(X_train_norm, y_train)\n","\n","# # Print the best hyperparameters\n","# print(\"Best Hyperparameters:\", grid_search.best_params_)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Vr1BlfBfQUSU","colab":{"base_uri":"https://localhost:8080/","height":130},"executionInfo":{"status":"ok","timestamp":1715020429218,"user_tz":-60,"elapsed":906,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"76c15347-e8e9-4995-99ed-840c6a078f7c"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/utils/validation.py:1143: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"]},{"output_type":"execute_result","data":{"text/plain":["AdaBoostClassifier(learning_rate=1, n_estimators=100, random_state=42)"],"text/html":["<style>#sk-container-id-15 {color: black;background-color: white;}#sk-container-id-15 pre{padding: 0;}#sk-container-id-15 div.sk-toggleable {background-color: white;}#sk-container-id-15 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-15 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-15 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-15 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-15 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-15 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-15 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-15 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-15 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-15 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-15 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-15 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-15 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-15 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-15 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-15 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-15 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-15 div.sk-item {position: relative;z-index: 1;}#sk-container-id-15 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-15 div.sk-item::before, #sk-container-id-15 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-15 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-15 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-15 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-15 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-15 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-15 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-15 div.sk-label-container {text-align: center;}#sk-container-id-15 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-15 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-15\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>AdaBoostClassifier(learning_rate=1, n_estimators=100, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-15\" type=\"checkbox\" checked><label for=\"sk-estimator-id-15\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">AdaBoostClassifier</label><div class=\"sk-toggleable__content\"><pre>AdaBoostClassifier(learning_rate=1, n_estimators=100, random_state=42)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":159}],"source":["best_hyperparameters_adaboost = {'learning_rate': 1, 'n_estimators': 100}\n","\n","adaboost_best = AdaBoostClassifier(**best_hyperparameters_adaboost, random_state=42)\n","adaboost_best.fit(X_train_norm, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ZzrXZJhNQUB2"},"outputs":[],"source":["#Performance Evaluation on the Val Set\n","adaboost_best_val_pred = adaboost_best.predict(X_val_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9rLGg670QTx3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020429219,"user_tz":-60,"elapsed":9,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"9f31ce83-ad27-424f-d548-8f771f65094e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Hyperparameter Tuned AdaBoost Model Evaluation (validation set):\n","Accuracy: 0.811973018549747\n","Precision: 0.8058146394402415\n","Recall: 0.811973018549747\n","F1-score: 0.8082392437234908\n","Confusion Matrix:\n"," [[682  12  68]\n"," [ 15   8  17]\n"," [ 99  12 273]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.86      0.90      0.88       762\n","           1       0.25      0.20      0.22        40\n","           2       0.76      0.71      0.74       384\n","\n","    accuracy                           0.81      1186\n","   macro avg       0.62      0.60      0.61      1186\n","weighted avg       0.81      0.81      0.81      1186\n","\n"]}],"source":["print(\"Hyperparameter Tuned AdaBoost Model Evaluation (validation set):\")\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_val, adaboost_best_val_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_val, adaboost_best_val_pred, average='weighted')\n","recall = recall_score(y_val, adaboost_best_val_pred, average='weighted')\n","f1 = f1_score(y_val, adaboost_best_val_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_val, adaboost_best_val_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_val, adaboost_best_val_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xBzBkKVIQTU-"},"outputs":[],"source":["# Evaluation on the test set\n","\n","adaboost_test_pred = adaboost.predict(X_test_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uGIHbw-kSKQP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020429631,"user_tz":-60,"elapsed":417,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"22f4fca3-31df-4db2-dfb3-76e27957bd12"},"outputs":[{"output_type":"stream","name":"stdout","text":["AdaBoost Model Evaluation (test set):\n","Accuracy: 0.8018549747048904\n","Precision: 0.7915190039122438\n","Recall: 0.8018549747048904\n","F1-score: 0.794973788387583\n","Confusion Matrix:\n"," [[663  11  70]\n"," [ 19   4  13]\n"," [117   5 284]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.83      0.89      0.86       744\n","           1       0.20      0.11      0.14        36\n","           2       0.77      0.70      0.73       406\n","\n","    accuracy                           0.80      1186\n","   macro avg       0.60      0.57      0.58      1186\n","weighted avg       0.79      0.80      0.79      1186\n","\n"]}],"source":["print(\"AdaBoost Model Evaluation (test set):\")\n","\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_test, adaboost_test_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_test, adaboost_test_pred, average='weighted')\n","recall = recall_score(y_test, adaboost_test_pred, average='weighted')\n","f1 = f1_score(y_test, adaboost_test_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_test, adaboost_test_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_test, adaboost_test_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VUzC8F72SKN7"},"outputs":[],"source":["#using the hyperparameter tuned model\n","\n","adaboost_test_pred_best = adaboost_best.predict(X_test_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7_Zwr-pISKJn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020429631,"user_tz":-60,"elapsed":5,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"b02addca-ba9f-4e44-c1e9-c8b83608c845"},"outputs":[{"output_type":"stream","name":"stdout","text":["Hyperparameter Tuned AdaBoost Model Evaluation (test set):\n","Accuracy: 0.7967959527824621\n","Precision: 0.7911776022869107\n","Recall: 0.7967959527824621\n","F1-score: 0.7928974206490739\n","Confusion Matrix:\n"," [[656  14  74]\n"," [ 16   7  13]\n"," [116   8 282]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.83      0.88      0.86       744\n","           1       0.24      0.19      0.22        36\n","           2       0.76      0.69      0.73       406\n","\n","    accuracy                           0.80      1186\n","   macro avg       0.61      0.59      0.60      1186\n","weighted avg       0.79      0.80      0.79      1186\n","\n"]}],"source":["print(\"Hyperparameter Tuned AdaBoost Model Evaluation (test set):\")\n","\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_test, adaboost_test_pred_best)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_test, adaboost_test_pred_best, average='weighted')\n","recall = recall_score(y_test, adaboost_test_pred_best, average='weighted')\n","f1 = f1_score(y_test, adaboost_test_pred_best, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_test, adaboost_test_pred_best)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_test, adaboost_test_pred_best)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"markdown","metadata":{"id":"OvLSzRGpTL61"},"source":["##XGBoost"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nhOq9v6SS-EG","colab":{"base_uri":"https://localhost:8080/","height":248},"executionInfo":{"status":"ok","timestamp":1715020430454,"user_tz":-60,"elapsed":825,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"73172990-02a3-424f-d301-deb941653027"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["XGBClassifier(base_score=None, booster=None, callbacks=None,\n","              colsample_bylevel=None, colsample_bynode=None,\n","              colsample_bytree=None, device=None, early_stopping_rounds=None,\n","              enable_categorical=False, eval_metric=None, feature_types=None,\n","              gamma=None, grow_policy=None, importance_type=None,\n","              interaction_constraints=None, learning_rate=None, max_bin=None,\n","              max_cat_threshold=None, max_cat_to_onehot=None,\n","              max_delta_step=None, max_depth=None, max_leaves=None,\n","              min_child_weight=None, missing=nan, monotone_constraints=None,\n","              multi_strategy=None, n_estimators=None, n_jobs=None, num_class=3,\n","              num_parallel_tree=None, ...)"],"text/html":["<style>#sk-container-id-16 {color: black;background-color: white;}#sk-container-id-16 pre{padding: 0;}#sk-container-id-16 div.sk-toggleable {background-color: white;}#sk-container-id-16 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-16 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-16 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-16 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-16 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-16 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-16 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-16 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-16 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-16 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-16 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-16 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-16 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-16 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-16 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-16 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-16 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-16 div.sk-item {position: relative;z-index: 1;}#sk-container-id-16 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-16 div.sk-item::before, #sk-container-id-16 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-16 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-16 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-16 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-16 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-16 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-16 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-16 div.sk-label-container {text-align: center;}#sk-container-id-16 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-16 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-16\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n","              colsample_bylevel=None, colsample_bynode=None,\n","              colsample_bytree=None, device=None, early_stopping_rounds=None,\n","              enable_categorical=False, eval_metric=None, feature_types=None,\n","              gamma=None, grow_policy=None, importance_type=None,\n","              interaction_constraints=None, learning_rate=None, max_bin=None,\n","              max_cat_threshold=None, max_cat_to_onehot=None,\n","              max_delta_step=None, max_depth=None, max_leaves=None,\n","              min_child_weight=None, missing=nan, monotone_constraints=None,\n","              multi_strategy=None, n_estimators=None, n_jobs=None, num_class=3,\n","              num_parallel_tree=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-16\" type=\"checkbox\" checked><label for=\"sk-estimator-id-16\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n","              colsample_bylevel=None, colsample_bynode=None,\n","              colsample_bytree=None, device=None, early_stopping_rounds=None,\n","              enable_categorical=False, eval_metric=None, feature_types=None,\n","              gamma=None, grow_policy=None, importance_type=None,\n","              interaction_constraints=None, learning_rate=None, max_bin=None,\n","              max_cat_threshold=None, max_cat_to_onehot=None,\n","              max_delta_step=None, max_depth=None, max_leaves=None,\n","              min_child_weight=None, missing=nan, monotone_constraints=None,\n","              multi_strategy=None, n_estimators=None, n_jobs=None, num_class=3,\n","              num_parallel_tree=None, ...)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":166}],"source":["# Create XGBoost classifier\n","xgb = XGBClassifier(objective='multi:softmax', num_class=3, seed=42)\n","\n","# Train the model\n","xgb.fit(X_train_norm, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NOHVOVPpS9_e"},"outputs":[],"source":["#Performance Evaluation on the Training Set\n","xgb_train_pred = xgb.predict(X_train_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uz9AZGkHT4oa","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020430454,"user_tz":-60,"elapsed":13,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"5a1e1634-fb3c-41e3-e4d0-289136fc0ecc"},"outputs":[{"output_type":"stream","name":"stdout","text":["XGBoost Evaluation (train set):\n","Accuracy: 0.9980119284294234\n","Precision: 0.9980157137326576\n","Recall: 0.9980119284294234\n","F1-score: 0.9980108072864483\n","Confusion Matrix:\n"," [[3458    0    1]\n"," [   0  199    0]\n"," [   9    1 1865]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00      3459\n","           1       0.99      1.00      1.00       199\n","           2       1.00      0.99      1.00      1875\n","\n","    accuracy                           1.00      5533\n","   macro avg       1.00      1.00      1.00      5533\n","weighted avg       1.00      1.00      1.00      5533\n","\n"]}],"source":["print(\"XGBoost Evaluation (train set):\")\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_train, xgb_train_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_train, xgb_train_pred, average='weighted')\n","recall = recall_score(y_train, xgb_train_pred, average='weighted')\n","f1 = f1_score(y_train, xgb_train_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_train, xgb_train_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_train, xgb_train_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oAFd9JnkUNNH"},"outputs":[],"source":["#Performance Evaluation on the validation Set\n","xgb_val_pred = xgb.predict(X_val_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"983i4y1IT4aI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020430768,"user_tz":-60,"elapsed":6,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"11f00dff-e076-49e1-d78a-71232daf077b"},"outputs":[{"output_type":"stream","name":"stdout","text":["XGBoost Evaluation (validation set):\n","Accuracy: 0.8322091062394603\n","Precision: 0.821576821155236\n","Recall: 0.8322091062394603\n","F1-score: 0.8232218360428094\n","Confusion Matrix:\n"," [[700   2  60]\n"," [ 18   6  16]\n"," [ 98   5 281]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.86      0.92      0.89       762\n","           1       0.46      0.15      0.23        40\n","           2       0.79      0.73      0.76       384\n","\n","    accuracy                           0.83      1186\n","   macro avg       0.70      0.60      0.62      1186\n","weighted avg       0.82      0.83      0.82      1186\n","\n"]}],"source":["print(\"XGBoost Evaluation (validation set):\")\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_val, xgb_val_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_val, xgb_val_pred, average='weighted')\n","recall = recall_score(y_val, xgb_val_pred, average='weighted')\n","f1 = f1_score(y_val, xgb_val_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_val, xgb_val_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_val, xgb_val_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"markdown","metadata":{"id":"OHby2yjavr8X"},"source":["##Hyp param"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"gE3hNIzYVE1G"},"outputs":[],"source":["# # Define the hyperparameter grid\n","# param_grid = {\n","#     'max_depth': [3, 5, 7],\n","#     'learning_rate': [0.01, 0.1, 0.2],\n","#     'n_estimators': [50, 100, 200],\n","#     'gamma': [0, 0.1, 0.2],\n","#     'subsample': [0.6, 0.8, 1.0],\n","#     'colsample_bytree': [0.6, 0.8, 1.0],\n","# }\n","\n","# # Perform grid search with cross-validation\n","# grid_search = GridSearchCV(estimator=xgb, param_grid=param_grid, cv=5, scoring='accuracy')\n","# grid_search.fit(X_train_norm, y_train)\n","\n","# # Print the best hyperparameters\n","# print(\"Best Hyperparameters:\", grid_search.best_params_)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6IGsBzexU8Y3","colab":{"base_uri":"https://localhost:8080/","height":248},"executionInfo":{"status":"ok","timestamp":1715020431794,"user_tz":-60,"elapsed":1029,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"cee1b3f9-57d7-4af5-c505-f62c0e01e6e8"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["XGBClassifier(base_score=None, booster=None, callbacks=None,\n","              colsample_bylevel=None, colsample_bynode=None,\n","              colsample_bytree=0.8, device=None, early_stopping_rounds=None,\n","              enable_categorical=False, eval_metric=None, feature_types=None,\n","              gamma=0, grow_policy=None, importance_type=None,\n","              interaction_constraints=None, learning_rate=0.1, max_bin=None,\n","              max_cat_threshold=None, max_cat_to_onehot=None,\n","              max_delta_step=None, max_depth=5, max_leaves=None,\n","              min_child_weight=None, missing=nan, monotone_constraints=None,\n","              multi_strategy=None, n_estimators=200, n_jobs=None, num_class=3,\n","              num_parallel_tree=None, ...)"],"text/html":["<style>#sk-container-id-17 {color: black;background-color: white;}#sk-container-id-17 pre{padding: 0;}#sk-container-id-17 div.sk-toggleable {background-color: white;}#sk-container-id-17 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-17 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-17 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-17 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-17 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-17 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-17 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-17 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-17 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-17 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-17 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-17 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-17 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-17 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-17 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-17 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-17 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-17 div.sk-item {position: relative;z-index: 1;}#sk-container-id-17 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-17 div.sk-item::before, #sk-container-id-17 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-17 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-17 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-17 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-17 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-17 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-17 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-17 div.sk-label-container {text-align: center;}#sk-container-id-17 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-17 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-17\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n","              colsample_bylevel=None, colsample_bynode=None,\n","              colsample_bytree=0.8, device=None, early_stopping_rounds=None,\n","              enable_categorical=False, eval_metric=None, feature_types=None,\n","              gamma=0, grow_policy=None, importance_type=None,\n","              interaction_constraints=None, learning_rate=0.1, max_bin=None,\n","              max_cat_threshold=None, max_cat_to_onehot=None,\n","              max_delta_step=None, max_depth=5, max_leaves=None,\n","              min_child_weight=None, missing=nan, monotone_constraints=None,\n","              multi_strategy=None, n_estimators=200, n_jobs=None, num_class=3,\n","              num_parallel_tree=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-17\" type=\"checkbox\" checked><label for=\"sk-estimator-id-17\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n","              colsample_bylevel=None, colsample_bynode=None,\n","              colsample_bytree=0.8, device=None, early_stopping_rounds=None,\n","              enable_categorical=False, eval_metric=None, feature_types=None,\n","              gamma=0, grow_policy=None, importance_type=None,\n","              interaction_constraints=None, learning_rate=0.1, max_bin=None,\n","              max_cat_threshold=None, max_cat_to_onehot=None,\n","              max_delta_step=None, max_depth=5, max_leaves=None,\n","              min_child_weight=None, missing=nan, monotone_constraints=None,\n","              multi_strategy=None, n_estimators=200, n_jobs=None, num_class=3,\n","              num_parallel_tree=None, ...)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":172}],"source":["best_hyperparameters_xgb = {'colsample_bytree': 0.8, 'gamma': 0,\n","                            'learning_rate': 0.1, 'max_depth': 5,\n","                            'n_estimators': 200, 'subsample': 0.8}\n","# Retraining with best hyperparameters\n","xgb_best = xgb.set_params(**best_hyperparameters_xgb)\n","\n","# Train the model with the best hyperparameters\n","xgb_best.fit(X_train_norm, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ABKN9AfqT4Jg"},"outputs":[],"source":["#Performance Evaluation on the Val Set\n","xgb_val_best_pred = xgb_best.predict(X_val_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CfJn_DI2zRqi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020431794,"user_tz":-60,"elapsed":4,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"93434fac-4bc9-4199-e5aa-67213c0860f6"},"outputs":[{"output_type":"stream","name":"stdout","text":["Hyperparameter Tuned XGBoost Model Evaluation (validation set):\n","Accuracy: 0.8279932546374368\n","Precision: 0.8171218427685983\n","Recall: 0.8279932546374368\n","F1-score: 0.8192799266350648\n","Confusion Matrix:\n"," [[696   4  62]\n"," [ 20   6  14]\n"," [100   4 280]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.85      0.91      0.88       762\n","           1       0.43      0.15      0.22        40\n","           2       0.79      0.73      0.76       384\n","\n","    accuracy                           0.83      1186\n","   macro avg       0.69      0.60      0.62      1186\n","weighted avg       0.82      0.83      0.82      1186\n","\n"]}],"source":["print(\"Hyperparameter Tuned XGBoost Model Evaluation (validation set):\")\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_val, xgb_val_best_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_val, xgb_val_best_pred, average='weighted')\n","recall = recall_score(y_val, xgb_val_best_pred, average='weighted')\n","f1 = f1_score(y_val, xgb_val_best_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_val, xgb_val_best_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_val, xgb_val_best_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ivOgKnn_zerw"},"outputs":[],"source":["# Evaluation on the test set\n","\n","xgb_test_pred = xgb.predict(X_test_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5UwuaVnlz1Yd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715025066084,"user_tz":-60,"elapsed":622,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"f0706e35-89f5-46dc-e417-8742028f26aa"},"outputs":[{"output_type":"stream","name":"stdout","text":["XGBoost Model Evaluation (test set):\n","Accuracy: 0.815345699831366\n","Precision: 0.8049839136171999\n","Recall: 0.815345699831366\n","F1-score: 0.8054289026193696\n","Confusion Matrix:\n"," [[675   4  65]\n"," [ 19   4  13]\n"," [117   1 288]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.83      0.91      0.87       744\n","           1       0.44      0.11      0.18        36\n","           2       0.79      0.71      0.75       406\n","\n","    accuracy                           0.82      1186\n","   macro avg       0.69      0.58      0.60      1186\n","weighted avg       0.80      0.82      0.81      1186\n","\n"]}],"source":["print(\"XGBoost Model Evaluation (test set):\")\n","\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_test, xgb_test_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_test, xgb_test_pred, average='weighted')\n","recall = recall_score(y_test, xgb_test_pred, average='weighted')\n","f1 = f1_score(y_test, xgb_test_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_test, xgb_test_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_test, xgb_test_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Dn8_eY4pz_IL"},"outputs":[],"source":["#using the hyperparameter tuned model\n","\n","xgb_test_pred_best = xgb_best.predict(X_test_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TToixKXF0ErX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020432232,"user_tz":-60,"elapsed":7,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"f5f41688-1ed3-4979-dadb-eb4cfa58cd44"},"outputs":[{"output_type":"stream","name":"stdout","text":["Hyperparameter Tuned XGBoost Model Evaluation (test set):\n","Accuracy: 0.815345699831366\n","Precision: 0.8049839136171999\n","Recall: 0.815345699831366\n","F1-score: 0.8054289026193696\n","Confusion Matrix:\n"," [[675   4  65]\n"," [ 19   4  13]\n"," [117   1 288]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.83      0.91      0.87       744\n","           1       0.44      0.11      0.18        36\n","           2       0.79      0.71      0.75       406\n","\n","    accuracy                           0.82      1186\n","   macro avg       0.69      0.58      0.60      1186\n","weighted avg       0.80      0.82      0.81      1186\n","\n"]}],"source":["print(\"Hyperparameter Tuned XGBoost Model Evaluation (test set):\")\n","\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_test, xgb_test_pred_best)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_test, xgb_test_pred_best, average='weighted')\n","recall = recall_score(y_test, xgb_test_pred_best, average='weighted')\n","f1 = f1_score(y_test, xgb_test_pred_best, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_test, xgb_test_pred_best)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_test, xgb_test_pred_best)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"markdown","metadata":{"id":"rx1knti86bBh"},"source":["##Combination"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yPiLp4MP6ael","colab":{"base_uri":"https://localhost:8080/","height":201},"executionInfo":{"status":"ok","timestamp":1715020437759,"user_tz":-60,"elapsed":5530,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"e8744806-d8b0-467f-a24e-7193762e5a15"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/preprocessing/_label.py:99: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.10/dist-packages/sklearn/preprocessing/_label.py:134: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, dtype=self.classes_.dtype, warn=True)\n"]},{"output_type":"execute_result","data":{"text/plain":["VotingClassifier(estimators=[('Random_Forest',\n","                              RandomForestClassifier(random_state=42)),\n","                             ('AdaBoost', AdaBoostClassifier(random_state=42)),\n","                             ('XGBoost',\n","                              XGBClassifier(base_score=None, booster=None,\n","                                            callbacks=None,\n","                                            colsample_bylevel=None,\n","                                            colsample_bynode=None,\n","                                            colsample_bytree=0.8, device=None,\n","                                            early_stopping_rounds=None,\n","                                            enable_categorical=False,\n","                                            eval_metric=Non...\n","                                            grow_policy=None,\n","                                            importance_type=None,\n","                                            interaction_constraints=None,\n","                                            learning_rate=0.1, max_bin=None,\n","                                            max_cat_threshold=None,\n","                                            max_cat_to_onehot=None,\n","                                            max_delta_step=None, max_depth=5,\n","                                            max_leaves=None,\n","                                            min_child_weight=None, missing=nan,\n","                                            monotone_constraints=None,\n","                                            multi_strategy=None,\n","                                            n_estimators=200, n_jobs=None,\n","                                            num_class=3, num_parallel_tree=None, ...))],\n","                 voting='soft')"],"text/html":["<style>#sk-container-id-18 {color: black;background-color: white;}#sk-container-id-18 pre{padding: 0;}#sk-container-id-18 div.sk-toggleable {background-color: white;}#sk-container-id-18 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-18 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-18 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-18 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-18 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-18 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-18 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-18 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-18 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-18 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-18 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-18 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-18 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-18 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-18 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-18 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-18 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-18 div.sk-item {position: relative;z-index: 1;}#sk-container-id-18 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-18 div.sk-item::before, #sk-container-id-18 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-18 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-18 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-18 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-18 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-18 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-18 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-18 div.sk-label-container {text-align: center;}#sk-container-id-18 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-18 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-18\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>VotingClassifier(estimators=[(&#x27;Random_Forest&#x27;,\n","                              RandomForestClassifier(random_state=42)),\n","                             (&#x27;AdaBoost&#x27;, AdaBoostClassifier(random_state=42)),\n","                             (&#x27;XGBoost&#x27;,\n","                              XGBClassifier(base_score=None, booster=None,\n","                                            callbacks=None,\n","                                            colsample_bylevel=None,\n","                                            colsample_bynode=None,\n","                                            colsample_bytree=0.8, device=None,\n","                                            early_stopping_rounds=None,\n","                                            enable_categorical=False,\n","                                            eval_metric=Non...\n","                                            grow_policy=None,\n","                                            importance_type=None,\n","                                            interaction_constraints=None,\n","                                            learning_rate=0.1, max_bin=None,\n","                                            max_cat_threshold=None,\n","                                            max_cat_to_onehot=None,\n","                                            max_delta_step=None, max_depth=5,\n","                                            max_leaves=None,\n","                                            min_child_weight=None, missing=nan,\n","                                            monotone_constraints=None,\n","                                            multi_strategy=None,\n","                                            n_estimators=200, n_jobs=None,\n","                                            num_class=3, num_parallel_tree=None, ...))],\n","                 voting=&#x27;soft&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-18\" type=\"checkbox\" ><label for=\"sk-estimator-id-18\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">VotingClassifier</label><div class=\"sk-toggleable__content\"><pre>VotingClassifier(estimators=[(&#x27;Random_Forest&#x27;,\n","                              RandomForestClassifier(random_state=42)),\n","                             (&#x27;AdaBoost&#x27;, AdaBoostClassifier(random_state=42)),\n","                             (&#x27;XGBoost&#x27;,\n","                              XGBClassifier(base_score=None, booster=None,\n","                                            callbacks=None,\n","                                            colsample_bylevel=None,\n","                                            colsample_bynode=None,\n","                                            colsample_bytree=0.8, device=None,\n","                                            early_stopping_rounds=None,\n","                                            enable_categorical=False,\n","                                            eval_metric=Non...\n","                                            grow_policy=None,\n","                                            importance_type=None,\n","                                            interaction_constraints=None,\n","                                            learning_rate=0.1, max_bin=None,\n","                                            max_cat_threshold=None,\n","                                            max_cat_to_onehot=None,\n","                                            max_delta_step=None, max_depth=5,\n","                                            max_leaves=None,\n","                                            min_child_weight=None, missing=nan,\n","                                            monotone_constraints=None,\n","                                            multi_strategy=None,\n","                                            n_estimators=200, n_jobs=None,\n","                                            num_class=3, num_parallel_tree=None, ...))],\n","                 voting=&#x27;soft&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>Random_Forest</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-19\" type=\"checkbox\" ><label for=\"sk-estimator-id-19\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>AdaBoost</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-20\" type=\"checkbox\" ><label for=\"sk-estimator-id-20\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">AdaBoostClassifier</label><div class=\"sk-toggleable__content\"><pre>AdaBoostClassifier(random_state=42)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><label>XGBoost</label></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-21\" type=\"checkbox\" ><label for=\"sk-estimator-id-21\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n","              colsample_bylevel=None, colsample_bynode=None,\n","              colsample_bytree=0.8, device=None, early_stopping_rounds=None,\n","              enable_categorical=False, eval_metric=None, feature_types=None,\n","              gamma=0, grow_policy=None, importance_type=None,\n","              interaction_constraints=None, learning_rate=0.1, max_bin=None,\n","              max_cat_threshold=None, max_cat_to_onehot=None,\n","              max_delta_step=None, max_depth=5, max_leaves=None,\n","              min_child_weight=None, missing=nan, monotone_constraints=None,\n","              multi_strategy=None, n_estimators=200, n_jobs=None, num_class=3,\n","              num_parallel_tree=None, ...)</pre></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":179}],"source":["from sklearn.ensemble import VotingClassifier\n","\n","# Define the estimators (already trained models)\n","estimators = [('Random_Forest', rf),('AdaBoost', adaboost),\n","              ('XGBoost', xgb_best)\n","             ]\n","              # ,,,('Decision_Tree', dt_best),('LogReg', logreg_best),\n","              # ],   ('SVM', svm_c_best),('KNN', knn_best),\n","              # ,\n","\n","# estimators = [('Random_Forest', rf_best), ('Decision_Tree', dt_best),\n","#               ('KNN', knn_best), ('SVM', svm_c_best),\n","#               ('LogReg', logreg_best),('AdaBoost', adaboost_best),\n","#               ('XGBoost', xgb_best)]\n","\n","# Create the Voting Classifier (with soft voting)\n","voting_clf = VotingClassifier(estimators, voting='soft')\n","\n","# Train the Voting Classifier on the training data\n","voting_clf.fit(X_train_norm, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"al-28au48nOz"},"outputs":[],"source":["#Performance Evaluation on the Training Set\n","voting_clf_train_pred = voting_clf.predict(X_train_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"olSWwZAW84So","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020438217,"user_tz":-60,"elapsed":8,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"0c2acb05-6cfb-42d1-9d53-238508496906"},"outputs":[{"output_type":"stream","name":"stdout","text":["Combined Model Evaluation (train set):\n","Accuracy: 0.9878908367973974\n","Precision: 0.9879865177112834\n","Recall: 0.9878908367973974\n","F1-score: 0.9878619852691404\n","Confusion Matrix:\n"," [[3449    0   10]\n"," [   4  195    0]\n"," [  53    0 1822]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.98      1.00      0.99      3459\n","           1       1.00      0.98      0.99       199\n","           2       0.99      0.97      0.98      1875\n","\n","    accuracy                           0.99      5533\n","   macro avg       0.99      0.98      0.99      5533\n","weighted avg       0.99      0.99      0.99      5533\n","\n"]}],"source":["print(\"Combined Model Evaluation (train set):\")\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_train, voting_clf_train_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_train, voting_clf_train_pred, average='weighted')\n","recall = recall_score(y_train, voting_clf_train_pred, average='weighted')\n","f1 = f1_score(y_train, voting_clf_train_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_train, voting_clf_train_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_train, voting_clf_train_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dn1NVwo3AJoI"},"outputs":[],"source":["# Make predictions on the test data\n","voting_clf_val_pred = voting_clf.predict(X_val_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zeMIbKH8AJHr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020438217,"user_tz":-60,"elapsed":6,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"1b8254a9-8a60-404a-f215-31e58b771066"},"outputs":[{"output_type":"stream","name":"stdout","text":["Combined Model Evaluation (Val set):\n","Accuracy: 0.8372681281618887\n","Precision: 0.8319714298334929\n","Recall: 0.8372681281618887\n","F1-score: 0.8263304686784995\n","Confusion Matrix:\n"," [[705   1  56]\n"," [ 20   5  15]\n"," [100   1 283]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.85      0.93      0.89       762\n","           1       0.71      0.12      0.21        40\n","           2       0.80      0.74      0.77       384\n","\n","    accuracy                           0.84      1186\n","   macro avg       0.79      0.60      0.62      1186\n","weighted avg       0.83      0.84      0.83      1186\n","\n"]}],"source":["print(\"Combined Model Evaluation (Val set):\")\n","\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_val, voting_clf_val_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_val, voting_clf_val_pred, average='weighted')\n","recall = recall_score(y_val, voting_clf_val_pred, average='weighted')\n","f1 = f1_score(y_val, voting_clf_val_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_val, voting_clf_val_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_val, voting_clf_val_pred)\n","print(\"Classification Report:\\n\", class_report)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3MRQ7cMC6itH"},"outputs":[],"source":["# Make predictions on the test data\n","voting_clf_pred = voting_clf.predict(X_test_norm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qq7mop8z8LIL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715020438525,"user_tz":-60,"elapsed":19,"user":{"displayName":"arthur uchebo","userId":"04707554836616194436"}},"outputId":"81f80788-2b87-4ad8-fa6e-13cabff7454a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Combined Model Evaluation (test set):\n","Accuracy: 0.815345699831366\n","Precision: 0.8076730043424815\n","Recall: 0.815345699831366\n","F1-score: 0.8046197029289144\n","Confusion Matrix:\n"," [[678   2  64]\n"," [ 21   4  11]\n"," [120   1 285]]\n","Classification Report:\n","               precision    recall  f1-score   support\n","\n","           0       0.83      0.91      0.87       744\n","           1       0.57      0.11      0.19        36\n","           2       0.79      0.70      0.74       406\n","\n","    accuracy                           0.82      1186\n","   macro avg       0.73      0.57      0.60      1186\n","weighted avg       0.81      0.82      0.80      1186\n","\n"]}],"source":["print(\"Combined Model Evaluation (test set):\")\n","\n","\n","# Calculate accuracy\n","accuracy = accuracy_score(y_test, voting_clf_pred)\n","print(\"Accuracy:\", accuracy)\n","\n","# # Calculate precision, recall, and F1-score\n","precision = precision_score(y_test, voting_clf_pred, average='weighted')\n","recall = recall_score(y_test, voting_clf_pred, average='weighted')\n","f1 = f1_score(y_test, voting_clf_pred, average='weighted')\n","print(\"Precision:\", precision)\n","print(\"Recall:\", recall)\n","print(\"F1-score:\", f1)\n","\n","# # Generate confusion matrix\n","conf_matrix = confusion_matrix(y_test, voting_clf_pred)\n","print(\"Confusion Matrix:\\n\", conf_matrix)\n","\n","# # Generate classification report\n","class_report = classification_report(y_test, voting_clf_pred)\n","print(\"Classification Report:\\n\", class_report)"]}],"metadata":{"colab":{"provenance":[],"mount_file_id":"1PnzAiS_xw3ZO7TXaRfDOFOKKy7EYys7E","authorship_tag":"ABX9TyOOqv3mZQpxE0g68ITqwy77"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}